private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int array[]={0,1,2,3,4};if(data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}(new b()).mainSink(request,response);}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}short[] dataArray=new short[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{short data;data=2;short result=(short)(data * data);IO.writeLine("result: "+result);}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}if(data!=null){System.out.printf("%s%n",data);}}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private int mainSource()throws Throwable{int data;data=100;return data;}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int count;count=2;(new b()).mainSink(count);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{short data;data=2;short[] dataArray=new short[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data=2;(new b()).mainSink(request,response);}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");if(data!=null){Cookie cookieSink=new Cookie("lang",URLEncoder.encode(data,"UTF-8"));response.addCookie(cookieSink);}}
private void main()throws Throwable{String data;data=System.getenv("ADD");dataGoodB2G=data;mainSink();}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;{int result=(int)(data * 2);IO.writeLine("result: "+result);}}}
private void main()throws Throwable{short data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data=0;data=(new SecureRandom()).nextInt();mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}(new b()).mainSink(data);}
private void main()throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data);}
private int mainSource()throws Throwable{int count;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}return count;}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{while(true){IO.writeLine("good()Main thread name is: "+Thread.currentThread().getName());Thread threadTwo=new Thread(){public void run(){IO.writeLine("good()In thread: "+Thread.currentThread().getName());}};break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private short mainSource()throws Throwable{short data;data=2;return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{byte data=0;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int count;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(count);}
private void main()throws Throwable{float data;while(true){{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}break;}while(true){if(Math.abs(data)> 0.000001){int result=(int)(100.0/data);IO.writeLine(result);}else{IO.writeLine("This would result in a divide by zero");}break;}}
private void main()throws Throwable{short data;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);mainPrivate=false;mainSink(data);}
private void main()throws Throwable{byte data;data=Byte.MAX_VALUE;byte[] dataArray=new byte[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{data=(new java.security.SecureRandom()).nextLong();(new b()).mainSink();}
private void main()throws Throwable{float data;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}HashMap<Integer,Float> dataHashMap=new HashMap<Integer,Float>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}(new b()).mainSink();}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{(new b()).mainSink();}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{float dataCopy;{float data;data=2.0f;dataCopy=data;}{float data=dataCopy;int result=(int)(100.0 % data);IO.writeLine(result);}}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;data="5";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}mainSink(data,request,response);}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{byte data;data=2;data++;byte result=(byte)(data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int dataCopy;{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataCopy=data;}{int data=dataCopy;if(data > Integer.MIN_VALUE){data--;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data=0;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}{if(data >(Byte.MIN_VALUE/2)){byte result=(byte)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform multiplication.");}}}
private void main()throws Throwable{int data=(new b()).mainSource();{IO.writeLine((short)data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=0;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}mainPublicStatic=false;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{byte dataCopy;{byte data;data=2;dataCopy=data;}{byte data=dataCopy;{byte result=(byte)(data * 2);IO.writeLine("result: "+result);}}}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{short data=0;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);mainPublicStatic=false;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){*/URI uri;try{uri=new URI(data);}catch(URISyntaxException exceptURISyntax){response.getWriter().write("Invalid redirect URL");return;}response.sendRedirect(data);return;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{int data=0;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}long[] dataArray=new long[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{byte data;data=2;HashMap<Integer,Byte> dataHashMap=new HashMap<Integer,Byte>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}long[] dataArray=new long[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;data--;int result=(int)(data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){data++;int result=(int)(data);IO.writeLine("result: "+result);break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=true;data=main_source(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data);}}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}if(data < Integer.MAX_VALUE){int result=(int)(data+1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform addition.");}}
private void main()throws Throwable{String dataCopy;{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataCopy=data;}{String data=dataCopy;int numberOfLoops;try{numberOfLoops=Integer.parseInt(data);}catch(NumberFormatException exceptNumberFormat){IO.writeLine("Invalid response. Numeric input expected. Assuming 1.");numberOfLoops=1;}if(numberOfLoops >=0 && numberOfLoops <=5){for(int i=0;i < numberOfLoops;i++){IO.writeLine("hello world");}}}}
private void main()throws Throwable{int dataCopy;{int data;dataCopy=data;}{int data=dataCopy;if(data!=0){IO.writeLine("100/"+data+"="+(100/data)+"\n");}else{IO.writeLine("This would result in a divide by zero");}}}
private void main()throws Throwable{long data;data=2;mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}break;}while(true){if(data < Integer.MAX_VALUE){int result=(int)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}if(data > Integer.MIN_VALUE){data--;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}
private void main()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{short data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{float data=0.0f;{String stringNumber=System.getenv("ADD");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}if(data > Byte.MIN_VALUE){byte result=(byte)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{String password=(new b()).mainSource();if(password!=null){{Cipher aesCipher=Cipher.getInstance("AES");SecretKeySpec secretKeySpec=new SecretKeySpec("ABCDEFGHABCDEFGH".getBytes("UTF-8"),"AES");aesCipher.init(Cipher.DECRYPT_MODE,secretKeySpec);password=new String(aesCipher.doFinal(password.getBytes("UTF-8")),"UTF-8");}Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=DriverManager.getConnection("data-url","root",password);preparedStatement=connection.prepareStatement("select * from test_table");resultSet=preparedStatement.executeQuery();}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{int count;count=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(count);byte[] countSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(countSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{long dataCopy;{long data;data=2;dataCopy=data;}{long data=dataCopy;long result=(long)(data-1);IO.writeLine("result: "+result);}}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}LinkedList<Long> dataLinkedList=new LinkedList<Long>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String password;password="Password1234!";LinkedList<String> passwordLinkedList=new LinkedList<String>();passwordLinkedList.add(0,password);passwordLinkedList.add(1,password);passwordLinkedList.add(2,password);(new b()).mainSink(passwordLinkedList);}
private void main()throws Throwable{long data;data=Long.MAX_VALUE;mainSink(data);}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}if(data < Long.MAX_VALUE){long result=(long)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int count;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPrivate=true;mainSink(count);}
private void main()throws Throwable{int data=(new b()).mainSource();int result=(int)(++data);IO.writeLine("result: "+result);}
private void main()throws Throwable{String data;data=System.getProperty("user.home");mainSink(data);}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String data=(new b()).mainSource();Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=false;data=(new b()).mainSource(request,response);if(data!=null){response.getWriter().println("<br>bad()-<img src=\""+data+"\">");}}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{int count=0;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(count);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{int count;count=2;countGoodG2B=count;mainSink();}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){IO.writeLine("100%"+data+"="+(100 % data)+"\n");break;}}
private void main()throws Throwable{short data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;HashMap intHashMap=new HashMap(data);}
private void main()throws Throwable{int data;main_private=false;data=main_source();ArrayList intArrayList=new ArrayList(data);}
private void main()throws Throwable{int data;data=100;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{byte dataCopy;{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataCopy=data;}{byte data=dataCopy;if((data!=Integer.MIN_VALUE)&&(data!=Long.MIN_VALUE)&&(Math.abs(data)<=(long)Math.sqrt(Byte.MAX_VALUE))){byte result=(byte)(data * data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform squaring.");}}}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);(new b()).mainSink(data);}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{count=2;(new b()).mainSink();}
private void main()throws Throwable{String data;data="foo";Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name='"+data+"'");Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data=(new b()).mainSource();if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}}
private void main()throws Throwable{String data=(new b()).mainSource();Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{String data;data="5";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=(new b()).mainSource(request,response);{if(data >(Integer.MIN_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform multiplication.");}}}
private void main()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}dataGoodB2G=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";if(data!=null){response.addHeader("Location","/author.jsp?lang="+data);}}
private void main()throws Throwable{int data=0;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{long data;data=2;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{float data;data=2.0f;int result=(int)(100.0/data);IO.writeLine(result);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{short data=mainSource();{IO.writeLine((byte)data);}}
private void main()throws Throwable{String data;while(true){data="Testing.test";break;}Class<?> tempClass=Class.forName(data);Object tempClassObject=tempClass.newInstance();}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);HashMap<Integer,Byte> dataHashMap=new HashMap<Integer,Byte>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="foo";break;}if(data!=null){*/URI uri;try{uri=new URI(data);}catch(URISyntaxException exceptURISyntax){response.getWriter().write("Invalid redirect URL");return;}response.sendRedirect(data);return;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private int mainSource()throws Throwable{int data;data=(new SecureRandom()).nextInt();return data;}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data=mainSource();ArrayList intArrayList=new ArrayList(data);}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;data++;int result=(int)(data);IO.writeLine("result: "+result);}}
private void main()throws Throwable{short data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}mainPrivate=false;mainSink(data,request,response);}
private void main()throws Throwable{data=(new java.security.SecureRandom()).nextLong();(new b()).mainSink();}
private void main()throws Throwable{String data;data="foo";Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{short data=(new b()).mainSource();data--;short result=(short)(data);IO.writeLine("result: "+result);}
private int mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}return data;}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{float data;while(true){{String stringNumber=System.getenv("ADD");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}break;}while(true){if(Math.abs(data)> 0.000001){int result=(int)(100.0/data);IO.writeLine(result);}else{IO.writeLine("This would result in a divide by zero");}break;}}
private void main()throws Throwable{String data;data="CWE690";mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();(new b()).mainSink(data);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String password=null;Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);password=properties.getProperty("password");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}{Cipher aesCipher=Cipher.getInstance("AES");SecretKeySpec secretKeySpec=new SecretKeySpec("ABCDEFGHABCDEFGH".getBytes("UTF-8"),"AES");aesCipher.init(Cipher.DECRYPT_MODE,secretKeySpec);String decryptedPassword=new String(aesCipher.doFinal(password.getBytes("UTF-8")),"UTF-8");password=decryptedPassword;}mainPublicStatic=true;(new b()).mainSink(password);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}dataCopy=data;}{int data=dataCopy;int array[]=null;if(data > 0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};if(data >=0 && data < array.length){array[data]=42;}else{IO.writeLine("Array index out of bounds");}}}
private void main()throws Throwable{String data;while(true){data="CWE690";break;}while(true){String stringTrimmed=data.trim();IO.writeLine(stringTrimmed);break;}}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink(data);}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{long data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink(data);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int count;count=2;int[] countArray=new int[5];countArray[2]=count;(new b()).mainSink(countArray);}
private void main()throws Throwable{long data;data=2;long[] dataArray=new long[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data="foo";(new b()).mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int result=(int)(data+1);IO.writeLine("result: "+result);}}
private void main()throws Throwable{String passwordCopy;{String password;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}passwordCopy=password;}{String password=passwordCopy;if(password!=null){{Cipher aesCipher=Cipher.getInstance("AES");SecretKeySpec secretKeySpec=new SecretKeySpec("ABCDEFGHABCDEFGH".getBytes("UTF-8"),"AES");aesCipher.init(Cipher.DECRYPT_MODE,secretKeySpec);password=new String(aesCipher.doFinal(password.getBytes("UTF-8")),"UTF-8");}Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=DriverManager.getConnection("data-url","root",password);preparedStatement=connection.prepareStatement("select * from test_table");resultSet=preparedStatement.executeQuery();}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}}
private void main()throws Throwable{int count;while(true){{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}break;}while(true){int i=0;if(count > 0 && count <=20){for(i=0;i < count;i++){IO.writeLine("Hello");}}break;}}
private void main()throws Throwable{byte data=0;data=Byte.MIN_VALUE;mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{short data;data=2;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;data="Testing.test";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource();String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private int mainSource()throws Throwable{int data;data=(new SecureRandom()).nextInt();return data;}
private void main()throws Throwable{int data=(new b()).mainSource();int result=(int)(data-1);IO.writeLine("result: "+result);}
private void main()throws Throwable{short dataCopy;{short data;data=2;dataCopy=data;}{short data=dataCopy;short result=(short)(data+1);IO.writeLine("result: "+result);}}
private void main()throws Throwable{int data;while(true){{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}break;}while(true){int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}break;}}
private void main()throws Throwable{float data=0.0f;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataCopy=data;}{String data=dataCopy;if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.setHeader("Location","/author.jsp?lang="+data);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name='"+data+"'");Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{String data;while(true){{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}break;}while(true){Connection dbConnection=null;PreparedStatement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("select * from users where name=?");sqlStatement.setString(1,data);resultSet=sqlStatement.executeQuery();}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}break;}}
private void main()throws Throwable{byte data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{short data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{long data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int result=(int)(++data);IO.writeLine("result: "+result);}}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,Byte> dataHashMap=new HashMap<Integer,Byte>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}int array[]=null;if(data > 0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}dataCopy=data;}{String data=dataCopy;if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.addHeader("Location","/author.jsp?lang="+data);}}}
private void main()throws Throwable{float data=(new b()).mainSource();if(Math.abs(data)> 0.000001){int result=(int)(100.0 % data);IO.writeLine(result);}else{IO.writeLine("This would result in a modulo by zero");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;int array[]={0,1,2,3,4};if(data >=0){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{short data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Vector<Byte> dataVector=new Vector<Byte>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;data="CWE690";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{long data;data=2;(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){System.out.format(data);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;while(true){{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}break;}while(true){if(count > 0 && count <=20){File file=new File("goodSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}}break;}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;while(true){{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}break;}while(true){int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}break;}}
private void main()throws Throwable{long data;while(true){data=(new java.security.SecureRandom()).nextLong();break;}while(true){if(data < Long.MAX_VALUE){data++;long result=(long)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}break;}}
private void main()throws Throwable{int count;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}countGoodB2G=count;mainSink();}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int count;count=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(count);byte[] countSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(countSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int count;{String stringNumber=System.getProperty("user.home");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}int[] countArray=new int[5];countArray[2]=count;(new b()).mainSink(countArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);int numberOfLoops;try{numberOfLoops=Integer.parseInt(data);}catch(NumberFormatException exceptNumberFormat){IO.writeLine("Invalid response. Numeric input expected. Assuming 1.");numberOfLoops=1;}for(int i=0;i < numberOfLoops;i++){IO.writeLine("hello world");}}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]={0,1,2,3,4};if(data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{byte data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int result=(int)(++data);IO.writeLine("result: "+result);}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int countCopy;{int count;count=2;countCopy=count;}{int count=countCopy;File file=new File("badSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}}}
private void main()throws Throwable{float dataCopy;{float data;data=2.0f;dataCopy=data;}{float data=dataCopy;int result=(int)(100.0 % data);IO.writeLine(result);}}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};IO.writeLine(array[data]);}}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}if((data!=Integer.MIN_VALUE)&&(data!=Long.MIN_VALUE)&&(Math.abs(data)<=(long)Math.sqrt(Integer.MAX_VALUE))){int result=(int)(data * data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform squaring.");}}
private void main()throws Throwable{int dataCopy;{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}dataCopy=data;}{int data=dataCopy;if(data < Integer.MAX_VALUE){int result=(int)(data+1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform addition.");}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=false;data=main_source(request,response);Connection dBConnection=IO.getDBConnection();PreparedStatement preparedStatement=null;ResultSet resultSet=null;int id=0;try{id=Integer.parseInt(data);}catch(NumberFormatException nfx){}try{preparedStatement=dBConnection.prepareStatement("select * from invoices where uid=?");preparedStatement.setInt(1,id);resultSet=preparedStatement.executeQuery();IO.writeString("bad()-result requested: "+data+"\n");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error executing query",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Could not close ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Could not close PreparedStatement",exceptSql);}try{if(dBConnection!=null){dBConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Could not close Connection",exceptSql);}}}
private void main()throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int count;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}countGoodB2G=count;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}dataGoodB2G=data;mainSink(request,response);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{StringBuilder data;data=new StringBuilder();Vector<StringBuilder> dataVector=new Vector<StringBuilder>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int data=(new b()).mainSource();int result=(int)(data * data);IO.writeLine("result: "+result);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count=(new b()).mainSource(request,response);int i=0;for(i=0;i < count;i++){IO.writeLine("Hello");}}
private void main()throws Throwable{String data;FileInputStream streamFileInput=null;String propertiesFileName="./CWE690_NULL_Deref_From_Return__Helper.properties";try{streamFileInput=new FileInputStream(propertiesFileName);Properties properties=new Properties();properties.load(streamFileInput);data=properties.getProperty("CWE690");}catch(IOException exceptIO){IO.writeLine("Could not open properties file: "+propertiesFileName);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException e){IO.logger.log(Level.WARNING,"Error closing FileInputStream",e);}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=StringEscapeUtils.escapeXml(tokens[0]);String password=StringEscapeUtils.escapeXml(tokens[1]);XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}
private void main()throws Throwable{long data;data=2;mainSink(data);}
private void main()throws Throwable{int count;count=2;LinkedList<Integer> countLinkedList=new LinkedList<Integer>();countLinkedList.add(0,count);countLinkedList.add(1,count);countLinkedList.add(2,count);(new b()).mainSink(countLinkedList);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;while(true){{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){{if(data <(Integer.MAX_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform multiplication.");}}break;}}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{int count;count=2;Container countContainer=new Container();countContainer.containerOne=count;(new b()).mainSink(countContainer);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}if(data > Integer.MIN_VALUE){int result=(int)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}}
private void main()throws Throwable{String data;data=System.getenv("ADD");int numberOfLoops;try{numberOfLoops=Integer.parseInt(data);}catch(NumberFormatException exceptNumberFormat){IO.writeLine("Invalid response. Numeric input expected. Assuming 1.");numberOfLoops=1;}if(numberOfLoops >=0 && numberOfLoops <=5){for(int i=0;i < numberOfLoops;i++){IO.writeLine("hello world");}}}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int count;count=2;(new b()).mainSink(count);}
private void main()throws Throwable{int dataCopy;{int data;data=Integer.MIN_VALUE;dataCopy=data;}{int data=dataCopy;if(data > Integer.MIN_VALUE){int result=(int)(--data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{short data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;FileInputStream streamFileInput=null;String propertiesFileName="./CWE690_NULL_Deref_From_Return__Helper.properties";try{streamFileInput=new FileInputStream(propertiesFileName);Properties properties=new Properties();properties.load(streamFileInput);data=properties.getProperty("CWE690");}catch(IOException exceptIO){IO.writeLine("Could not open properties file: "+propertiesFileName);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException e){IO.logger.log(Level.WARNING,"Error closing FileInputStream",e);}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{byte data;data=Byte.MAX_VALUE;{if(data <(Byte.MAX_VALUE/2)){byte result=(byte)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform multiplication.");}}}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}if(data < Integer.MAX_VALUE){int result=(int)(data+1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform addition.");}}
private void main()throws Throwable{short data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();(new b()).mainSink((Object)data);}
private void main()throws Throwable{int dataCopy;{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};if(data >=0 && data < array.length){array[data]=42;}else{IO.writeLine("Array index out of bounds");}}}
private void main()throws Throwable{String data;while(true){{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}break;}while(true){Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);int rowCount=sqlStatement.executeUpdate();IO.writeLine("Updated "+rowCount+" rows successfully.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}break;}}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String password;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,String> passwordHashMap=new HashMap<Integer,String>();passwordHashMap.put(0,password);passwordHashMap.put(1,password);passwordHashMap.put(2,password);(new b()).mainSink(passwordHashMap);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;data=2;int array[]={0,1,2,3,4};IO.writeLine(array[data]);}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}return data;}
private void main()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=StringEscapeUtils.escapeXml(tokens[0]);String password=StringEscapeUtils.escapeXml(tokens[1]);XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=true;data=main_source(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data);}}
private void main()throws Throwable{byte dataCopy;{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);dataCopy=data;}{byte data=dataCopy;if(data < Byte.MAX_VALUE){byte result=(byte)(data+1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform addition.");}}}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=(new b()).mainSource(request,response);{int result=(int)(data * 2);IO.writeLine("result: "+result);}}
private void main()throws Throwable{int data;data=2;int array[]={0,1,2,3,4};array[data]=42;}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private int mainSource()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count=0;count=2;mainPublicStatic=true;(new b()).mainSink(count,request,response);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){{int result=(int)(data * 2);IO.writeLine("result: "+result);}break;}}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private String mainSource()throws Throwable{String data;data="foo";return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{byte data;data=2;mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}break;}while(true){int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}break;}}
private void main()throws Throwable{int count;count=2;mainPrivate=true;mainSink(count);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{String password;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainSink(password);}
private void main()throws Throwable{int data;data=Integer.MIN_VALUE;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;data=2;int result=(int)(data+1);IO.writeLine("result: "+result);}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{String password;password="Password1234!";passwordGoodG2B=password;mainSink();}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{int countCopy;{int count;count=2;countCopy=count;}{int count=countCopy;File file=new File("badSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;data=System.getProperty("user.home");if(data!=null){System.out.printf("%s%n",data);}}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=Integer.MAX_VALUE;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;mainPublicStatic=false;data=(new b()).mainSource();String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{String data;data="5";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String password=null;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(password);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}break;}while(true){if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.setHeader("Location","/author.jsp?lang="+data);}break;}}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);(new b()).mainSink();}
private void main()throws Throwable{String data;data=System.getenv("ADD");ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}break;}while(true){int array[]=null;if(data > 0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{long data;data=2;Vector<Long> dataVector=new Vector<Long>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=(new b()).mainSource(request,response);ArrayList intArrayList=new ArrayList(data);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private String mainSource()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}return data;}
private void main()throws Throwable{float data;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=(new b()).mainSource(request,response);if(data!=0){IO.writeLine("100%"+data+"="+(100 % data)+"\n");}else{IO.writeLine("This would result in a modulo by zero");}}
private void main()throws Throwable{int data;mainPublicStatic=false;data=(new b()).mainSource();{IO.writeLine((byte)data);}}
private void main()throws Throwable{byte data;data=2;byte[] dataArray=new byte[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;data="Testing.test";(new b()).mainSink((Object)data);}
private void main()throws Throwable{{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}(new b()).mainSink();}
private int mainSource()throws Throwable{int data;data=(new SecureRandom()).nextInt();return data;}
private void main()throws Throwable{String data;data="foo";mainSink(data);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink(data);}
private void main()throws Throwable{{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{short data;data=2;LinkedList<Short> dataLinkedList=new LinkedList<Short>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{short data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,Short> dataHashMap=new HashMap<Integer,Short>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private int mainSource()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return data;}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int dataCopy;{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};if(data >=0 && data < array.length){array[data]=42;}else{IO.writeLine("Array index out of bounds");}}}
private void main()throws Throwable{short data=0;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{byte data;data=2;byte[] dataArray=new byte[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{long data=0L;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private String mainSource()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return data;}
private void main()throws Throwable{long data=(new b()).mainSource();if((data!=Integer.MIN_VALUE)&&(data!=Long.MIN_VALUE)&&(Math.abs(data)<=(long)Math.sqrt(Long.MAX_VALUE))){long result=(long)(data * data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform squaring.");}}
private void main()throws Throwable{float data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private int mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}return data;}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{String dataCopy;{String data;data="CWE690";dataCopy=data;}{String data=dataCopy;String stringTrimmed=data.trim();IO.writeLine(stringTrimmed);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}dataCopy=data;}{int data=dataCopy;{if(data >(Integer.MIN_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform multiplication.");}}}}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}if(data < Integer.MAX_VALUE){data++;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}
private void main()throws Throwable{long data;data=2;LinkedList<Long> dataLinkedList=new LinkedList<Long>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{short data;while(true){data=Short.MIN_VALUE;break;}while(true){if(data > Short.MIN_VALUE){short result=(short)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}break;}}
private void main()throws Throwable{int dataCopy;{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="foo";break;}while(true){if(data!=null){Cookie cookieSink=new Cookie("lang",data);response.addCookie(cookieSink);}break;}}
private void main()throws Throwable{float dataCopy;{float data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}dataCopy=data;}{float data=dataCopy;if(Math.abs(data)> 0.000001){int result=(int)(100.0/data);IO.writeLine(result);}else{IO.writeLine("This would result in a divide by zero");}}}
private void main()throws Throwable{String data;data=System.getProperty("user.home");ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private int mainSource()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}return data;}
private void main()throws Throwable{data=Integer.valueOf(5);(new b()).mainSink();}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int count;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(count);}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";return data;}
private void main()throws Throwable{long data=0L;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="foo";break;}Connection dbConnection=null;try{dbConnection=IO.getDBConnection();dbConnection.setCatalog(data);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}dataCopy=data;}{int data=dataCopy;if(data!=0){IO.writeLine("100%"+data+"="+(100 % data)+"\n");}else{IO.writeLine("This would result in a modulo by zero");}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink(request,response);}
private int mainSource()throws Throwable{int count;count=2;return count;}
private void main()throws Throwable{String data;data="foo";if(data!=null){System.out.format(data);}}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainSink(data);}
private void main()throws Throwable{String password;Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);password=properties.getProperty("password");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}{Cipher aesCipher=Cipher.getInstance("AES");SecretKeySpec secretKeySpec=new SecretKeySpec("ABCDEFGHABCDEFGH".getBytes("UTF-8"),"AES");aesCipher.init(Cipher.DECRYPT_MODE,secretKeySpec);String decryptedPassword=new String(aesCipher.doFinal(password.getBytes("UTF-8")),"UTF-8");password=decryptedPassword;}HashMap<Integer,String> passwordHashMap=new HashMap<Integer,String>();passwordHashMap.put(0,password);passwordHashMap.put(1,password);passwordHashMap.put(2,password);(new b()).mainSink(passwordHashMap);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{long data;while(true){data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){if((data!=Integer.MIN_VALUE)&&(data!=Long.MIN_VALUE)&&(Math.abs(data)<=(long)Math.sqrt(Long.MAX_VALUE))){long result=(long)(data * data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform squaring.");}break;}}
private void main()throws Throwable{{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}(new b()).mainSink();}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{short data;while(true){data=2;break;}while(true){short result=(short)(++data);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{int data=0;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String dataCopy;{String data;data=System.getenv("ADD");dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);int rowCount=sqlStatement.executeUpdate();IO.writeLine("Updated "+rowCount+" rows successfully.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}(new b()).mainSink(count,request,response);}
private void main()throws Throwable{byte dataCopy;{byte data;data=2;dataCopy=data;}{byte data=dataCopy;data++;byte result=(byte)(data);IO.writeLine("result: "+result);}}
private void main()throws Throwable{byte data;data=Byte.MAX_VALUE;Vector<Byte> dataVector=new Vector<Byte>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data=0;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int count;{String stringNumber=System.getProperty("user.home");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}Container countContainer=new Container();countContainer.containerOne=count;(new b()).mainSink(countContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){response.addHeader("Location","/author.jsp?lang="+data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{float data;while(true){{String stringNumber=System.getProperty("user.home");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}break;}while(true){if(Math.abs(data)> 0.000001){int result=(int)(100.0 % data);IO.writeLine(result);}else{IO.writeLine("This would result in a modulo by zero");}break;}}
private void main()throws Throwable{int count;count=2;mainPrivate=true;mainSink(count);}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);Vector<Byte> dataVector=new Vector<Byte>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{int data=0;data=-1;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{short data;data=2;mainSink(data);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{short data;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);(new b()).mainSink((Object)data);}
private void main()throws Throwable{short data;data=2;(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.addHeader("Location","/author.jsp?lang="+data);}}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}mainSink(data,request,response);}
private void main()throws Throwable{int count=(new b()).mainSource();if(count > 0 && count <=20){File file=new File("goodSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}}}
private void main()throws Throwable{data=2.0f;(new b()).mainSink();}
private void main()throws Throwable{short data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{short data=0;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int count;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}Container countContainer=new Container();countContainer.containerOne=count;(new b()).mainSink(countContainer);}
private void main()throws Throwable{int data=(new b()).mainSource();data--;int result=(int)(data);IO.writeLine("result: "+result);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{float data=0.0f;{String stringNumber=System.getProperty("user.home");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{int data=(new b()).mainSource();int result=(int)(data-1);IO.writeLine("result: "+result);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainPrivate=true;mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data=request.getParameter("name");dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);int rowCount=sqlStatement.executeUpdate();IO.writeLine("Updated "+rowCount+" rows successfully.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){Cookie cookieSink=new Cookie("lang",data);response.addCookie(cookieSink);}}}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]={0,1,2,3,4};if(data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{data="Testing.test";(new b()).mainSink();}
private void main()throws Throwable{float data;SecureRandom secureRandom=new SecureRandom();data=secureRandom.nextFloat();Vector<Float> dataVector=new Vector<Float>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String password;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(password);byte[] passwordSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(passwordSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;data="Testing.test";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;main_private=false;data=main_source();ArrayList intArrayList=new ArrayList(data);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource();if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{int data=0;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource();Class<?> tempClass=Class.forName(data);Object tempClassObject=tempClass.newInstance();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=System.getenv("ADD");dataGoodB2G=data;mainSink(request,response);}
private void main()throws Throwable{String data;main_private=true;data=main_source();String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource(request,response);if(data!=null){response.getWriter().println("<br>bad()-<img src=\""+data+"\">");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{byte dataCopy;{byte data;data=Byte.MIN_VALUE;dataCopy=data;}{byte data=dataCopy;if(data > Byte.MIN_VALUE){data--;byte result=(byte)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}}
private void main()throws Throwable{{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int count;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container countContainer=new Container();countContainer.containerOne=count;(new b()).mainSink(countContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{short data;data=Short.MAX_VALUE;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{float data;Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}mainSink(data);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String password=null;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(password);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int result=(int)(--data);IO.writeLine("result: "+result);}}
private void main()throws Throwable{String data;data=System.getenv("ADD");(new b()).mainSink(data);}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{String data;try{InputStreamReader readerInputStream=new InputStreamReader(System.in,"UTF-8");BufferedReader readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}dataGoodG2B=data;mainSink();}
private void main()throws Throwable{short data;data=2;short result=(short)(++data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int countCopy;{int count;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}countCopy=count;}{int count=countCopy;int i=0;if(count > 0 && count <=20){for(i=0;i < count;i++){IO.writeLine("Hello");}}}}
private void main()throws Throwable{float data;data=2.0f;LinkedList<Float> dataLinkedList=new LinkedList<Float>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;while(true){count=2;break;}while(true){File file=new File("badSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}break;}}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{short data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int count=0;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(count);}
private void main()throws Throwable{short dataCopy;{short data;data=2;dataCopy=data;}{short data=dataCopy;short result=(short)(++data);IO.writeLine("result: "+result);}}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}dataCopy=data;}{String data=dataCopy;if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("update users set hitcount=hitcount+1 where name=?");for(int i=0;i < names.length;i++){sqlStatement.setString(1,names[i]);sqlStatement.addBatch();}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count=0;count=2;mainPublicStatic=true;(new b()).mainSink(count,request,response);}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=System.getenv("ADD");mainSink(data,request,response);}
private void main()throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{long data=0L;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int count;{String stringNumber=System.getProperty("user.home");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}countGoodB2G=count;mainSink();}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private long mainSource()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return data;}
private void main()throws Throwable{String data;data="Hello World";(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data="5";(new b()).mainSink(request,response);}
private void main()throws Throwable{Integer data;data=Integer.valueOf(5);Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{Integer data;data=Integer.valueOf(5);ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{long dataCopy;{long data;data=2;dataCopy=data;}{long data=dataCopy;long result=(long)(data * data);IO.writeLine("result: "+result);}}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{String data;data=System.getProperty("user.home");LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{long data;data=Long.MAX_VALUE;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=(new b()).mainSource(request,response);int array[]=null;if(data > 0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}
private void main()throws Throwable{int data;mainPublicStatic=true;data=(new b()).mainSource();{IO.writeLine((byte)data);}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{short data;data=Short.MAX_VALUE;mainSink(data);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{byte data;while(true){data=2;break;}while(true){byte result=(byte)(++data);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{byte data;data=2;mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;PasswordAuthentication credentials=new PasswordAuthentication("user","GP@ssw0rd".toCharArray());{String salt="ThisIsMySalt";MessageDigest messageDigest=MessageDigest.getInstance("SHA-512");messageDigest.reset();String credentialsToHash=credentials.getUserName()+":"+(new String(credentials.getPassword()));byte[] hashedCredsAsBytes=messageDigest.digest((salt+credentialsToHash).getBytes("UTF-8"));data=IO.toHex(hashedCredsAsBytes);}mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{short data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data=(new b()).mainSource();{int result=(int)(data * 2);IO.writeLine("result: "+result);}}
private void main()throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource();Connection dbConnection=null;try{dbConnection=IO.getDBConnection();dbConnection.setCatalog(data);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]=null;if(data > 0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data=(new b()).mainSource();String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=StringEscapeUtils.escapeXml(tokens[0]);String password=StringEscapeUtils.escapeXml(tokens[1]);XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}(new b()).mainSink(request,response);}
private String mainSource()throws Throwable{String data;data=System.getenv("ADD");return data;}
private void main()throws Throwable{int count;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink(count);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Connection dbConnection=null;Statement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();resultSet=sqlStatement.executeQuery("select * from users where name='"+data+"'");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=Integer.MIN_VALUE;mainPrivate=false;mainSink(data);}
private void main()throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource();if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int count;count=2;Container countContainer=new Container();countContainer.containerOne=count;(new b()).mainSink(countContainer);}
private void main()throws Throwable{int data;while(true){{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}break;}while(true){{if(data >(Integer.MIN_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform multiplication.");}}break;}}
private void main()throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{long data=(new b()).mainSource();if(data < Long.MAX_VALUE){long result=(long)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int count;count=2;mainSink(count);}
private void main()throws Throwable{short data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{data=Integer.MIN_VALUE;(new b()).mainSink();}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="5";mainSink(data,request,response);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int array[]={0,1,2,3,4};IO.writeLine(array[data]);break;}}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{String dataCopy;{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataCopy=data;}{String data=dataCopy;int numberOfLoops;try{numberOfLoops=Integer.parseInt(data);}catch(NumberFormatException exceptNumberFormat){IO.writeLine("Invalid response. Numeric input expected. Assuming 1.");numberOfLoops=1;}if(numberOfLoops >=0 && numberOfLoops <=5){for(int i=0;i < numberOfLoops;i++){IO.writeLine("hello world");}}}}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}return data;}
private void main()throws Throwable{short data;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);short[] dataArray=new short[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=false;data=(new b()).mainSource(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data);}}
private void main()throws Throwable{String data;data=System.getenv("ADD");dataGoodB2G=data;mainSink();}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String password;password="Password1234!";mainPrivate=true;mainSink(password);}
private void main()throws Throwable{StringBuilder data;data=new StringBuilder();mainSink(data);}
private void main()throws Throwable{String data;main_private=false;data=main_source();Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{count=2;(new b()).mainSink();}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{while(true){java.util.Date date=java.text.DateFormat.getInstance().parse("2010-07-13 10:41:00");break;}}
private void main()throws Throwable{byte data;data=2;Vector<Byte> dataVector=new Vector<Byte>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{short data;data=Short.MIN_VALUE;short[] dataArray=new short[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data=mainSource();String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}
private void main()throws Throwable{String data;data=CWE690_NULL_Deref_From_Return__Class_Helper.getStringBad();LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data=(new b()).mainSource();int result=(int)(++data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{short data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);Class<?> tempClass=Class.forName(data);Object tempClassObject=tempClass.newInstance();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);(new b()).mainSink((Object)data);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{float dataCopy;{float data;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}dataCopy=data;}{float data=dataCopy;if(Math.abs(data)> 0.000001){int result=(int)(100.0/data);IO.writeLine(result);}else{IO.writeLine("This would result in a divide by zero");}}}
private void main()throws Throwable{String password=null;password="Password1234!";mainPublicStatic=true;(new b()).mainSink(password);}
private void main()throws Throwable{String data;while(true){data="foo";break;}while(true){if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();for(int i=0;i < names.length;i++){sqlStatement.addBatch("update users set hitcount=hitcount+1 where name='"+names[i]+"'");}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statament",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{byte data;data=Byte.MIN_VALUE;HashMap<Integer,Byte> dataHashMap=new HashMap<Integer,Byte>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}if(data > Integer.MIN_VALUE){int result=(int)(--data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}
private void main()throws Throwable{byte dataCopy;{byte data;data=2;dataCopy=data;}{byte data=dataCopy;byte result=(byte)(data * data);IO.writeLine("result: "+result);}}
private void main()throws Throwable{long data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int count;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}LinkedList<Integer> countLinkedList=new LinkedList<Integer>();countLinkedList.add(0,count);countLinkedList.add(1,count);countLinkedList.add(2,count);(new b()).mainSink(countLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count=(new b()).mainSource(request,response);if(count > 0 && count <=20){File file=new File("goodSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}}}
private void main()throws Throwable{float data;data=2.0f;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data=null;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int count;count=Integer.MAX_VALUE;Container countContainer=new Container();countContainer.containerOne=count;(new b()).mainSink(countContainer);}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]=null;if(data > 0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}
private void main()throws Throwable{int dataCopy;{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataCopy=data;}{int data=dataCopy;if((data!=Integer.MIN_VALUE)&&(data!=Long.MIN_VALUE)&&(Math.abs(data)<=(long)Math.sqrt(Integer.MAX_VALUE))){int result=(int)(data * data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform squaring.");}}}
private void main()throws Throwable{int count;count=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(count);byte[] countSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(countSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{while(true){int x;x=(new SecureRandom()).nextInt();if(x==0){IO.writeLine("Inside the if statement");}else{IO.writeLine("Inside the else statement");}IO.writeLine("Hello from good()");break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";if(data!=null){response.addHeader("Location","/author.jsp?lang="+data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");Connection dbConnection=null;PreparedStatement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("select * from users where name=?");sqlStatement.setString(1,data);resultSet=sqlStatement.executeQuery();}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{int data;mainPrivate=false;mainSink(data);}
private void main()throws Throwable{String data=null;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}break;}while(true){if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.setHeader("Location","/author.jsp?lang="+data);}break;}}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{short data;mainPublicStatic=false;data=(new b()).mainSource();{IO.writeLine((byte)data);}}
private void main()throws Throwable{int countCopy;{int count;count=2;countCopy=count;}{int count=countCopy;int i=0;for(i=0;i < count;i++){IO.writeLine("Hello");}}}
private void main()throws Throwable{int count;count=(new SecureRandom()).nextInt();ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(count);byte[] countSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(countSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name='"+data+"'");Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("update users set hitcount=hitcount+1 where name=?");for(int i=0;i < names.length;i++){sqlStatement.setString(1,names[i]);sqlStatement.addBatch();}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{short data=0;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="CWE690";String stringTrimmed=data.trim();IO.writeLine(stringTrimmed);}
private void main()throws Throwable{short dataCopy;{short data;data=2;dataCopy=data;}{short data=dataCopy;{short result=(short)(data * 2);IO.writeLine("result: "+result);}}}
private void main()throws Throwable{long data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;data="Testing.test";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,Long> dataHashMap=new HashMap<Integer,Long>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;data=request.getParameter("name");mainPublicStatic=false;(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{if(IO.staticReturnsTrueOrFalse()){response.getWriter().write("You cannot shut down this application,only the admin can");}else{response.getWriter().write("You cannot shut down this application,only the admin can");}}
private void main()throws Throwable{float data=(new b()).mainSource();int result=(int)(100.0/data);IO.writeLine(result);}
private void main()throws Throwable{data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{String stringNumber=request.getParameter("name");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading count from parameter 'name'",exceptNumberFormat);}}(new b()).mainSink(request,response);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="5";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink((Object)data);}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");return data;}
private void main()throws Throwable{int count;count=2;(new b()).mainSink((Object)count);}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}short[] dataArray=new short[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){Cookie cookieSink=new Cookie("lang",data);response.addCookie(cookieSink);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{int count;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainSink(count);}
private void main()throws Throwable{String data=null;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="5";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data;data=Integer.MIN_VALUE;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{float data;data=2.0f;HashMap<Integer,Float> dataHashMap=new HashMap<Integer,Float>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{long data;data=Long.MAX_VALUE;dataGoodB2G=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{float data;data=2.0f;(new b()).mainSink(data);}
private void main()throws Throwable{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}(new b()).mainSink();}
private void main()throws Throwable{int data=0;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{short data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int count;count=2;mainPrivate=true;mainSink(count);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;int array[]={0,1,2,3,4};if(data >=0){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private String mainSource()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{short data;data=Short.MAX_VALUE;LinkedList<Short> dataLinkedList=new LinkedList<Short>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private int mainSource()throws Throwable{int data;data=(new SecureRandom()).nextInt();return data;}
private void main()throws Throwable{int data;while(true){{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}break;}while(true){int array[]={0,1,2,3,4};if(data >=0 && data < array.length){array[data]=42;}else{IO.writeLine("Array index out of bounds");}break;}}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="foo";break;}while(true){if(data!=null){response.setHeader("Location","/author.jsp?lang="+data);}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{data=Integer.MAX_VALUE;(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink(request,response);}
private void main()throws Throwable{byte data;data=2;LinkedList<Byte> dataLinkedList=new LinkedList<Byte>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{byte data;data=2;HashMap<Integer,Byte> dataHashMap=new HashMap<Integer,Byte>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data=null;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{byte data=0;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{short data;data=2;short result=(short)(data+1);IO.writeLine("result: "+result);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="5";(new b()).mainSink((Object)data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=0;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}mainPublicStatic=false;(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;IO.writeLine("100%"+data+"="+(100 % data)+"\n");}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String dataCopy;{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);int rowCount=sqlStatement.executeUpdate();IO.writeLine("Updated "+rowCount+" rows successfully.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{String data=(new b()).mainSource();Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();Boolean result=sqlStatement.execute("insert into users(status)values('updated')where name='"+data+"'");if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{PasswordAuthentication credentials=new PasswordAuthentication("user","BP@ssw0rd".toCharArray());data=credentials.getUserName()+":"+(new String(credentials.getPassword()));(new b()).mainSink(request,response);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}dataCopy=data;}{String data=dataCopy;if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.setHeader("Location","/author.jsp?lang="+data);}}}
private void main()throws Throwable{String password;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(password);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");mainPrivate=false;mainSink(data,request,response);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int count;count=2;int i=0;for(i=0;i < count;i++){IO.writeLine("Hello");}}
private void main()throws Throwable{int data;data=Integer.MAX_VALUE;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();int rowCount=sqlStatement.executeUpdate("insert into users(status)values('updated')where name='"+data+"'");IO.writeLine("Updated "+rowCount+" rows successfully.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{float data;mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{int count;count=2;mainPrivate=true;mainSink(count);}
private void main()throws Throwable{short data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}dataGoodB2G=data;mainSink(request,response);}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data=2;(new b()).mainSink(request,response);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{float data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}HashMap<Integer,Float> dataHashMap=new HashMap<Integer,Float>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";if(data!=null){response.setHeader("Location","/author.jsp?lang="+data);}}
private void main()throws Throwable{int count;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}LinkedList<Integer> countLinkedList=new LinkedList<Integer>();countLinkedList.add(0,count);countLinkedList.add(1,count);countLinkedList.add(2,count);(new b()).mainSink(countLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data="CWE690";(new b()).mainSink(request,response);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int count;count=2;int[] countArray=new int[5];countArray[2]=count;(new b()).mainSink(countArray);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{byte data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String data;data="Testing.test";mainSink(data);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int result=(int)(data * data);IO.writeLine("result: "+result);break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=true;data=main_source(request,response);String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{long dataCopy;{long data;data=Long.MIN_VALUE;dataCopy=data;}{long data=dataCopy;if(data > Long.MIN_VALUE){long result=(long)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}}}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{StringBuilder data;data=CWE690_NULL_Deref_From_Return__Class_Helper.getStringBuilderBad();LinkedList<StringBuilder> dataLinkedList=new LinkedList<StringBuilder>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="5";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{String data;data="Testing.test";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Vector<Long> dataVector=new Vector<Long>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data=(new b()).mainSource();Socket socket=null;PrintWriter writer=null;try{socket=new Socket("remote_host",1337);writer=new PrintWriter(socket.getOutputStream(),true);writer.println(data);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error writing to the socket",exceptIO);}finally{if(writer!=null){writer.close();}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}
private int mainSource()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}return data;}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{short data;data=2;short result=(short)(data-1);IO.writeLine("result: "+result);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=false;data=(new b()).mainSource(request,response);if(data!=null){*/URI uri;try{uri=new URI(data);}catch(URISyntaxException exceptURISyntax){response.getWriter().write("Invalid redirect URL");return;}response.sendRedirect(data);return;}}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}dataGoodB2G=data;mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{float data;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{int data=mainSource();HashMap intHashMap=new HashMap(data);}
private void main()throws Throwable{float data;data=2.0f;LinkedList<Float> dataLinkedList=new LinkedList<Float>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}{if(data <(Integer.MAX_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform multiplication.");}}}
private void main()throws Throwable{String data;data="CWE690";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{long data;data=2;HashMap<Integer,Long> dataHashMap=new HashMap<Integer,Long>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int result=(int)(data-1);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{float data;data=2.0f;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{short data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{data=Short.MIN_VALUE;(new b()).mainSink();}
private void main()throws Throwable{{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;while(true){{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}break;}while(true){{if(data <(Integer.MAX_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform multiplication.");}}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};array[data]=42;}}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{long data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String dataCopy;{String data;data=System.getProperty("CWE690");dataCopy=data;}{String data=dataCopy;if(data!=null){String stringTrimmed=data.trim();IO.writeLine(stringTrimmed);}}}
private void main()throws Throwable{String data=null;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}mainPrivate=true;mainSink(data,request,response);}
private String mainSource()throws Throwable{String data;data="foo";return data;}
private void main()throws Throwable{int data=0;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data=request.getParameter("CWE690");dataCopy=data;}{String data=dataCopy;if(data!=null){String stringTrimmed=data.trim();IO.writeLine(stringTrimmed);}}}
private void main()throws Throwable{StringBuilder data;while(true){data=new StringBuilder("Good");break;}while(true){IO.writeLine(data.toString());break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}if(data!=null){Cookie cookieSink=new Cookie("lang",URLEncoder.encode(data,"UTF-8"));response.addCookie(cookieSink);}}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{short data;data=2;short[] dataArray=new short[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{short data;data=Short.MAX_VALUE;mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;count=2;Vector<Integer> countVector=new Vector<Integer>(5);countVector.add(0,count);countVector.add(1,count);countVector.add(2,count);(new b()).mainSink(countVector,request,response);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main()throws Throwable{short data;data=2;dataGoodG2B=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");mainPrivate=true;mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{String data;data=System.getProperty("user.home");HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{float data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int count;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}int[] countArray=new int[5];countArray[2]=count;(new b()).mainSink(countArray);}
private void main()throws Throwable{String data;data="foo";Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();Boolean result=sqlStatement.execute("insert into users(status)values('updated')where name='"+data+"'");if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{float data;Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}LinkedList<Float> dataLinkedList=new LinkedList<Float>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data=0;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=false;data=main_source(request,response);if(data!=null){*/URI uri;try{uri=new URI(data);}catch(URISyntaxException exceptURISyntax){response.getWriter().write("Invalid redirect URL");return;}response.sendRedirect(data);return;}}
private void main()throws Throwable{long data;data=2;{long result=(long)(data * 2);IO.writeLine("result: "+result);}}
private void main()throws Throwable{String data;mainPublicStatic=false;data=(new b()).mainSource();String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=(new b()).mainSource(request,response);{int result=(int)(data * 2);IO.writeLine("result: "+result);}}
private void main()throws Throwable{byte data;data=2;mainSink(data);}
private void main()throws Throwable{int data;while(true){data=(new SecureRandom()).nextInt();break;}while(true){int array[]=null;if(data > 0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);break;}}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String password;password="Password1234!";Container passwordContainer=new Container();passwordContainer.containerOne=password;(new b()).mainSink(passwordContainer);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="foo";break;}if(data!=null){response.getWriter().println("<br>bad()-<img src=\""+data+"\">");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}(new b()).mainSink((Object)data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}(new b()).mainSink(data);}
private void main()throws Throwable{long data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data=(new b()).mainSource();String stringTrimmed=data.trim();IO.writeLine(stringTrimmed);}
private void main()throws Throwable{short data;data=Short.MIN_VALUE;HashMap<Integer,Short> dataHashMap=new HashMap<Integer,Short>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=mainSource(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data.replaceAll("(<script>)",""));}}
private void main()throws Throwable{String data;data="foo";mainSink(data);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};array[data]=42;}}
private void main()throws Throwable{int data=0;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{short data;data=2;HashMap<Integer,Short> dataHashMap=new HashMap<Integer,Short>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}dataCopy=data;}{String data=dataCopy;if(data!=null){Cookie cookieSink=new Cookie("lang",URLEncoder.encode(data,"UTF-8"));response.addCookie(cookieSink);}}}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int result=(int)(--data);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{String data=null;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data=(new b()).mainSource();if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("update users set hitcount=hitcount+1 where name=?");for(int i=0;i < names.length;i++){sqlStatement.setString(1,names[i]);sqlStatement.addBatch();}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{int data;main_private=true;data=main_source();{IO.writeLine((byte)data);}}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainPrivate=true;mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("CWE690");mainSink(data,request,response);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{int data;main_private=true;data=main_source();{IO.writeLine((short)data);}}
private void main()throws Throwable{String data=(new b()).mainSource();String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=tokens[0];String password=tokens[1];XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data="foo";(new b()).mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="Testing.test";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{float data;data=2.0f;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=0;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int array[]=null;if(data >=0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=(new b()).mainSource(request,response);int result=(int)(data-1);IO.writeLine("result: "+result);}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data=0;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int count=(new b()).mainSource();if(count > 0 && count <=20){File file=new File("goodSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}}}
private void main()throws Throwable{while(true){MessageDigest hash=MessageDigest.getInstance("SHA-512");SecureRandom prng=SecureRandom.getInstance("SHA1PRNG");hash.update(prng.generateSeed(32));byte[] hashValue=hash.digest("hash me".getBytes("UTF-8"));IO.writeLine(IO.toHex(hashValue));break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{byte data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource(request,response);Connection dbConnection=null;try{dbConnection=IO.getDBConnection();dbConnection.setCatalog(data);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data=(new b()).mainSource();String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data=0;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink();}
private void main()throws Throwable{int count;count=2;File file=new File("badSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,Byte> dataHashMap=new HashMap<Integer,Byte>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{short data;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{StringBuilder data;data=null;dataGoodB2G=data;mainSink();}
private void main()throws Throwable{short data;main_private=true;data=main_source();{IO.writeLine((byte)data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}mainPublicStatic=false;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int count=(new b()).mainSource();Thread.sleep(count);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=false;data=main_source(request,response);String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{byte data;data=2;byte[] dataArray=new byte[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;main_private=true;data=main_source();Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int array[]=null;if(data >=0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);break;}}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{long data;data=2;HashMap<Integer,Long> dataHashMap=new HashMap<Integer,Long>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data=(new b()).mainSource();{int result=(int)(data * 2);IO.writeLine("result: "+result);}}
private long mainSource()throws Throwable{long data;data=2;return data;}
private int mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}return data;}
private void main()throws Throwable{byte data;data=Byte.MAX_VALUE;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int result=(int)(data * data);IO.writeLine("result: "+result);break;}}
private String mainSource()throws Throwable{String data;data="foo";return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{byte data=(new b()).mainSource();byte result=(byte)(data * data);IO.writeLine("result: "+result);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data=System.getenv("ADD");dataCopy=data;}{String data=dataCopy;if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.setHeader("Location","/author.jsp?lang="+data);}}}
private int mainSource()throws Throwable{int count;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}return count;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;data=System.getenv("ADD");ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink(request,response);}
private void main()throws Throwable{byte data;data=Byte.MIN_VALUE;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){*/URI uri;try{uri=new URI(data);}catch(URISyntaxException exceptURISyntax){response.getWriter().write("Invalid redirect URL");return;}response.sendRedirect(data);return;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainSink(data,request,response);}
private void main()throws Throwable{byte data;data=2;LinkedList<Byte> dataLinkedList=new LinkedList<Byte>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){data++;int result=(int)(data);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{String dataCopy;{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}dataCopy=data;}{String data=dataCopy;if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("update users set hitcount=hitcount+1 where name=?");for(int i=0;i < names.length;i++){sqlStatement.setString(1,names[i]);sqlStatement.addBatch();}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}if(data < Short.MAX_VALUE){data++;short result=(short)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}
private int mainSource()throws Throwable{int data;data=Integer.MAX_VALUE;return data;}
private void main()throws Throwable{int countCopy;{int count;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}countCopy=count;}{int count=countCopy;if(count > 0 && count <=2000){Thread.sleep(count);}}}
private void main()throws Throwable{int data;data=2;int array[]={0,1,2,3,4};if(data >=0){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private short mainSource()throws Throwable{short data;data=2;return data;}
private void main()throws Throwable{{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private int mainSource()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return data;}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}LinkedList<Short> dataLinkedList=new LinkedList<Short>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int dataCopy;{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}}
private void main()throws Throwable{int data=0;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{String password;Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);password=properties.getProperty("password");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}{Cipher aesCipher=Cipher.getInstance("AES");SecretKeySpec secretKeySpec=new SecretKeySpec("ABCDEFGHABCDEFGH".getBytes("UTF-8"),"AES");aesCipher.init(Cipher.DECRYPT_MODE,secretKeySpec);String decryptedPassword=new String(aesCipher.doFinal(password.getBytes("UTF-8")),"UTF-8");password=decryptedPassword;}mainSink(password);}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,Long> dataHashMap=new HashMap<Integer,Long>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";return data;}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;{IO.writeLine((byte)data);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=mainSource(request,response);Class<?> tempClass=Class.forName(data);Object tempClassObject=tempClass.newInstance();}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){System.out.printf(data);}}}
private void main()throws Throwable{while(true){break;}}
private void main()throws Throwable{String data;data="foo";String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;count=2;mainPrivate=true;mainSink(count,request,response);}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();mainPrivate=true;mainSink(data);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();ArrayList intArrayList=new ArrayList(data);}
private void main()throws Throwable{String data;while(true){data="Testing.test";break;}Class<?> tempClass=Class.forName(data);Object tempClassObject=tempClass.newInstance();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{String data;data=System.getProperty("user.home");dataGoodB2G=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(request,response);}
private void main()throws Throwable{int countCopy;{int count;count=Integer.MAX_VALUE;countCopy=count;}{int count=countCopy;if(count > 0 && count <=2000){Thread.sleep(count);}}}
private void main()throws Throwable{int data=0;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{short data;data=Short.MIN_VALUE;LinkedList<Short> dataLinkedList=new LinkedList<Short>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}dataGoodB2G=data;mainSink(request,response);}
private void main()throws Throwable{int data=0;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{long data;data=Long.MIN_VALUE;HashMap<Integer,Long> dataHashMap=new HashMap<Integer,Long>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);dataGoodB2G=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("update users set hitcount=hitcount+1 where name=?");for(int i=0;i < names.length;i++){sqlStatement.setString(1,names[i]);sqlStatement.addBatch();}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.setHeader("Location","/author.jsp?lang="+data);}}
private void main()throws Throwable{data=Byte.MIN_VALUE;(new b()).mainSink();}
private void main()throws Throwable{long data;data=2;Vector<Long> dataVector=new Vector<Long>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.setHeader("Location","/author.jsp?lang="+data);}}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data=(new b()).mainSource();String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=StringEscapeUtils.escapeXml(tokens[0]);String password=StringEscapeUtils.escapeXml(tokens[1]);XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}
private void main()throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{StringBuilder data;data=new StringBuilder();IO.writeLine(""+data.length());}
private void main()throws Throwable{short data;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data=2;(new b()).mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}dataGoodB2G=data;mainSink(request,response);}
private void main()throws Throwable{String data;data="Testing.test";Class<?> tempClass=Class.forName(data);Object tempClassObject=tempClass.newInstance();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}dataGoodB2G=data;mainSink(request,response);}
private void main()throws Throwable{if(IO.staticReturnsTrueOrFalse()){MessageDigest hash=MessageDigest.getInstance("SHA-512");SecureRandom prng=SecureRandom.getInstance("SHA1PRNG");hash.update(prng.generateSeed(32));byte[] hashValue=hash.digest("hash me".getBytes("UTF-8"));IO.writeLine(IO.toHex(hashValue));}else{MessageDigest hash=MessageDigest.getInstance("SHA-512");SecureRandom prng=SecureRandom.getInstance("SHA1PRNG");hash.update(prng.generateSeed(32));byte[] hashValue=hash.digest("hash me".getBytes("UTF-8"));IO.writeLine(IO.toHex(hashValue));}}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{String data;while(true){data="foo";break;}while(true){String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=tokens[0];String password=tokens[1];XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}break;}}
private void main()throws Throwable{float data;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int count=0;count=2;mainPublicStatic=true;(new b()).mainSink(count);}
private void main()throws Throwable{float data;while(true){{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}break;}while(true){if(Math.abs(data)> 0.000001){int result=(int)(100.0/data);IO.writeLine(result);}else{IO.writeLine("This would result in a divide by zero");}break;}}
private void main()throws Throwable{String password;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}passwordGoodB2G=password;mainSink();}
private void main()throws Throwable{byte data;data=2;LinkedList<Byte> dataLinkedList=new LinkedList<Byte>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int result=(int)(data+1);IO.writeLine("result: "+result);}}
private void main()throws Throwable{float data;Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}if(Math.abs(data)> 0.000001){int result=(int)(100.0 % data);IO.writeLine(result);}else{IO.writeLine("This would result in a modulo by zero");}}
private void main()throws Throwable{int count;while(true){{String stringNumber=System.getProperty("user.home");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}break;}while(true){if(count > 0 && count <=20){File file=new File("goodSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}}break;}}
private void main()throws Throwable{int data=mainSource();ArrayList intArrayList=new ArrayList(data);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{short data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int count;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainSink(count);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}dataGoodB2G=data;mainSink(request,response);}
private void main()throws Throwable{String data;try{InputStreamReader readerInputStream=new InputStreamReader(System.in,"UTF-8");BufferedReader readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;int array[]={0,1,2,3,4};IO.writeLine(array[data]);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;{String stringNumber=request.getParameter("name");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading count from parameter 'name'",exceptNumberFormat);}}int[] countArray=new int[5];countArray[2]=count;(new b()).mainSink(countArray,request,response);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=System.getenv("ADD");ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{long data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data;while(true){data="5";break;}while(true){int numberOfLoops;try{numberOfLoops=Integer.parseInt(data);}catch(NumberFormatException exceptNumberFormat){IO.writeLine("Invalid response. Numeric input expected. Assuming 1.");numberOfLoops=1;}for(int i=0;i < numberOfLoops;i++){IO.writeLine("hello world");}break;}}
private void main()throws Throwable{int count;count=2;countGoodG2B=count;mainSink();}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}{if(data <(Integer.MAX_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform multiplication.");}}}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data=mainSource();HashSet intHashSet=new HashSet(data);}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{Integer data;data=Integer.valueOf(5);LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int array[]=null;if(data >=0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}}
private int mainSource()throws Throwable{int data;data=(new SecureRandom()).nextInt();return data;}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{String data;data="Testing.test";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;data=CWE690_NULL_Deref_From_Return__Class_Helper.getStringBad();ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.setHeader("Location","/author.jsp?lang="+data);}}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainSink(data);}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;{int result=(int)(data * 2);IO.writeLine("result: "+result);}}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);mainPrivate=false;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;PasswordAuthentication credentials=new PasswordAuthentication("user","BP@ssw0rd".toCharArray());data=credentials.getUserName()+":"+(new String(credentials.getPassword()));dataGoodB2G=data;mainSink(request,response);}
private String mainSource()throws Throwable{String data;data="foo";return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;count=2;HashMap<Integer,Integer> countHashMap=new HashMap<Integer,Integer>();countHashMap.put(0,count);countHashMap.put(1,count);countHashMap.put(2,count);(new b()).mainSink(countHashMap,request,response);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{long dataCopy;{long data;data=(new java.security.SecureRandom()).nextLong();dataCopy=data;}{long data=dataCopy;if(data > Long.MIN_VALUE){data--;long result=(long)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;data="5";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{byte data;data=2;mainSink(data);}
private void main()throws Throwable{int data;mainPublicStatic=false;data=(new b()).mainSource();HashSet intHashSet=new HashSet(data);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{short data=0;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private int mainSource()throws Throwable{int count;count=Integer.MAX_VALUE;return count;}
private void main()throws Throwable{StringBuilder data;data=CWE690_NULL_Deref_From_Return__Class_Helper.getStringBuilderGood();String stringTrimmed=data.toString().trim();IO.writeLine(stringTrimmed);}
private void main()throws Throwable{String data;data=System.getProperty("user.home");String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=StringEscapeUtils.escapeXml(tokens[0]);String password=StringEscapeUtils.escapeXml(tokens[1]);XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data=(new b()).mainSource();int numberOfLoops;try{numberOfLoops=Integer.parseInt(data);}catch(NumberFormatException exceptNumberFormat){IO.writeLine("Invalid response. Numeric input expected. Assuming 1.");numberOfLoops=1;}if(numberOfLoops >=0 && numberOfLoops <=5){for(int i=0;i < numberOfLoops;i++){IO.writeLine("hello world");}}}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data=(new b()).mainSource();if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;data=System.getProperty("user.home");String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}mainPrivate=false;mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{int count;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}HashMap<Integer,Integer> countHashMap=new HashMap<Integer,Integer>();countHashMap.put(0,count);countHashMap.put(1,count);countHashMap.put(2,count);(new b()).mainSink(countHashMap);}
private void main()throws Throwable{float data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data=(new b()).mainSource();ArrayList intArrayList=new ArrayList(data);}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;data=System.getenv("ADD");mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{short data;main_private=true;data=main_source();{IO.writeLine((byte)data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{long data;data=2;HashMap<Integer,Long> dataHashMap=new HashMap<Integer,Long>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;data=request.getParameter("CWE690");mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;try{dbConnection=IO.getDBConnection();dbConnection.setCatalog(data);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{if(IO.staticReturnsTrueOrFalse()){ServerSocket listener=null;Socket socket=null;OutputStream streamOutput=null;int port=20000;try{listener=new ServerSocket(port);socket=listener.accept();streamOutput=socket.getOutputStream();streamOutput.write(("Welcome,"+socket.getInetAddress().getHostAddress()).getBytes("UTF-8"));}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Could not connect to port "+Integer.toString(port),exceptIO);}finally{try{if(streamOutput!=null){streamOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing objects",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing objects",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing objects",exceptIO);}}}else{ServerSocket listener=null;Socket socket=null;OutputStream streamOutput=null;int port=20000;try{listener=new ServerSocket(port);socket=listener.accept();streamOutput=socket.getOutputStream();streamOutput.write(("Welcome,"+socket.getInetAddress().getHostAddress()).getBytes("UTF-8"));}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Could not connect to port "+Integer.toString(port),exceptIO);}finally{try{if(streamOutput!=null){streamOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing objects",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing objects",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing objects",exceptIO);}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String data;data=CWE690_NULL_Deref_From_Return__Class_Helper.getStringGood();Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{float dataCopy;{float data;SecureRandom secureRandom=new SecureRandom();data=secureRandom.nextFloat();dataCopy=data;}{float data=dataCopy;if(Math.abs(data)> 0.000001){int result=(int)(100.0/data);IO.writeLine(result);}else{IO.writeLine("This would result in a divide by zero");}}}
private void main()throws Throwable{float dataCopy;{float data;{String stringNumber=System.getProperty("user.home");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}dataCopy=data;}{float data=dataCopy;if(Math.abs(data)> 0.000001){int result=(int)(100.0 % data);IO.writeLine(result);}else{IO.writeLine("This would result in a modulo by zero");}}}
private void main()throws Throwable{String data;data="foo";mainSink(data);}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int dataCopy;{int data;data=(new SecureRandom()).nextInt();dataCopy=data;}{int data=dataCopy;if(data!=0){IO.writeLine("100/"+data+"="+(100/data)+"\n");}else{IO.writeLine("This would result in a divide by zero");}}}
private void main()throws Throwable{String data;data="5";mainSink(data);}
private void main()throws Throwable{String data;while(true){PasswordAuthentication credentials=new PasswordAuthentication("user","AP@ssw0rd".toCharArray());data=new String(credentials.getPassword());break;}while(true){SSLSocketFactory sslsSocketFactory=null;SSLSocket sslSocket=null;PrintWriter writer=null;try{sslsSocketFactory=(SSLSocketFactory)SSLSocketFactory.getDefault();sslSocket=(SSLSocket)sslsSocketFactory.createSocket("remote_host",1337);writer=new PrintWriter(sslSocket.getOutputStream(),true);writer.println(data);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error writing to the socket",exceptIO);}finally{if(writer!=null){writer.close();}try{if(sslSocket!=null){sslSocket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing SSLSocket",exceptIO);}}break;}}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{String data=(new b()).mainSource();if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int count;{String stringNumber=System.getProperty("user.home");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}mainSink(count);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String password;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}HashMap<Integer,String> passwordHashMap=new HashMap<Integer,String>();passwordHashMap.put(0,password);passwordHashMap.put(1,password);passwordHashMap.put(2,password);(new b()).mainSink(passwordHashMap);}
private void main()throws Throwable{long data;while(true){data=2;break;}while(true){long result=(long)(--data);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main()throws Throwable{short data=0;data=Short.MAX_VALUE;mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}if(data < Integer.MAX_VALUE){data++;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;main_private=true;data=main_source();ArrayList intArrayList=new ArrayList(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;data=System.getProperty("user.home");mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{float data;data=2.0f;HashMap<Integer,Float> dataHashMap=new HashMap<Integer,Float>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource(request,response);Class<?> tempClass=Class.forName(data);Object tempClassObject=tempClass.newInstance();}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]=null;if(data > 0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data.replaceAll("(<script>)",""));}}
private void main()throws Throwable{data="5";(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int count;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Container countContainer=new Container();countContainer.containerOne=count;(new b()).mainSink(countContainer);}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{byte data;data=Byte.MAX_VALUE;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;dataGoodG2B=data;mainSink(request,response);}
private void main()throws Throwable{String data;data=System.getenv("ADD");String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{float data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}float[] dataArray=new float[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{float data;data=2.0f;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){response.getWriter().println("<br>bad(): data="+data);}}}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String password;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}String[] passwordArray=new String[5];passwordArray[2]=password;(new b()).mainSink(passwordArray);}
private void main()throws Throwable{int data=(new b()).mainSource();if(data < Integer.MAX_VALUE){int result=(int)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}
private void main()throws Throwable{String data;data=System.getProperty("CWE690");(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;data=System.getenv("ADD");Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}if(data < Byte.MAX_VALUE){byte result=(byte)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;{int result=(int)(data * 2);IO.writeLine("result: "+result);}}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int data;mainPublicStatic=true;data=(new b()).mainSource();{IO.writeLine((byte)data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}break;}while(true){if(data > Integer.MIN_VALUE){data--;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}break;}}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{int count;count=(new SecureRandom()).nextInt();ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(count);byte[] countSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(countSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{int data=(new b()).mainSource();if(data < Integer.MAX_VALUE){int result=(int)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String dataCopy;{String data;data="This is not null";dataCopy=data;}{String data=dataCopy;IO.writeLine(""+data.length());}}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{short data;data=2;short[] dataArray=new short[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");mainPrivate=false;mainSink(data,request,response);}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{float dataCopy;{float data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}dataCopy=data;}{float data=dataCopy;if(Math.abs(data)> 0.000001){int result=(int)(100.0/data);IO.writeLine(result);}else{IO.writeLine("This would result in a divide by zero");}}}
private void main()throws Throwable{int data=0;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{short data;mainPublicStatic=false;data=(new b()).mainSource();{IO.writeLine((byte)data);}}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}if(data!=0){IO.writeLine("100/"+data+"="+(100/data)+"\n");}else{IO.writeLine("This would result in a divide by zero");}}
private void main()throws Throwable{int data=0;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int count;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(count);}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;try{dbConnection=IO.getDBConnection();dbConnection.setCatalog(data);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;{int result=(int)(data * 2);IO.writeLine("result: "+result);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data);}}
private void main()throws Throwable{int count;{String stringNumber=System.getProperty("user.home");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}countGoodB2G=count;mainSink();}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;data--;int result=(int)(data);IO.writeLine("result: "+result);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}dataGoodB2G=data;mainSink(request,response);}
private void main()throws Throwable{{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}(new b()).mainSink();}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data=0;data=(new SecureRandom()).nextInt();mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{byte data;data=Byte.MAX_VALUE;dataGoodB2G=data;mainSink();}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int data;data=2;HashMap intHashMap=new HashMap(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String data;mainPublicStatic=false;data=(new b()).mainSource();Connection dbConnection=null;try{dbConnection=IO.getDBConnection();dbConnection.setCatalog(data);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{byte data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;data="5";mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=0;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}mainPublicStatic=false;(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String data;data=System.getProperty("user.home");ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private int mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}return data;}
private void main()throws Throwable{short data;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPrivate=true;mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{Integer data;data=Integer.valueOf(5);Integer[] dataArray=new Integer[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{SecureRandom secureRandom=new SecureRandom();data=secureRandom.nextFloat();(new b()).mainSink();}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";return data;}
private void main()throws Throwable{short data;main_private=false;data=main_source();{IO.writeLine((byte)data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}break;}while(true){if(data < Integer.MAX_VALUE){data++;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}break;}}
private void main()throws Throwable{int count;count=2;int[] countArray=new int[5];countArray[2]=count;(new b()).mainSink(countArray);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data=mainSource();if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{StringBuilder data;data=CWE690_NULL_Deref_From_Return__Class_Helper.getStringBuilderBad();StringBuilder[] dataArray=new StringBuilder[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data=0;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}(new b()).mainSink(request,response);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}dataGoodB2G=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;data=request.getParameter("name");mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{short dataCopy;{short data;data=2;dataCopy=data;}{short data=dataCopy;{IO.writeLine((byte)data);}}}
private void main()throws Throwable{short data;mainPublicStatic=true;data=(new b()).mainSource();{IO.writeLine((byte)data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="foo";break;}while(true){if(data!=null){Cookie cookieSink=new Cookie("lang",data);response.addCookie(cookieSink);}break;}}
private void main()throws Throwable{long data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{long dataCopy;{long data;data=2;dataCopy=data;}{long data=dataCopy;data--;long result=(long)(data);IO.writeLine("result: "+result);}}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.addHeader("Location","/author.jsp?lang="+data);}}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink(data);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int array[]={0,1,2,3,4};if(data >=0){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}break;}}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;mainPublicStatic=true;data=(new b()).mainSource();{IO.writeLine((byte)data);}}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();mainPrivate=true;mainSink(data);}
private String mainSource()throws Throwable{String data;data="foo";return data;}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{short data;data=2;HashMap<Integer,Short> dataHashMap=new HashMap<Integer,Short>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}break;}while(true){if(data < Integer.MAX_VALUE){data++;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}break;}}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{byte data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{long dataCopy;{long data;data=2;dataCopy=data;}{long data=dataCopy;data++;long result=(long)(data);IO.writeLine("result: "+result);}}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};if(data >=0){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main()throws Throwable{String data;try{InputStreamReader readerInputStream=new InputStreamReader(System.in,"UTF-8");BufferedReader readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;data="Testing.test";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="foo";break;}while(true){if(data!=null){Cookie cookieSink=new Cookie("lang",data);response.addCookie(cookieSink);}break;}}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data=(new b()).mainSource();IO.writeLine("100%"+data+"="+(100 % data)+"\n");}
private void main()throws Throwable{String data;data=System.getProperty("user.home");(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{short data;while(true){data=2;break;}{IO.writeLine((byte)data);}}
private void main()throws Throwable{float dataCopy;{float data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataCopy=data;}{float data=dataCopy;if(Math.abs(data)> 0.000001){int result=(int)(100.0/data);IO.writeLine(result);}else{IO.writeLine("This would result in a divide by zero");}}}
private void main()throws Throwable{int count;count=2;countGoodG2B=count;mainSink();}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private int mainSource()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data="foo";(new b()).mainSink(request,response);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private long mainSource()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();return data;}
private void main()throws Throwable{int data;data=2;{int result=(int)(data * 2);IO.writeLine("result: "+result);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{short data;main_private=false;data=main_source();{IO.writeLine((byte)data);}}
private void main()throws Throwable{float data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{String data;while(true){{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){if(data!=null){System.out.format("%s%n",data);}break;}}
private void main()throws Throwable{short data;while(true){data=2;break;}while(true){{short result=(short)(data * 2);IO.writeLine("result: "+result);}break;}}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{byte data=(new b()).mainSource();byte result=(byte)(--data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int count;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container countContainer=new Container();countContainer.containerOne=count;(new b()).mainSink(countContainer);}
private void main()throws Throwable{String data;while(true){{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}break;}while(true){Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}break;}}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int count=0;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(count);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPrivate=false;mainSink(data,request,response);}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=false;data=(new b()).mainSource(request,response);if(data!=null){response.getWriter().println("<br>bad()-<img src=\""+data+"\">");}}
private void main()throws Throwable{String data;data=System.getenv("ADD");String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{byte data=0;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{byte data;data=Byte.MIN_VALUE;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}(new b()).mainSink(request,response);}
private void main()throws Throwable{int data;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink((Object)data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}dataCopy=data;}{int data=dataCopy;if(data!=0){IO.writeLine("100%"+data+"="+(100 % data)+"\n");}else{IO.writeLine("This would result in a modulo by zero");}}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);HashMap<Integer,Byte> dataHashMap=new HashMap<Integer,Byte>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{byte data=0;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);mainPublicStatic=false;(new b()).mainSink(data);}
private String mainSource()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{byte data;data=2;mainSink(data);}
private void main()throws Throwable{String data;data=System.getenv("ADD");String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{float data;data=2.0f;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,Short> dataHashMap=new HashMap<Integer,Short>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}break;}while(true){int numberOfLoops;try{numberOfLoops=Integer.parseInt(data);}catch(NumberFormatException exceptNumberFormat){IO.writeLine("Invalid response. Numeric input expected. Assuming 1.");numberOfLoops=1;}if(numberOfLoops >=0 && numberOfLoops <=5){for(int i=0;i < numberOfLoops;i++){IO.writeLine("hello world");}}break;}}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int count=0;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(count);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";return data;}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data=0;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int dataCopy;{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}{if(data >(Integer.MIN_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform multiplication.");}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{byte data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data;data=System.getenv("ADD");mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int count;while(true){count=2;break;}while(true){Thread.sleep(count);break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{byte data;data=2;Vector<Byte> dataVector=new Vector<Byte>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{long data;data=2;long[] dataArray=new long[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;data="CWE690";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;data="foo";Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{int count;while(true){count=2;break;}while(true){int i=0;for(i=0;i < count;i++){IO.writeLine("Hello");}break;}}
private void main()throws Throwable{data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;dataGoodG2B=data;mainSink(request,response);}
private long mainSource()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();return data;}
private void main()throws Throwable{String data;data="This is not null";IO.writeLine(""+data.length());}
private void main()throws Throwable{int [] data;data=null;if(data!=null){IO.writeLine(""+data.length);}else{IO.writeLine("data is null");}}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data=0;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;while(true){{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}break;}while(true){int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}break;}}
private void main()throws Throwable{int countCopy;{int count;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}countCopy=count;}{int count=countCopy;if(count > 0 && count <=20){File file=new File("goodSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}}}}
private void main()throws Throwable{short data;data=Short.MIN_VALUE;mainSink(data);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data="foo";(new b()).mainSink(request,response);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private short mainSource()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();if(data < Integer.MAX_VALUE){data++;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.setHeader("Location","/author.jsp?lang="+data);}}
private void main()throws Throwable{long data;data=Long.MIN_VALUE;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{float dataCopy;{float data;data=2.0f;dataCopy=data;}{float data=dataCopy;int result=(int)(100.0/data);IO.writeLine(result);}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data=0;data=Integer.MIN_VALUE;mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainSink(data);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}mainSink(data,request,response);}
private void main()throws Throwable{long dataCopy;{long data;data=2;dataCopy=data;}{long data=dataCopy;{long result=(long)(data * 2);IO.writeLine("result: "+result);}}}
private void main()throws Throwable{byte data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{short data;while(true){data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){if(data > Short.MIN_VALUE){data--;short result=(short)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}break;}}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink(request,response);}
private void main()throws Throwable{short data;data=2;short[] dataArray=new short[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){System.out.format(data);}}}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();HashMap<Integer,Long> dataHashMap=new HashMap<Integer,Long>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";return data;}
private void main()throws Throwable{String data;data=System.getProperty("user.home");Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main()throws Throwable{if(IO.staticReturnsTrueOrFalse()){String input="Test Input";MessageDigest messageDigest=MessageDigest.getInstance("SHA-512");IO.writeLine(IO.toHex(hashValue));}else{String input="Test Input";MessageDigest messageDigest=MessageDigest.getInstance("SHA-512");IO.writeLine(IO.toHex(hashValue));}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink(request,response);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{int count;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Container countContainer=new Container();countContainer.containerOne=count;(new b()).mainSink(countContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int array[]={0,1,2,3,4};if(data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}break;}}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{String data;while(true){data="Good";break;}while(true){IO.writeLine(data);break;}}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data;main_private=false;data=main_source();ArrayList intArrayList=new ArrayList(data);}
private void main()throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;while(true){data=-1;break;}while(true){int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=false;data=(new b()).mainSource(request,response);if(data!=null){*/URI uri;try{uri=new URI(data);}catch(URISyntaxException exceptURISyntax){response.getWriter().write("Invalid redirect URL");return;}response.sendRedirect(data);return;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;mainPublicStatic=false;data=(new b()).mainSource(request,response);ArrayList intArrayList=new ArrayList(data);}
private void main()throws Throwable{short data;while(true){data=Short.MAX_VALUE;break;}while(true){if(data < Short.MAX_VALUE){short result=(short)(data+1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform addition.");}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=false;data=main_source(request,response);Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{long data;data=2;data++;long result=(long)(data);IO.writeLine("result: "+result);}
private void main()throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="foo";break;}while(true){if(data!=null){response.addHeader("Location","/author.jsp?lang="+data);}break;}}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private int mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading count from cookie",exceptNumberFormat);}}}return count;}
private void main()throws Throwable{int countCopy;{int count;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}countCopy=count;}{int count=countCopy;int i=0;if(count > 0 && count <=20){for(i=0;i < count;i++){IO.writeLine("Hello");}}}}
private void main()throws Throwable{int data;while(true){data=-1;break;}while(true){int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("CWE690");(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{String data;data="This is not null";mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}dataCopy=data;}{int data=dataCopy;int array[]=null;if(data > 0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){data=2;break;}while(true){int array[]={0,1,2,3,4};if(data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}break;}}
private void main()throws Throwable{String data;PasswordAuthentication credentials=new PasswordAuthentication("user","AP@ssw0rd".toCharArray());data=new String(credentials.getPassword());mainSink(data);}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{short data;data=2;short[] dataArray=new short[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{float data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data=(new b()).mainSource();if(data!=0){IO.writeLine("100%"+data+"="+(100 % data)+"\n");}else{IO.writeLine("This would result in a modulo by zero");}}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data);}}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{long data;data=2;LinkedList<Long> dataLinkedList=new LinkedList<Long>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;ArrayList intArrayList=new ArrayList(data);}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{{String stringNumber=System.getProperty("user.home");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}(new b()).mainSink();}
private void main()throws Throwable{int data;data=2;int array[]=null;if(data >=0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}
private void main()throws Throwable{{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;while(true){data=(new SecureRandom()).nextInt();break;}while(true){if(data < Integer.MAX_VALUE){int result=(int)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}break;}}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();dataGoodB2G=data;mainSink();}
private void main()throws Throwable{int count;{String stringNumber=System.getProperty("user.home");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}int[] countArray=new int[5];countArray[2]=count;(new b()).mainSink(countArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink(request,response);}
private void main()throws Throwable{byte data=(new b()).mainSource();{if(data >(Byte.MIN_VALUE/2)){byte result=(byte)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform multiplication.");}}}
private void main()throws Throwable{int count;count=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(count);byte[] countSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(countSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{float data;data=2.0f;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data="foo";(new b()).mainSink(request,response);}
private void main()throws Throwable{int count;count=2;LinkedList<Integer> countLinkedList=new LinkedList<Integer>();countLinkedList.add(0,count);countLinkedList.add(1,count);countLinkedList.add(2,count);(new b()).mainSink(countLinkedList);}
private void main()throws Throwable{int count;count=2;LinkedList<Integer> countLinkedList=new LinkedList<Integer>();countLinkedList.add(0,count);countLinkedList.add(1,count);countLinkedList.add(2,count);(new b()).mainSink(countLinkedList);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String password;password="Password1234!";if(password!=null){KerberosPrincipal principal=new KerberosPrincipal("test");KerberosKey key=new KerberosKey(principal,password.toCharArray(),null);IO.writeLine(key.toString());}}
private void main()throws Throwable{{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{String password;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(password);byte[] passwordSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(passwordSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{short data;data=2;dataGoodG2B=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}{if(data >(Integer.MIN_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform multiplication.");}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainPrivate=true;mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){data=2;break;}while(true){int array[]={0,1,2,3,4};array[data]=42;break;}}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int count;count=2;mainPrivate=true;mainSink(count);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}dataCopy=data;}{int data=dataCopy;if(data!=0){IO.writeLine("100/"+data+"="+(100/data)+"\n");}else{IO.writeLine("This would result in a divide by zero");}}}
private String mainSource()throws Throwable{String data;data="foo";return data;}
private void main()throws Throwable{String data=null;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink(request,response);}
private void main()throws Throwable{String data;data=System.getenv("ADD");(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{float data;Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}LinkedList<Float> dataLinkedList=new LinkedList<Float>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{byte data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();dataGoodB2G=data;mainSink();}
private int mainSource()throws Throwable{int count;count=2;return count;}
private void main()throws Throwable{{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{short data;data=Short.MAX_VALUE;short[] dataArray=new short[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private int mainSource()throws Throwable{int count;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return count;}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;while(true){{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}break;}while(true){if(data > Integer.MIN_VALUE){int result=(int)(--data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}break;}}
private void main()throws Throwable{String password;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,String> passwordHashMap=new HashMap<Integer,String>();passwordHashMap.put(0,password);passwordHashMap.put(1,password);passwordHashMap.put(2,password);(new b()).mainSink(passwordHashMap);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}if(data!=0){IO.writeLine("100/"+data+"="+(100/data)+"\n");}else{IO.writeLine("This would result in a divide by zero");}}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{while(true){ArrayList<byte[]> byteArrayList=new ArrayList<byte[]>();{while(true){if(Runtime.getRuntime().freeMemory()< 10485760){IO.writeLine("Not enough memory to go again");break;}byte[] byteArray=new byte[10485760];byteArrayList.add(byteArray);IO.writeLine(""+Runtime.getRuntime().freeMemory());}}break;}}
private void main()throws Throwable{long data;data=Long.MAX_VALUE;dataGoodB2G=data;mainSink();}
private void main()throws Throwable{byte data;data=Byte.MAX_VALUE;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{long data;data=Long.MAX_VALUE;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main()throws Throwable{short data;data=2;HashMap<Integer,Short> dataHashMap=new HashMap<Integer,Short>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}(new b()).mainSink();}
private void main()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{short data=(new b()).mainSource();{short result=(short)(data * 2);IO.writeLine("result: "+result);}}
private void main()throws Throwable{int count;count=2;Vector<Integer> countVector=new Vector<Integer>(5);countVector.add(0,count);countVector.add(1,count);countVector.add(2,count);(new b()).mainSink(countVector);}
private void main()throws Throwable{String data=null;data=System.getenv("ADD");mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{byte data=0;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private int mainSource()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}return data;}
private void main()throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{String data;while(true){data="foo";break;}Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{long data;while(true){data=Long.MAX_VALUE;break;}while(true){if(data < Long.MAX_VALUE){long result=(long)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}break;}}
private void main()throws Throwable{long data;data=2;long result=(long)(data-1);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{short data;while(true){data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){{if(data >(Short.MIN_VALUE/2)){short result=(short)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform multiplication.");}}break;}}
private void main()throws Throwable{String data;try{InputStreamReader readerInputStream=new InputStreamReader(System.in,"UTF-8");BufferedReader readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink();}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){response.setHeader("Location","/author.jsp?lang="+data);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{long data;data=Long.MAX_VALUE;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int count;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}int[] countArray=new int[5];countArray[2]=count;(new b()).mainSink(countArray);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}if(data!=null){System.out.printf("%s%n",data);}}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int result=(int)(++data);IO.writeLine("result: "+result);break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=false;data=main_source(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data);}}
private void main()throws Throwable{long data=(new b()).mainSource();if(data < Long.MAX_VALUE){long result=(long)(data+1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform addition.");}}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{count=2;(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{float data;data=2.0f;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{byte dataCopy;{byte data;data=2;dataCopy=data;}{byte data=dataCopy;byte result=(byte)(data+1);IO.writeLine("result: "+result);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;IO.writeLine("bad: 100/"+data+"="+(100/data)+"\n");}
private void main()throws Throwable{String password=null;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(password);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data=2;(new b()).mainSink(request,response);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{data=Byte.MAX_VALUE;(new b()).mainSink();}
private void main()throws Throwable{long data;while(true){data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){if(data > Long.MIN_VALUE){long result=(long)(--data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}break;}}
private void main()throws Throwable{byte data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();if(data > Long.MIN_VALUE){long result=(long)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}}
private void main()throws Throwable{StringBuilder data;data=null;(new b()).mainSink((Object)data);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int count;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainSink(count);}
private void main()throws Throwable{String data;data="CWE690";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data=(new b()).mainSource();int result=(int)(--data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data=0;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int countCopy;{int count;count=2;countCopy=count;}{int count=countCopy;File file=new File("badSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}}}
private void main()throws Throwable{short data;data=2;{short result=(short)(data * 2);IO.writeLine("result: "+result);}}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();HashMap<Integer,Long> dataHashMap=new HashMap<Integer,Long>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data=0;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{float data;data=2.0f;mainSink(data);}
private void main()throws Throwable{int count;count=2;(new b()).mainSink(count);}
private void main()throws Throwable{int data;data=-1;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data;FileInputStream streamFileInput=null;String propertiesFileName="./CWE690_NULL_Deref_From_Return__Helper.properties";try{streamFileInput=new FileInputStream(propertiesFileName);Properties properties=new Properties();properties.load(streamFileInput);data=properties.getProperty("CWE690");}catch(IOException exceptIO){IO.writeLine("Could not open properties file: "+propertiesFileName);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException e){IO.logger.log(Level.WARNING,"Error closing FileInputStream",e);}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=true;data=main_source(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data.replaceAll("(<script>)",""));}}
private void main()throws Throwable{short data=0;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;while(true){try{InputStreamReader readerInputStream=new InputStreamReader(System.in,"UTF-8");BufferedReader readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}break;}Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;if(data!=null){try{connection=DriverManager.getConnection("data-url","root",data);preparedStatement=connection.prepareStatement("select * from test_table");resultSet=preparedStatement.executeQuery();}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{short data=0;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int count;count=2;Vector<Integer> countVector=new Vector<Integer>(5);countVector.add(0,count);countVector.add(1,count);countVector.add(2,count);(new b()).mainSink(countVector);}
private void main()throws Throwable{String data=(new b()).mainSource();Connection dbConnection=null;PreparedStatement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("select * from users where name=?");sqlStatement.setString(1,data);resultSet=sqlStatement.executeQuery();}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int array[]={0,1,2,3,4};if(data >=0){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data=(new b()).mainSource();String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{long data;while(true){data=Long.MAX_VALUE;break;}while(true){if(data < Long.MAX_VALUE){long result=(long)(data+1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform addition.");}break;}}
private void main()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=(new b()).mainSource(request,response);{if(data >(Integer.MIN_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform multiplication.");}}}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{float data=(new b()).mainSource();if(Math.abs(data)> 0.000001){int result=(int)(100.0 % data);IO.writeLine(result);}else{IO.writeLine("This would result in a modulo by zero");}}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();ArrayList intArrayList=new ArrayList(data);}
private void main()throws Throwable{int count;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(count);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data);}}
private void main()throws Throwable{int data=(new b()).mainSource();if(data > Integer.MIN_VALUE){int result=(int)(--data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{String dataCopy;{String data;data=System.getenv("ADD");dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;PreparedStatement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("select * from users where name=?");sqlStatement.setString(1,data);resultSet=sqlStatement.executeQuery();}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{int data=0;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){data=2;break;}while(true){int array[]={0,1,2,3,4};IO.writeLine(array[data]);break;}}
private int mainSource()throws Throwable{int count;count=2;return count;}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data=(new b()).mainSource();Class<?> tempClass=Class.forName(data);Object tempClassObject=tempClass.newInstance();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=(new b()).mainSource(request,response);int array[]={0,1,2,3,4};IO.writeLine(array[data]);}
private void main()throws Throwable{String password;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}passwordGoodB2G=password;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data=request.getParameter("name");break;}while(true){Connection dbConnection=null;PreparedStatement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("select * from users where name=?");sqlStatement.setString(1,data);resultSet=sqlStatement.executeQuery();}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}break;}}
private void main()throws Throwable{int count;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,Integer> countHashMap=new HashMap<Integer,Integer>();countHashMap.put(0,count);countHashMap.put(1,count);countHashMap.put(2,count);(new b()).mainSink(countHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name='"+data+"'");Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;{String stringNumber=request.getParameter("name");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading count from parameter 'name'",exceptNumberFormat);}}Vector<Integer> countVector=new Vector<Integer>(5);countVector.add(0,count);countVector.add(1,count);countVector.add(2,count);(new b()).mainSink(countVector,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=0;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int count;count=(new SecureRandom()).nextInt();Vector<Integer> countVector=new Vector<Integer>(5);countVector.add(0,count);countVector.add(1,count);countVector.add(2,count);(new b()).mainSink(countVector);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;{String stringNumber=request.getParameter("name");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading count from parameter 'name'",exceptNumberFormat);}}mainSink(count,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{float data;data=2.0f;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;data="5";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String data;data="Testing.test";mainSink(data);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}if(data > Integer.MIN_VALUE){int result=(int)(--data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}
private void main()throws Throwable{String data;data="Testing.test";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int count;count=2;mainSink(count);}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=0;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int count=0;count=2;mainPublicStatic=true;(new b()).mainSink(count);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){PasswordAuthentication credentials=new PasswordAuthentication("user","GP@ssw0rd".toCharArray());{String salt="ThisIsMySalt";MessageDigest messageDigest=MessageDigest.getInstance("SHA-512");messageDigest.reset();String credentialsToHash=credentials.getUserName()+":"+(new String(credentials.getPassword()));byte[] hashedCredsAsBytes=messageDigest.digest((salt+credentialsToHash).getBytes("UTF-8"));data=IO.toHex(hashedCredsAsBytes);}break;}while(true){response.addCookie(new Cookie("auth",data));break;}}
private void main()throws Throwable{float data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{short data;data=Short.MAX_VALUE;mainPrivate=false;mainSink(data);}
private void main()throws Throwable{float data;{String stringNumber=System.getProperty("user.home");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}Vector<Float> dataVector=new Vector<Float>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainPrivate=false;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=0;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}mainPublicStatic=false;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();HashSet intHashSet=new HashSet(data);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPrivate=false;mainSink(data);}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){response.getWriter().println("<br>bad(): data="+data);}}}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int data;data=2;int result=(int)(data+1);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;while(true){{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}break;}while(true){if(data!=0){IO.writeLine("100/"+data+"="+(100/data)+"\n");}else{IO.writeLine("This would result in a divide by zero");}break;}}
private void main()throws Throwable{int data=(new b()).mainSource();if(data!=0){IO.writeLine("100%"+data+"="+(100 % data)+"\n");}else{IO.writeLine("This would result in a modulo by zero");}}
private void main()throws Throwable{int data;data=Integer.MAX_VALUE;(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private int mainSource()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}return data;}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String dataCopy;{String data;data=System.getProperty("user.home");dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{byte data;data=2;mainSink(data);}
private void main()throws Throwable{long data;while(true){data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){if(data < Long.MAX_VALUE){long result=(long)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data=(new b()).mainSource();if(data < Integer.MAX_VALUE){data++;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}
private void main()throws Throwable{int data;main_private=false;data=main_source();HashMap intHashMap=new HashMap(data);}
private void main()throws Throwable{String data;data="5";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);Connection dBConnection=IO.getDBConnection();PreparedStatement preparedStatement=null;ResultSet resultSet=null;int id=0;try{id=Integer.parseInt(data);}catch(NumberFormatException nfx){}try{preparedStatement=dBConnection.prepareStatement("select * from invoices where uid=?");preparedStatement.setInt(1,id);resultSet=preparedStatement.executeQuery();IO.writeString("bad()-result requested: "+data+"\n");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error executing query",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Could not close ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Could not close PreparedStatement",exceptSql);}try{if(dBConnection!=null){dBConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Could not close Connection",exceptSql);}}}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;Statement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();resultSet=sqlStatement.executeQuery("select * from users where name='"+data+"'");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;try{InputStreamReader readerInputStream=new InputStreamReader(System.in,"UTF-8");BufferedReader readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String password;password="Password1234!";mainPrivate=true;mainSink(password);}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}byte[] dataArray=new byte[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=mainSource(request,response);Class<?> tempClass=Class.forName(data);Object tempClassObject=tempClass.newInstance();}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;data=System.getenv("ADD");mainPrivate=false;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}mainSink(data,request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();int result=(int)(++data);IO.writeLine("result: "+result);}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{short dataCopy;{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataCopy=data;}{short data=dataCopy;if(data > Short.MIN_VALUE){short result=(short)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}}}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int dataCopy;{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataCopy=data;}{int data=dataCopy;if(data!=0){IO.writeLine("100/"+data+"="+(100/data)+"\n");}else{IO.writeLine("This would result in a divide by zero");}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{int data=0;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="5";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="foo";break;}if(data!=null){*/URI uri;try{uri=new URI(data);}catch(URISyntaxException exceptURISyntax){response.getWriter().write("Invalid redirect URL");return;}response.sendRedirect(data);return;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data=System.getProperty("user.home");(new b()).mainSink(request,response);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;data=Integer.MAX_VALUE;mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int dataCopy;{int data;data=100;dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};if(data >=0 && data < array.length){array[data]=42;}else{IO.writeLine("Array index out of bounds");}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String data;while(true){data="foo";break;}if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{data="5";(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data=request.getParameter("name");break;}while(true){Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);int rowCount=sqlStatement.executeUpdate();IO.writeLine("Updated "+rowCount+" rows successfully.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}break;}}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=mainSource(request,response);if(data!=null){*/URI uri;try{uri=new URI(data);}catch(URISyntaxException exceptURISyntax){response.getWriter().write("Invalid redirect URL");return;}response.sendRedirect(data);return;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String password;password="Password1234!";LinkedList<String> passwordLinkedList=new LinkedList<String>();passwordLinkedList.add(0,password);passwordLinkedList.add(1,password);passwordLinkedList.add(2,password);(new b()).mainSink(passwordLinkedList);}
private void main()throws Throwable{String data=(new b()).mainSource();Connection dbConnection=null;Statement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();resultSet=sqlStatement.executeQuery("select * from users where name='"+data+"'");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;main_private=true;data=main_source();ArrayList intArrayList=new ArrayList(data);}
private void main()throws Throwable{byte data=(new b()).mainSource();byte result=(byte)(data+1);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data=0;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}break;}while(true){if(data > Integer.MIN_VALUE){data--;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}break;}}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{float data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Vector<Float> dataVector=new Vector<Float>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainPrivate=true;mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=mainSource(request,response);HashMap intHashMap=new HashMap(data);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.addHeader("Location","/author.jsp?lang="+data);}break;}}
private int mainSource()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="Testing.test";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";if(data!=null){response.getWriter().println("<br>bad(): data="+data.replaceAll("(<script>)",""));}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{byte data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{int count;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}int[] countArray=new int[5];countArray[2]=count;(new b()).mainSink(countArray);}
private void main()throws Throwable{float data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{String data;data="foo";mainSink(data);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;while(true){{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}break;}while(true){if(data < Integer.MAX_VALUE){int result=(int)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}break;}}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{float data=0.0f;data=2.0f;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{float data;Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}HashMap<Integer,Float> dataHashMap=new HashMap<Integer,Float>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}mainPrivate=false;mainSink(data,request,response);}
private void main()throws Throwable{long data;data=2;data++;long result=(long)(data);IO.writeLine("result: "+result);}
private void main()throws Throwable{String data=(new b()).mainSource();Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{float data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}dataGoodB2G=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;PasswordAuthentication credentials=new PasswordAuthentication("user","GP@ssw0rd".toCharArray());{String salt="ThisIsMySalt";MessageDigest messageDigest=MessageDigest.getInstance("SHA-512");messageDigest.reset();String credentialsToHash=credentials.getUserName()+":"+(new String(credentials.getPassword()));byte[] hashedCredsAsBytes=messageDigest.digest((salt+credentialsToHash).getBytes("UTF-8"));data=IO.toHex(hashedCredsAsBytes);}response.addCookie(new Cookie("auth",data));}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{short data;data=2;LinkedList<Short> dataLinkedList=new LinkedList<Short>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int count;count=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(count);byte[] countSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(countSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String dataCopy;{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataCopy=data;}{String data=dataCopy;if(data!=null){System.out.printf("%s%n",data);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int result=(int)(--data);IO.writeLine("result: "+result);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String data;try{InputStreamReader readerInputStream=new InputStreamReader(System.in,"UTF-8");BufferedReader readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;while(true){data=Integer.MAX_VALUE;break;}while(true){if(data < Integer.MAX_VALUE){data++;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}break;}}
private void main()throws Throwable{float data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}LinkedList<Float> dataLinkedList=new LinkedList<Float>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String dataCopy;{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataCopy=data;}{String data=dataCopy;if(data!=null){System.out.format("%s%n",data);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data.replaceAll("(<script>)",""));}}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int count;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Vector<Integer> countVector=new Vector<Integer>(5);countVector.add(0,count);countVector.add(1,count);countVector.add(2,count);(new b()).mainSink(countVector);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;HashSet intHashSet=new HashSet(data);}}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;try{InputStreamReader readerInputStream=new InputStreamReader(System.in,"UTF-8");BufferedReader readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{float data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{String data;data="CWE690";mainSink(data);}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{short data;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);LinkedList<Short> dataLinkedList=new LinkedList<Short>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){System.out.printf(data);}}}
private void main()throws Throwable{byte data;data=2;mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{short data;main_private=true;data=main_source();{IO.writeLine((byte)data);}}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{long data;data=2;long[] dataArray=new long[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=System.getProperty("user.home");Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{float data;while(true){InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}break;}while(true){if(Math.abs(data)> 0.000001){int result=(int)(100.0 % data);IO.writeLine(result);}else{IO.writeLine("This would result in a modulo by zero");}break;}}
private void main()throws Throwable{byte data;data=2;byte[] dataArray=new byte[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data=null;data=System.getProperty("user.home");mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{byte data=(new b()).mainSource();if(data < Byte.MAX_VALUE){byte result=(byte)(data+1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform addition.");}}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}mainPrivate=false;mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;data="Testing.test";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int count;count=2;countGoodG2B=count;mainSink();}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){IO.writeLine("100%"+data+"="+(100 % data)+"\n");break;}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{data=null;(new b()).mainSink();}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{int data;main_private=false;data=main_source();{IO.writeLine((byte)data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="10";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;try{InputStreamReader readerInputStream=new InputStreamReader(System.in,"UTF-8");BufferedReader readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data=null;data=System.getenv("ADD");mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}mainPrivate=false;mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="Testing.test";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{int data;data=Integer.MIN_VALUE;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data=2;(new b()).mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";if(data!=null){response.getWriter().println("<br>bad(): data="+data.replaceAll("(<script>)",""));}}
private void main()throws Throwable{int count;count=(new SecureRandom()).nextInt();Container countContainer=new Container();countContainer.containerOne=count;(new b()).mainSink(countContainer);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;int result=(int)(data * data);IO.writeLine("result: "+result);}
private void main()throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";if(data!=null){System.out.format(data);}}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}mainSink(data);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;IO.writeLine("100%"+data+"="+(100 % data)+"\n");}
private void main()throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data=2;(new b()).mainSink(request,response);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{String data=(new b()).mainSource();if(data!=null){System.out.printf("%s%n",data);}}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;{IO.writeLine((byte)data);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}(new b()).mainSink(request,response);}
private void main()throws Throwable{byte data;data=2;Vector<Byte> dataVector=new Vector<Byte>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();long[] dataArray=new long[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{while(true){CWE586_Explicit_Call_to_Finalize__basic_Helper goodObj=new CWE586_Explicit_Call_to_Finalize__basic_Helper();try{goodObj.sayHello();}catch(Exception exception){IO.writeLine("An error occurred.");}finally{goodObj=null;}break;}}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;ArrayList intArrayList=new ArrayList(data);}}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data;data="Testing.test";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]={0,1,2,3,4};if(data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{short data;data=Short.MAX_VALUE;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;IO.writeLine("bad: 100/"+data+"="+(100/data)+"\n");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{int count;count=2;HashMap<Integer,Integer> countHashMap=new HashMap<Integer,Integer>();countHashMap.put(0,count);countHashMap.put(1,count);countHashMap.put(2,count);(new b()).mainSink(countHashMap);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int count;count=2;LinkedList<Integer> countLinkedList=new LinkedList<Integer>();countLinkedList.add(0,count);countLinkedList.add(1,count);countLinkedList.add(2,count);(new b()).mainSink(countLinkedList);}
private void main()throws Throwable{int data;mainPublicStatic=false;data=(new b()).mainSource();HashMap intHashMap=new HashMap(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;dataGoodG2B=data;mainSink(request,response);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;IO.writeLine("bad: 100/"+data+"="+(100/data)+"\n");}}
private void main()throws Throwable{short data;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");dataGoodB2G=data;mainSink(request,response);}
private void main()throws Throwable{String password;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainSink(password);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{float data;data=2.0f;Vector<Float> dataVector=new Vector<Float>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;while(true){data="foo";break;}Connection dbConnection=null;try{dbConnection=IO.getDBConnection();dbConnection.setCatalog(data);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{String dataCopy;{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}dataCopy=data;}{String data=dataCopy;if(data!=null){System.out.printf("%s%n",data);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";mainSink(data);}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=tokens[0];String password=tokens[1];XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="10";break;}Connection dBConnection=IO.getDBConnection();PreparedStatement preparedStatement=null;ResultSet resultSet=null;int id=0;try{id=Integer.parseInt(data);}catch(NumberFormatException nfx){}try{preparedStatement=dBConnection.prepareStatement("select * from invoices where uid=?");preparedStatement.setInt(1,id);resultSet=preparedStatement.executeQuery();IO.writeString("bad()-result requested: "+data+"\n");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error executing query",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Could not close ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Could not close PreparedStatement",exceptSql);}try{if(dBConnection!=null){dBConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Could not close Connection",exceptSql);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){response.addHeader("Location","/author.jsp?lang="+data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}(new b()).mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){Cookie cookieSink=new Cookie("lang",data);response.addCookie(cookieSink);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{long data;data=2;{long result=(long)(data * 2);IO.writeLine("result: "+result);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data.replaceAll("(<script>)",""));}}
private void main()throws Throwable{count=2;(new b()).mainSink();}
private void main()throws Throwable{int data;data=-1;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();{if(data >(Integer.MIN_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform multiplication.");}}}
private void main()throws Throwable{String data;main_private=true;data=main_source();String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int result=(int)(data-1);IO.writeLine("result: "+result);}}
private void main()throws Throwable{int count;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}Container countContainer=new Container();countContainer.containerOne=count;(new b()).mainSink(countContainer);}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();long[] dataArray=new long[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data;data="5";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}int array[]={0,1,2,3,4};if(data >=0 && data < array.length){array[data]=42;}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name='"+data+"'");Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){response.setHeader("Location","/author.jsp?lang="+data);}}}
private void main()throws Throwable{int data;data=2;data++;int result=(int)(data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink(request,response);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;{int result=(int)(data * 2);IO.writeLine("result: "+result);}}}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int count;count=2;HashMap<Integer,Integer> countHashMap=new HashMap<Integer,Integer>();countHashMap.put(0,count);countHashMap.put(1,count);countHashMap.put(2,count);(new b()).mainSink(countHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=System.getenv("ADD");mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){IO.writeLine("100%"+data+"="+(100 % data)+"\n");break;}}
private void main()throws Throwable{int data;while(true){{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}break;}while(true){if(data > Integer.MIN_VALUE){int result=(int)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{int count;count=Integer.MAX_VALUE;mainSink(count);}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}dataGoodB2G=data;mainSink(request,response);}
private void main()throws Throwable{String data;while(true){data="foo";break;}String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int array[]=null;if(data >=0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data="foo";(new b()).mainSink(request,response);}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{short data;data=2;mainSink(data);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;ArrayList intArrayList=new ArrayList(data);}}
private void main()throws Throwable{String dataCopy;{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;PreparedStatement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("select * from users where name=?");sqlStatement.setString(1,data);resultSet=sqlStatement.executeQuery();}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data="foo";(new b()).mainSink(request,response);}
private void main()throws Throwable{int count;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}Container countContainer=new Container();countContainer.containerOne=count;(new b()).mainSink(countContainer);}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=0;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="foo";break;}if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPrivate=false;mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{float data;data=2.0f;int result=(int)(100.0/data);IO.writeLine(result);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{long data;data=Long.MAX_VALUE;dataGoodB2G=data;mainSink();}
private void main()throws Throwable{int data=0;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink(request,response);}
private void main()throws Throwable{float data;{String stringNumber=System.getProperty("user.home");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainSink(data);}
private void main()throws Throwable{String data=null;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data=(new b()).mainSource();if(data > Integer.MIN_VALUE){data--;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="5";return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=tokens[0];String password=tokens[1];XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private int mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}return data;}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};array[data]=42;}}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{short dataCopy;{short data;data=2;dataCopy=data;}{short data=dataCopy;{IO.writeLine((byte)data);}}}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int array[]={0,1,2,3,4};if(data >=0){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}break;}}
private void main()throws Throwable{int data;data=Integer.MAX_VALUE;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{password="Password1234!";(new b()).mainSink();}
private void main()throws Throwable{String data;try{InputStreamReader readerInputStream=new InputStreamReader(System.in,"UTF-8");BufferedReader readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private int mainSource()throws Throwable{int count;count=2;return count;}
private void main()throws Throwable{String data=(new b()).mainSource();Connection dbConnection=null;PreparedStatement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("select * from users where name=?");sqlStatement.setString(1,data);resultSet=sqlStatement.executeQuery();}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{String data;while(true){data="foo";break;}while(true){String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=tokens[0];String password=tokens[1];XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{int data;while(true){{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}break;}while(true){if(data < Integer.MAX_VALUE){int result=(int)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}break;}}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;main_private=false;data=main_source();{IO.writeLine((byte)data);}}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{long dataCopy;{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataCopy=data;}{long data=dataCopy;if(data < Long.MAX_VALUE){long result=(long)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}}
private void main()throws Throwable{float data;data=2.0f;LinkedList<Float> dataLinkedList=new LinkedList<Float>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}{if(data >(Short.MIN_VALUE/2)){short result=(short)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform multiplication.");}}}
private String mainSource()throws Throwable{String data;data="foo";return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;IO.writeLine("bad: 100/"+data+"="+(100/data)+"\n");}}
private void main()throws Throwable{String data;data="Testing.test";(new b()).mainSink((Object)data);}
private void main()throws Throwable{int count;count=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(count);byte[] countSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(countSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="Testing.test";mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{float data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}if(Math.abs(data)> 0.000001){int result=(int)(100.0 % data);IO.writeLine(result);}else{IO.writeLine("This would result in a modulo by zero");}}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{String data;main_private=false;data=main_source();String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}
private long mainSource()throws Throwable{long data;data=2;return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{int count;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink((Object)count);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}dataGoodB2G=data;mainSink(request,response);}
private void main()throws Throwable{int count;while(true){{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){if(count > 0 && count <=2000){Thread.sleep(count);}break;}}
private void main()throws Throwable{String data;data=System.getProperty("user.home");mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{short data;data=2;LinkedList<Short> dataLinkedList=new LinkedList<Short>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String password;password="Password1234!";String[] passwordArray=new String[5];passwordArray[2]=password;(new b()).mainSink(passwordArray);}
private void main()throws Throwable{long data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;dataGoodG2B=data;mainSink(request,response);}
private float mainSource()throws Throwable{float data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}return data;}
private void main()throws Throwable{short data;data=2;HashMap<Integer,Short> dataHashMap=new HashMap<Integer,Short>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;data="foo";String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink(data);}
private void main()throws Throwable{int count;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(count);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;data=null;dataGoodB2G=data;mainSink();}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{while(true){if(request.getParameter("username")==null){return;}String username=request.getParameter("username");OutputStreamWriter writerOutputStream=null;PrintWriter writerPrint=null;if(username.matches("[a-zA-Z0-9]*")){writerOutputStream=new OutputStreamWriter(System.err,"UTF-8");writerPrint=new PrintWriter(writerOutputStream);writerPrint.println("Username: "+username+" logged in");}else{response.getWriter().println("Invalid characters");}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}break;}}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data="foo";(new b()).mainSink(request,response);}
private void main()throws Throwable{String data;data="Testing.test";mainSink(data);}
private void main()throws Throwable{short data=0;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){data--;int result=(int)(data);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}mainSink(count,request,response);}
private void main()throws Throwable{int data=0;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{short data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);(new b()).mainSink(data);}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data=(new b()).mainSource();if(data > Integer.MIN_VALUE){int result=(int)(--data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}dataCopy=data;}{String data=dataCopy;if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.addHeader("Location","/author.jsp?lang="+data);}}}
private void main()throws Throwable{int data;data=2;int result=(int)(--data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;while(true){{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}break;}while(true){if(data > Integer.MIN_VALUE){int result=(int)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}break;}}
private void main()throws Throwable{int data=(new b()).mainSource();int result=(int)(++data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data=0;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";mainSink(data);}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{byte data;data=2;Vector<Byte> dataVector=new Vector<Byte>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{String data;data=null;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}dataGoodB2G=data;mainSink(request,response);}
private String mainSource()throws Throwable{String data;data="foo";return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{int count=0;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(count);}
private void main()throws Throwable{String password;password="Password1234!";String[] passwordArray=new String[5];passwordArray[2]=password;(new b()).mainSink(passwordArray);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{short data;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);Vector<Short> dataVector=new Vector<Short>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;int result=(int)(data-1);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}(new b()).mainSink(request,response);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;ArrayList intArrayList=new ArrayList(data);}}
private void main()throws Throwable{String data=(new b()).mainSource();String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=false;data=(new b()).mainSource(request,response);if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{String data;data=System.getenv("ADD");Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=2;{int result=(int)(data * 2);IO.writeLine("result: "+result);}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{while(true){testcases.CWE486_Compare_Classes_by_Name.HelperClass.CWE486_Compare_Classes_by_Name__Helper helperClass=new testcases.CWE486_Compare_Classes_by_Name.HelperClass.CWE486_Compare_Classes_by_Name__Helper();testcases.CWE486_Compare_Classes_by_Name.CWE486_Compare_Classes_by_Name__Helper helperClassRoot=new testcases.CWE486_Compare_Classes_by_Name.CWE486_Compare_Classes_by_Name__Helper();if(helperClassRoot.getClass().equals(helperClass.getClass())){IO.writeLine("Classes are the same");}else{IO.writeLine("Classes are different");}break;}}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();if(data < Long.MAX_VALUE){long result=(long)(data+1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform addition.");}}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;mainPublicStatic=false;data=(new b()).mainSource();{IO.writeLine((short)data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("CWE690");String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data=null;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}(new b()).mainSink((Object)data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource(request,response);if(data!=null){*/URI uri;try{uri=new URI(data);}catch(URISyntaxException exceptURISyntax){response.getWriter().write("Invalid redirect URL");return;}response.sendRedirect(data);return;}}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){{int result=(int)(data * 2);IO.writeLine("result: "+result);}break;}}
private int [] mainSource()throws Throwable{int [] data;data=null;return data;}
private void main()throws Throwable{int data;data=100;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String password;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPrivate=true;mainSink(password);}
private void main()throws Throwable{float data;data=2.0f;mainSink(data);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;mainPublicStatic=false;data=(new b()).mainSource();{IO.writeLine((short)data);}}
private void main()throws Throwable{String data;main_private=false;data=main_source();String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private byte mainSource()throws Throwable{byte data;data=2;return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}if(data < Integer.MAX_VALUE){int result=(int)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}
private void main()throws Throwable{int dataCopy;{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataCopy=data;}{int data=dataCopy;if((data!=Integer.MIN_VALUE)&&(data!=Long.MIN_VALUE)&&(Math.abs(data)<=(long)Math.sqrt(Integer.MAX_VALUE))){int result=(int)(data * data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform squaring.");}}}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();mainPrivate=false;mainSink(data);}
private String mainSource()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}return data;}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){data=2;break;}while(true){data--;int result=(int)(data);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{String data=null;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}if(data!=0){IO.writeLine("100%"+data+"="+(100 % data)+"\n");}else{IO.writeLine("This would result in a modulo by zero");}}
private void main()throws Throwable{int data;data=Integer.MIN_VALUE;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data;while(true){{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}break;}}
private void main()throws Throwable{String data;data="foo";if(data!=null){System.out.format(data);}}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data=(new b()).mainSource();int result=(int)(--data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int dataCopy;{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}dataCopy=data;}{int data=dataCopy;if(data > Integer.MIN_VALUE){data--;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=false;data=main_source(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data.replaceAll("(<script>)",""));}}
private void main()throws Throwable{int dataCopy;{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}dataCopy=data;}{int data=dataCopy;if(data > Integer.MIN_VALUE){int result=(int)(--data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}}
private void main()throws Throwable{int count=0;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(count);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data=request.getParameter("name");dataCopy=data;}{String data=dataCopy;if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("update users set hitcount=hitcount+1 where name=?");for(int i=0;i < names.length;i++){sqlStatement.setString(1,names[i]);sqlStatement.addBatch();}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{String password;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}HashMap<Integer,String> passwordHashMap=new HashMap<Integer,String>();passwordHashMap.put(0,password);passwordHashMap.put(1,password);passwordHashMap.put(2,password);(new b()).mainSink(passwordHashMap);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="5";dataGoodG2B=data;mainSink(request,response);}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{float data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}mainPrivate=true;mainSink(data,request,response);}
private String mainSource()throws Throwable{String data;data="foo";return data;}
private void main()throws Throwable{int count;count=Integer.MAX_VALUE;Vector<Integer> countVector=new Vector<Integer>(5);countVector.add(0,count);countVector.add(1,count);countVector.add(2,count);(new b()).mainSink(countVector);}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;data=System.getenv("ADD");mainPrivate=false;mainSink(data);}
private void main()throws Throwable{String data;main_private=true;data=main_source();String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{String data;while(true){data="foo";break;}String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;PasswordAuthentication credentials=new PasswordAuthentication("user","AP@ssw0rd".toCharArray());data=new String(credentials.getPassword());Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{short data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{float data;SecureRandom secureRandom=new SecureRandom();data=secureRandom.nextFloat();mainPrivate=false;mainSink(data);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private int mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}return data;}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;while(true){{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}break;}while(true){if((data!=Integer.MIN_VALUE)&&(data!=Long.MIN_VALUE)&&(Math.abs(data)<=(long)Math.sqrt(Integer.MAX_VALUE))){int result=(int)(data * data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform squaring.");}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data=2;(new b()).mainSink(request,response);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{String data;data=System.getenv("ADD");ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}if(data < Integer.MAX_VALUE){data++;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}
private void main()throws Throwable{short data;data=Short.MAX_VALUE;dataGoodB2G=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=false;data=main_source(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data);}}
private void main()throws Throwable{int data;data=2;int array[]={0,1,2,3,4};IO.writeLine(array[data]);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;main_private=true;data=main_source(request,response);HashMap intHashMap=new HashMap(data);}
private void main()throws Throwable{short data;data=2;data--;short result=(short)(data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data=(new b()).mainSource();int result=(int)(data+1);IO.writeLine("result: "+result);}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);int rowCount=sqlStatement.executeUpdate();IO.writeLine("Updated "+rowCount+" rows successfully.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");mainSink(data,request,response);}
private void main()throws Throwable{byte data;data=Byte.MAX_VALUE;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data=(new b()).mainSource();if(data < Integer.MAX_VALUE){int result=(int)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{float data;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}Vector<Float> dataVector=new Vector<Float>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;dataGoodG2B=data;mainSink(request,response);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data=(new b()).mainSource();{if(data >(Integer.MIN_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform multiplication.");}}}
private void main()throws Throwable{data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{long data=0L;data=Long.MAX_VALUE;mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}mainPrivate=true;mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data=0;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;{IO.writeLine((byte)data);}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private StringBuilder mainSource()throws Throwable{StringBuilder data;data=CWE690_NULL_Deref_From_Return__Class_Helper.getStringBuilderBad();return data;}
private void main()throws Throwable{short data;data=2;data--;short result=(short)(data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int result=(int)(--data);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{short dataCopy;{short data;data=2;dataCopy=data;}{short data=dataCopy;{IO.writeLine((byte)data);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]={0,1,2,3,4};if(data >=0){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{byte data;data=2;LinkedList<Byte> dataLinkedList=new LinkedList<Byte>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=false;data=main_source(request,response);Class<?> tempClass=Class.forName(data);Object tempClassObject=tempClass.newInstance();}
private void main()throws Throwable{int count=(new b()).mainSource();int i=0;for(i=0;i < count;i++){IO.writeLine("Hello");}}
private void main()throws Throwable{String data=(new b()).mainSource();if(data!=null){String stringTrimmed=data.trim();IO.writeLine(stringTrimmed);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{float data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}if(Math.abs(data)> 0.000001){int result=(int)(100.0/data);IO.writeLine(result);}else{IO.writeLine("This would result in a divide by zero");}}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;main_private=false;data=main_source();Connection dbConnection=null;try{dbConnection=IO.getDBConnection();dbConnection.setCatalog(data);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{String password;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}if(password!=null){KerberosPrincipal principal=new KerberosPrincipal("test");{Cipher aesCipher=Cipher.getInstance("AES");SecretKeySpec secretKeySpec=new SecretKeySpec("ABCDEFGHABCDEFGH".getBytes("UTF-8"),"AES");aesCipher.init(Cipher.DECRYPT_MODE,secretKeySpec);password=new String(aesCipher.doFinal(password.getBytes("UTF-8")),"UTF-8");}KerberosKey key=new KerberosKey(principal,password.toCharArray(),null);IO.writeLine(key.toString());}}
private void main()throws Throwable{String password;password="Password1234!";HashMap<Integer,String> passwordHashMap=new HashMap<Integer,String>();passwordHashMap.put(0,password);passwordHashMap.put(1,password);passwordHashMap.put(2,password);(new b()).mainSink(passwordHashMap);}
private void main()throws Throwable{float data;SecureRandom secureRandom=new SecureRandom();data=secureRandom.nextFloat();(new b()).mainSink(data);}
private void main()throws Throwable{byte data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String data;data=System.getProperty("user.home");HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data=0;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}if(data > Long.MIN_VALUE){long result=(long)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=false;data=(new b()).mainSource(request,response);if(data!=null){*/URI uri;try{uri=new URI(data);}catch(URISyntaxException exceptURISyntax){response.getWriter().write("Invalid redirect URL");return;}response.sendRedirect(data);return;}}
private void main()throws Throwable{long data;data=2;mainSink(data);}
private void main()throws Throwable{String data=null;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private int mainSource()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return data;}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{int count=0;count=(new SecureRandom()).nextInt();mainPublicStatic=true;(new b()).mainSink(count);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{byte dataCopy;{byte data;data=2;dataCopy=data;}{byte data=dataCopy;byte result=(byte)(data * data);IO.writeLine("result: "+result);}}
private void main()throws Throwable{float data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main()throws Throwable{String password;password="Password1234!";mainPrivate=true;mainSink(password);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{byte data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;while(true){data=2;break;}HashSet intHashSet=new HashSet(data);}
private void main()throws Throwable{int data=(new b()).mainSource();HashSet intHashSet=new HashSet(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource();Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;if(data!=null){try{connection=DriverManager.getConnection("data-url","root",data);preparedStatement=connection.prepareStatement("select * from test_table");resultSet=preparedStatement.executeQuery();}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=System.getProperty("user.home");mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{int data;while(true){data=100;break;}while(true){int array[]={0,1,2,3,4};if(data >=0 && data < array.length){array[data]=42;}else{IO.writeLine("Array index out of bounds");}break;}}
private void main()throws Throwable{int count;while(true){count=2;break;}while(true){File file=new File("badSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{byte data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data="foo";(new b()).mainSink(request,response);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{int data;mainPublicStatic=true;data=(new b()).mainSource();{IO.writeLine((byte)data);}}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String data;data="foo";if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();for(int i=0;i < names.length;i++){sqlStatement.addBatch("update users set hitcount=hitcount+1 where name='"+names[i]+"'");}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statament",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=mainSource(request,response);if(data!=null){response.getWriter().println("<br>bad()-<img src=\""+data+"\">");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}break;}while(true){if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.addHeader("Location","/author.jsp?lang="+data);}break;}}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int count;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(count);}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data=0;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;count=2;Vector<Integer> countVector=new Vector<Integer>(5);countVector.add(0,count);countVector.add(1,count);countVector.add(2,count);(new b()).mainSink(countVector,request,response);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{int count;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}countGoodB2G=count;mainSink();}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;PreparedStatement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("select * from users where name=?");sqlStatement.setString(1,data);resultSet=sqlStatement.executeQuery();}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data=(new b()).mainSource();IO.writeLine("100%"+data+"="+(100 % data)+"\n");}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data;mainPublicStatic=true;data=(new b()).mainSource();{IO.writeLine((byte)data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=true;data=main_source(request,response);if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String data=(new b()).mainSource();Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();int rowCount=sqlStatement.executeUpdate("insert into users(status)values('updated')where name='"+data+"'");IO.writeLine("Updated "+rowCount+" rows successfully.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int data=(new b()).mainSource();data--;int result=(int)(data);IO.writeLine("result: "+result);}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{String data;while(true){data="foo";break;}while(true){if(data!=null){System.out.printf(data);}break;}}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int count;count=2;Container countContainer=new Container();countContainer.containerOne=count;(new b()).mainSink(countContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{float data;while(true){{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}break;}while(true){if(Math.abs(data)> 0.000001){int result=(int)(100.0 % data);IO.writeLine(result);}else{IO.writeLine("This would result in a modulo by zero");}break;}}
private void main()throws Throwable{String data=(new b()).mainSource();Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name='"+data+"'");Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{int data=0;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{String data;main_private=true;data=main_source();Connection dbConnection=null;try{dbConnection=IO.getDBConnection();dbConnection.setCatalog(data);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{int data;data=Integer.MAX_VALUE;dataGoodB2G=data;mainSink();}
private void main()throws Throwable{short data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;ArrayList intArrayList=new ArrayList(data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading count from cookie",exceptNumberFormat);}}}mainPrivate=true;mainSink(count,request,response);}
private void main()throws Throwable{int data;while(true){data=2;break;}HashSet intHashSet=new HashSet(data);}
private void main()throws Throwable{int data;data=Integer.MIN_VALUE;mainPrivate=true;mainSink(data);}
private int mainSource()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private String mainSource()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}return data;}
private void main()throws Throwable{short data;data=2;short[] dataArray=new short[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{String data;mainPublicStatic=false;data=(new b()).mainSource();String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}
private void main()throws Throwable{String data;data="5";(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{float data;data=2.0f;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String password=null;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(password);}
private void main()throws Throwable{int data=(new b()).mainSource();if(data > Integer.MIN_VALUE){int result=(int)(--data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}
private void main()throws Throwable{int count;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Vector<Integer> countVector=new Vector<Integer>(5);countVector.add(0,count);countVector.add(1,count);countVector.add(2,count);(new b()).mainSink(countVector);}
private void main()throws Throwable{byte data=0;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{short data;mainPublicStatic=true;data=(new b()).mainSource();{IO.writeLine((byte)data);}}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{float data;data=2.0f;(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;HashMap intHashMap=new HashMap(data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=true;data=main_source(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data);}}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("CWE690");return data;}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{while(true){try{throw new UnsupportedOperationException();}catch(UnsupportedOperationException exceptUnsupportedOperation){}break;}}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}dataGoodB2G=data;mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=(new b()).mainSource(request,response);if(data!=0){IO.writeLine("100/"+data+"="+(100/data)+"\n");}else{IO.writeLine("This would result in a divide by zero");}}
private void main()throws Throwable{float dataCopy;{float data;data=2.0f;dataCopy=data;}{float data=dataCopy;int result=(int)(100.0/data);IO.writeLine(result);}}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{int count;count=2;mainSink(count);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private String mainSource()throws Throwable{String password;Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);password=properties.getProperty("password");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}{Cipher aesCipher=Cipher.getInstance("AES");SecretKeySpec secretKeySpec=new SecretKeySpec("ABCDEFGHABCDEFGH".getBytes("UTF-8"),"AES");aesCipher.init(Cipher.DECRYPT_MODE,secretKeySpec);String decryptedPassword=new String(aesCipher.doFinal(password.getBytes("UTF-8")),"UTF-8");password=decryptedPassword;}return password;}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();LinkedList<Long> dataLinkedList=new LinkedList<Long>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String data;while(true){{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}break;}while(true){String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=StringEscapeUtils.escapeXml(tokens[0]);String password=StringEscapeUtils.escapeXml(tokens[1]);XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}break;}}
private void main()throws Throwable{int dataCopy;{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataCopy=data;}{int data=dataCopy;if(data > Integer.MIN_VALUE){int result=(int)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}}}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink(data);}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{short data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}int array[]=null;if(data > 0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{byte data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{short data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();Boolean result=sqlStatement.execute("insert into users(status)values('updated')where name='"+data+"'");if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{int data;data=-1;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String data;data="Testing.test";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String password;password="Password1234!";if(password!=null){PasswordAuthentication credentials=new PasswordAuthentication("user",password.toCharArray());IO.writeLine(credentials.toString());}}
private void main()throws Throwable{int count;count=(new SecureRandom()).nextInt();(new b()).mainSink((Object)count);}
private void main()throws Throwable{byte data;while(true){data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){{if(data <(Byte.MAX_VALUE/2)){byte result=(byte)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform multiplication.");}}break;}}
private void main()throws Throwable{int count;count=2;mainPrivate=true;mainSink(count);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int count;count=2;int i=0;for(i=0;i < count;i++){IO.writeLine("Hello");}}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;main_private=true;data=main_source();Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;data--;int result=(int)(data);IO.writeLine("result: "+result);}
private void main()throws Throwable{{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink();}
private void main()throws Throwable{String data;main_private=false;data=main_source();String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{float data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}LinkedList<Float> dataLinkedList=new LinkedList<Float>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String password;while(true){password="Password1234!";break;}while(true){if(password!=null){PasswordAuthentication credentials=new PasswordAuthentication("user",password.toCharArray());IO.writeLine(credentials.toString());}break;}}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{String data;while(true){data="5";break;}while(true){int numberOfLoops;try{numberOfLoops=Integer.parseInt(data);}catch(NumberFormatException exceptNumberFormat){IO.writeLine("Invalid response. Numeric input expected. Assuming 1.");numberOfLoops=1;}for(int i=0;i < numberOfLoops;i++){IO.writeLine("hello world");}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink(request,response);}
private void main()throws Throwable{float data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}LinkedList<Float> dataLinkedList=new LinkedList<Float>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private String mainSource()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}return data;}
private void main()throws Throwable{long data;data=Long.MIN_VALUE;LinkedList<Long> dataLinkedList=new LinkedList<Long>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int dataCopy;{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataCopy=data;}{int data=dataCopy;{if(data >(Integer.MIN_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform multiplication.");}}}}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;data=CWE690_NULL_Deref_From_Return__Class_Helper.getStringBad();(new b()).mainSink(data);}
private void main()throws Throwable{short data;data=Short.MIN_VALUE;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{short data;while(true){data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);break;}while(true){if(data > Short.MIN_VALUE){short result=(short)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}break;}}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main()throws Throwable{short data;while(true){data=2;break;}{IO.writeLine((byte)data);}}
private void main()throws Throwable{short data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{short data;data=2;short[] dataArray=new short[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{String data;data=System.getProperty("CWE690");Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data="foo";(new b()).mainSink(request,response);}
private void main()throws Throwable{float data;data=2.0f;float[] dataArray=new float[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;data=System.getenv("ADD");Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{short data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="foo";break;}while(true){Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name='"+data+"'");Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}break;}}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{int data;(new b()).mainSink(data);}
private void main()throws Throwable{int count=0;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(count);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{byte data;data=2;byte[] dataArray=new byte[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=(new b()).mainSource(request,response);int array[]=null;if(data >=0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}
private float mainSource()throws Throwable{float data;SecureRandom secureRandom=new SecureRandom();data=secureRandom.nextFloat();return data;}
private void main()throws Throwable{StringBuilder data;data=null;mainPrivate=true;mainSink(data);}
private int mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=tokens[0];String password=tokens[1];XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}
private void main()throws Throwable{long data;data=Long.MAX_VALUE;(new b()).mainSink(data);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){{int result=(int)(data * 2);IO.writeLine("result: "+result);}break;}}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{long data=0L;data=(new java.security.SecureRandom()).nextLong();mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data=System.getenv("ADD");mainPrivate=true;mainSink(data);}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();long[] dataArray=new long[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}if(data!=null){System.out.printf("%s%n",data);}}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;while(true){data="foo";break;}Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]={0,1,2,3,4};IO.writeLine(array[data]);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="foo";break;}if(data!=null){response.getWriter().println("<br>bad(): data="+data);}}
private void main()throws Throwable{short data;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);mainPrivate=false;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{byte dataCopy;{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);dataCopy=data;}{byte data=dataCopy;{if(data >(Byte.MIN_VALUE/2)){byte result=(byte)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform multiplication.");}}}}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}int array[]={0,1,2,3,4};if(data >=0 && data < array.length){array[data]=42;}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int count;count=2;(new b()).mainSink(count);}
private void main()throws Throwable{float data;Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{String data=null;data=System.getProperty("user.home");mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data=null;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataGoodB2G=data;mainSink(request,response);}
private void main()throws Throwable{long data=0L;data=Long.MIN_VALUE;mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{byte data;data=2;(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;count=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(count);byte[] countSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(countSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=StringEscapeUtils.escapeXml(tokens[0]);String password=StringEscapeUtils.escapeXml(tokens[1]);XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}
private void main()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;while(true){data=2;break;}{IO.writeLine((byte)data);}}
private void main()throws Throwable{String password=(new b()).mainSource();if(password!=null){{Cipher aesCipher=Cipher.getInstance("AES");SecretKeySpec secretKeySpec=new SecretKeySpec("ABCDEFGHABCDEFGH".getBytes("UTF-8"),"AES");aesCipher.init(Cipher.DECRYPT_MODE,secretKeySpec);password=new String(aesCipher.doFinal(password.getBytes("UTF-8")),"UTF-8");}PasswordAuthentication credentials=new PasswordAuthentication("user",password.toCharArray());IO.writeLine(credentials.toString());}}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{byte data;data=Byte.MIN_VALUE;(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=System.getProperty("user.home");dataGoodB2G=data;mainSink(request,response);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int count;count=2;File file=new File("badSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{int countCopy;{int count;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}countCopy=count;}{int count=countCopy;int i=0;if(count > 0 && count <=20){for(i=0;i < count;i++){IO.writeLine("Hello");}}}}
private void main()throws Throwable{int data;mainPublicStatic=true;data=(new b()).mainSource();ArrayList intArrayList=new ArrayList(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.setHeader("Location","/author.jsp?lang="+data);}}
private void main()throws Throwable{short data;data=2;LinkedList<Short> dataLinkedList=new LinkedList<Short>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String dataCopy;{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{String data;data=System.getProperty("user.home");String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]={0,1,2,3,4};array[data]=42;}
private void main()throws Throwable{float data;data=2.0f;float[] dataArray=new float[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=false;data=main_source(request,response);if(data!=null){*/URI uri;try{uri=new URI(data);}catch(URISyntaxException exceptURISyntax){response.getWriter().write("Invalid redirect URL");return;}response.sendRedirect(data);return;}}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}break;}while(true){if((data!=Integer.MIN_VALUE)&&(data!=Long.MIN_VALUE)&&(Math.abs(data)<=(long)Math.sqrt(Integer.MAX_VALUE))){int result=(int)(data * data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform squaring.");}break;}}
private void main()throws Throwable{int data=0;data=(new SecureRandom()).nextInt();mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{float data;Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private String mainSource()throws Throwable{String data;data=System.getProperty("user.home");return data;}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private float mainSource()throws Throwable{float data;data=2.0f;return data;}
private void main()throws Throwable{short data;data=2;HashMap<Integer,Short> dataHashMap=new HashMap<Integer,Short>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private int mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink(data);}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;count=2;(new b()).mainSink((Object)count,request,response);}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{long data;data=2;LinkedList<Long> dataLinkedList=new LinkedList<Long>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int count;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}Container countContainer=new Container();countContainer.containerOne=count;(new b()).mainSink(countContainer);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{if(IO.staticReturnsTrueOrFalse()){final String CIPHER_INPUT="ABCDEFG123456";KeyGenerator keyGenerator=KeyGenerator.getInstance("AES");keyGenerator.init(128);SecretKey secretKey=keyGenerator.generateKey();byte[] byteKey=secretKey.getEncoded();SecretKeySpec secretKeySpec=new SecretKeySpec(byteKey,"AES");Cipher aesCipher=Cipher.getInstance("AES");aesCipher.init(Cipher.ENCRYPT_MODE,secretKeySpec);byte[] encrypted=aesCipher.doFinal(CIPHER_INPUT.getBytes("UTF-8"));IO.writeLine(IO.toHex(encrypted));}else{final String CIPHER_INPUT="ABCDEFG123456";KeyGenerator keyGenerator=KeyGenerator.getInstance("AES");keyGenerator.init(128);SecretKey secretKey=keyGenerator.generateKey();byte[] byteKey=secretKey.getEncoded();SecretKeySpec secretKeySpec=new SecretKeySpec(byteKey,"AES");Cipher aesCipher=Cipher.getInstance("AES");aesCipher.init(Cipher.ENCRYPT_MODE,secretKeySpec);byte[] encrypted=aesCipher.doFinal(CIPHER_INPUT.getBytes("UTF-8"));IO.writeLine(IO.toHex(encrypted));}}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink(data);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{if(IO.staticReturnsTrueOrFalse()){Calendar calendarNow=Calendar.getInstance();Calendar calendarCheck=Calendar.getInstance();calendarCheck.set(2020,1,1);if(calendarNow.after(calendarCheck)){IO.writeLine("Sorry,your license has expired. Please contact support.");}}else{Calendar calendarNow=Calendar.getInstance();Calendar calendarCheck=Calendar.getInstance();calendarCheck.set(2020,1,1);if(calendarNow.after(calendarCheck)){IO.writeLine("Sorry,your license has expired. Please contact support.");}}}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{byte data;data=2;Vector<Byte> dataVector=new Vector<Byte>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=Integer.MIN_VALUE;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="5";break;}while(true){int numberOfLoops;try{numberOfLoops=Integer.parseInt(data);}catch(NumberFormatException exceptNumberFormat){IO.writeLine("Invalid response. Numeric input expected. Assuming 1.");numberOfLoops=1;}for(int i=0;i < numberOfLoops;i++){IO.writeLine("hello world");}break;}}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink(data);}
private int mainSource()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;{String stringNumber=request.getParameter("name");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading count from parameter 'name'",exceptNumberFormat);}}Container countContainer=new Container();countContainer.containerOne=count;(new b()).mainSink(countContainer,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){data=2;break;}HashMap intHashMap=new HashMap(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;PasswordAuthentication credentials=new PasswordAuthentication("user","BP@ssw0rd".toCharArray());data=credentials.getUserName()+":"+(new String(credentials.getPassword()));Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{int dataCopy;{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataCopy=data;}{int data=dataCopy;int array[]=null;if(data > 0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}}
private int mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main()throws Throwable{short data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{short data;data=2;{short result=(short)(data * 2);IO.writeLine("result: "+result);}}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{byte data;data=2;byte[] dataArray=new byte[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;data="5";int numberOfLoops;try{numberOfLoops=Integer.parseInt(data);}catch(NumberFormatException exceptNumberFormat){IO.writeLine("Invalid response. Numeric input expected. Assuming 1.");numberOfLoops=1;}for(int i=0;i < numberOfLoops;i++){IO.writeLine("hello world");}}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{count=Integer.MAX_VALUE;(new b()).mainSink();}
private void main()throws Throwable{String data;data="foo";Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();int rowCount=sqlStatement.executeUpdate("insert into users(status)values('updated')where name='"+data+"'");IO.writeLine("Updated "+rowCount+" rows successfully.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private short mainSource()throws Throwable{short data;data=2;return data;}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{while(true){Calendar calendarNow=Calendar.getInstance();Calendar calendarCheck=Calendar.getInstance();calendarCheck.set(2020,1,1);if(calendarNow.after(calendarCheck)){IO.writeLine("Sorry,your license has expired. Please contact support.");}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=false;data=(new b()).mainSource(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data.replaceAll("(<script>)",""));}}
private void main()throws Throwable{int dataCopy;{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataCopy=data;}{int data=dataCopy;if(data > Integer.MIN_VALUE){int result=(int)(--data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();mainPrivate=true;mainSink(data);}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main()throws Throwable{String data;data="foo";mainSink(data);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{short data;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);HashMap<Integer,Short> dataHashMap=new HashMap<Integer,Short>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};IO.writeLine(array[data]);}}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data=System.getProperty("CWE690");(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int [] data;data=null;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;main_private=true;data=main_source();ArrayList intArrayList=new ArrayList(data);}
private void main()throws Throwable{int count;count=Integer.MAX_VALUE;mainSink(count);}
private void main()throws Throwable{String data;data="5";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;data=System.getenv("ADD");mainSink(data);}
private String mainSource()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return data;}
private void main()throws Throwable{String password;Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);password=properties.getProperty("password");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}Vector<String> passwordVector=new Vector<String>(5);passwordVector.add(0,password);passwordVector.add(1,password);passwordVector.add(2,password);(new b()).mainSink(passwordVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private int mainSource()throws Throwable{int count;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}return count;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{long data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String dataCopy;{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;PreparedStatement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("select * from users where name=?");sqlStatement.setString(1,data);resultSet=sqlStatement.executeQuery();}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int count;while(true){count=2;break;}while(true){Thread.sleep(count);break;}}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;data=System.getenv("ADD");HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.addHeader("Location","/author.jsp?lang="+data);}}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{count=2;(new b()).mainSink();}
private int mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int count;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPrivate=true;mainSink(count);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main()throws Throwable{long data;while(true){data=5L;break;}while(true){IO.writeLine(""+data);break;}}
private void main()throws Throwable{int data=(new b()).mainSource();IO.writeLine("bad: 100/"+data+"="+(100/data)+"\n");}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{long data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{float data;float[] dataArray=new float[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}break;}while(true){{if(data <(Integer.MAX_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform multiplication.");}}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){response.getWriter().println("<br>bad()-<img src=\""+data+"\">");}}}
private void main()throws Throwable{int count;count=2;HashMap<Integer,Integer> countHashMap=new HashMap<Integer,Integer>();countHashMap.put(0,count);countHashMap.put(1,count);countHashMap.put(2,count);(new b()).mainSink(countHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{short data=(new b()).mainSource();{if(data <(Short.MAX_VALUE/2)){short result=(short)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform multiplication.");}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=System.getenv("ADD");ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{short data;data=2;Vector<Short> dataVector=new Vector<Short>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int count;count=2;countGoodG2B=count;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;while(true){break;}while(true){if(data!=0){IO.writeLine("100/"+data+"="+(100/data)+"\n");}else{IO.writeLine("This would result in a divide by zero");}break;}}
private void main()throws Throwable{byte data=(new b()).mainSource();if(data > Byte.MIN_VALUE){byte result=(byte)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}}
private void main()throws Throwable{int data=0;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{float data=0.0f;SecureRandom secureRandom=new SecureRandom();data=secureRandom.nextFloat();mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{byte data;data=2;mainSink(data);}
private void main()throws Throwable{short data;data=Short.MIN_VALUE;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{long data;data=2;long[] dataArray=new long[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{int data=0;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{if(IO.staticReturnsTrueOrFalse()){FileOutputStream streamFileOutput=null;try{String path="C:\\test_good.txt";File file=new File(path);streamFileOutput=new FileOutputStream(file);streamFileOutput.write("This is a new line".getBytes("UTF-8"));}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"File I/O error",exceptIO);}finally{try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}}}else{FileOutputStream streamFileOutput=null;try{String path="C:\\test_good.txt";File file=new File(path);streamFileOutput=new FileOutputStream(file);streamFileOutput.write("This is a new line".getBytes("UTF-8"));}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"File I/O error",exceptIO);}finally{try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}}}}
private void main()throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;count=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(count);byte[] countSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(countSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="Testing.test";break;}Class<?> tempClass=Class.forName(data);Object tempClassObject=tempClass.newInstance();}
private void main()throws Throwable{byte data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink(request,response);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]={0,1,2,3,4};IO.writeLine(array[data]);}
private void main()throws Throwable{String data=(new b()).mainSource();if(data!=null){System.out.printf(data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;ArrayList intArrayList=new ArrayList(data);}}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);(new b()).mainSink(data);}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";return data;}
private void main()throws Throwable{String password=(new b()).mainSource();Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=DriverManager.getConnection("data-url","root",password);preparedStatement=connection.prepareStatement("select * from test_table");resultSet=preparedStatement.executeQuery();}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{String data=(new b()).mainSource();if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("update users set hitcount=hitcount+1 where name=?");for(int i=0;i < names.length;i++){sqlStatement.setString(1,names[i]);sqlStatement.addBatch();}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{String data;data=System.getProperty("user.home");mainSink(data);}
private void main()throws Throwable{String password;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPrivate=false;mainSink(password);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;main_private=true;data=main_source();String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{byte data;data=2;byte[] dataArray=new byte[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;data="foo";mainSink(data);}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{count=2;(new b()).mainSink();}
private void main()throws Throwable{String data;data="foo";String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{long dataCopy;{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataCopy=data;}{long data=dataCopy;if(data > Long.MIN_VALUE){long result=(long)(--data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}}
private void main()throws Throwable{String data=(new b()).mainSource();Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data=0;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int count;while(true){{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){if(count > 0 && count <=20){File file=new File("goodSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}}break;}}
private void main()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{float data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=false;data=main_source(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data.replaceAll("(<script>)",""));}}
private String mainSource()throws Throwable{String password;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}return password;}
private void main()throws Throwable{int count;count=Integer.MAX_VALUE;mainPrivate=true;mainSink(count);}
private void main()throws Throwable{int count;count=2;mainPrivate=true;mainSink(count);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;try{dbConnection=IO.getDBConnection();dbConnection.setCatalog(data);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{String data;data="foo";String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=mainSource(request,response);if(data!=null){response.getWriter().println("<br>bad()-<img src=\""+data+"\">");}}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{short data;data=2;LinkedList<Short> dataLinkedList=new LinkedList<Short>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;try{dbConnection=IO.getDBConnection();dbConnection.setCatalog(data);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{String data;data="5";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]=null;if(data > 0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}
private void main()throws Throwable{String data;data=System.getenv("ADD");dataGoodB2G=data;mainSink();}
private void main()throws Throwable{int count;{String stringNumber=System.getProperty("user.home");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(count);byte[] countSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(countSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int countCopy;{int count;count=Integer.MAX_VALUE;countCopy=count;}{int count=countCopy;if(count > 0 && count <=20){File file=new File("goodSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}}}}
private void main()throws Throwable{String data;while(true){data="foo";break;}while(true){Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name='"+data+"'");Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){response.getWriter().println("<br>bad(): data="+data);}}}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data=(new b()).mainSource();if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{int data=0;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}mainPrivate=false;mainSink(data,request,response);}
private void main()throws Throwable{int data=0;data=(new SecureRandom()).nextInt();mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{float data;data=2.0f;dataGoodG2B=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=(new b()).mainSource(request,response);int array[]=null;if(data > 0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();int result=(int)(data+1);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data=0;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}LinkedList<Long> dataLinkedList=new LinkedList<Long>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;IO.writeLine("bad: 100/"+data+"="+(100/data)+"\n");}}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();{int result=(int)(data * 2);IO.writeLine("result: "+result);}}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink((Object)data);}
private String mainSource()throws Throwable{String data;data=System.getenv("ADD");return data;}
private void main()throws Throwable{long data=0L;data=(new java.security.SecureRandom()).nextLong();mainPublicStatic=false;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=tokens[0];String password=tokens[1];XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}}
private void main()throws Throwable{long data;while(true){data=2;break;}while(true){{long result=(long)(data * 2);IO.writeLine("result: "+result);}break;}}
private void main()throws Throwable{float data;data=2.0f;(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data=0;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Connection dbConnection=null;PreparedStatement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("select * from users where name=?");sqlStatement.setString(1,data);resultSet=sqlStatement.executeQuery();}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{int data=0;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int count;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(count);byte[] countSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(countSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}{if(data >(Integer.MIN_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform multiplication.");}}}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{String password;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}HashMap<Integer,String> passwordHashMap=new HashMap<Integer,String>();passwordHashMap.put(0,password);passwordHashMap.put(1,password);passwordHashMap.put(2,password);(new b()).mainSink(passwordHashMap);}
private void main()throws Throwable{int data;while(true){data=2;break;}{IO.writeLine((short)data);}}
private void main()throws Throwable{int data;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="5";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main()throws Throwable{{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink();}
private void main()throws Throwable{byte dataCopy;{byte data;data=2;dataCopy=data;}{byte data=dataCopy;data--;byte result=(byte)(data);IO.writeLine("result: "+result);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}if(data!=0){IO.writeLine("100%"+data+"="+(100 % data)+"\n");}else{IO.writeLine("This would result in a modulo by zero");}}
private void main()throws Throwable{int data=mainSource();HashSet intHashSet=new HashSet(data);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="5";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]={0,1,2,3,4};IO.writeLine(array[data]);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String password;password="Password1234!";(new b()).mainSink((Object)password);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();if((data!=Integer.MIN_VALUE)&&(data!=Long.MIN_VALUE)&&(Math.abs(data)<=(long)Math.sqrt(Integer.MAX_VALUE))){int result=(int)(data * data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform squaring.");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{String password;password="Password1234!";mainSink(password);}
private void main()throws Throwable{int count;while(true){count=2;break;}while(true){File file=new File("badSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}break;}}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data=(new b()).mainSource();Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{short data;data=2;LinkedList<Short> dataLinkedList=new LinkedList<Short>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}break;}while(true){if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.setHeader("Location","/author.jsp?lang="+data);}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;int result=(int)(++data);IO.writeLine("result: "+result);}
private void main()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();for(int i=0;i < names.length;i++){sqlStatement.addBatch("update users set hitcount=hitcount+1 where name='"+names[i]+"'");}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statament",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}}
private void main()throws Throwable{String data;while(true){data="foo";break;}while(true){Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();int rowCount=sqlStatement.executeUpdate("insert into users(status)values('updated')where name='"+data+"'");IO.writeLine("Updated "+rowCount+" rows successfully.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}break;}}
private void main()throws Throwable{int count;count=2;(new b()).mainSink((Object)count);}
private void main()throws Throwable{short data;main_private=true;data=main_source();{IO.writeLine((byte)data);}}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,Byte> dataHashMap=new HashMap<Integer,Byte>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{float data;while(true){Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}break;}while(true){if(Math.abs(data)> 0.000001){int result=(int)(100.0 % data);IO.writeLine(result);}else{IO.writeLine("This would result in a modulo by zero");}break;}}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}LinkedList<Byte> dataLinkedList=new LinkedList<Byte>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data=null;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{float data;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data=0;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data=System.getProperty("CWE690");mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data=request.getParameter("CWE690");break;}while(true){if(data!=null){String stringTrimmed=data.trim();IO.writeLine(stringTrimmed);}break;}}
private void main()throws Throwable{String data;while(true){data="5";break;}while(true){int numberOfLoops;try{numberOfLoops=Integer.parseInt(data);}catch(NumberFormatException exceptNumberFormat){IO.writeLine("Invalid response. Numeric input expected. Assuming 1.");numberOfLoops=1;}for(int i=0;i < numberOfLoops;i++){IO.writeLine("hello world");}break;}}
private void main()throws Throwable{int data=0;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{int data;while(true){{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}break;}while(true){{if(data <(Integer.MAX_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform multiplication.");}}break;}}
private String mainSource()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}return data;}
private void main()throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;while(true){data=System.getProperty("CWE690");break;}while(true){if(data!=null){String stringTrimmed=data.trim();IO.writeLine(stringTrimmed);}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}dataGoodB2G=data;mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;int array[]={0,1,2,3,4};array[data]=42;}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int count;count=2;(new b()).mainSink((Object)count);}
private void main()throws Throwable{String data=null;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{byte data;while(true){data=Byte.MIN_VALUE;break;}while(true){if(data > Byte.MIN_VALUE){byte result=(byte)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}break;}}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]=null;if(data >=0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;ArrayList intArrayList=new ArrayList(data);}}
private void main()throws Throwable{String data;data="5";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}LinkedList<Byte> dataLinkedList=new LinkedList<Byte>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{byte data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{data="CWE690";(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data="foo";(new b()).mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int count;{String stringNumber=System.getProperty("user.home");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}Vector<Integer> countVector=new Vector<Integer>(5);countVector.add(0,count);countVector.add(1,count);countVector.add(2,count);(new b()).mainSink(countVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){response.setHeader("Location","/author.jsp?lang="+data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data);}}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{int data;while(true){data=2;break;}{IO.writeLine((short)data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();HashMap intHashMap=new HashMap(data);}
private void main()throws Throwable{int count;while(true){count=2;break;}while(true){Thread.sleep(count);break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};array[data]=42;}}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";if(data!=null){response.getWriter().println("<br>bad(): data="+data.replaceAll("(<script>)",""));}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{byte data;data=Byte.MAX_VALUE;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{long data;data=2;HashMap<Integer,Long> dataHashMap=new HashMap<Integer,Long>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int count=0;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(count);}
private void main()throws Throwable{int data=(new b()).mainSource();if(data < Integer.MAX_VALUE){int result=(int)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count=0;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}mainPublicStatic=false;(new b()).mainSink(count,request,response);}
private void main()throws Throwable{String data;data="5";(new b()).mainSink(data);}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{short dataCopy;{short data;data=2;dataCopy=data;}{short data=dataCopy;{short result=(short)(data * 2);IO.writeLine("result: "+result);}}}
private void main()throws Throwable{String data;main_private=true;data=main_source();String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){response.addHeader("Location","/author.jsp?lang="+data);}}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int array[]={0,1,2,3,4};IO.writeLine(array[data]);break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count=(new b()).mainSource(request,response);if(count > 0 && count <=20){File file=new File("goodSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){IO.writeLine("bad: 100/"+data+"="+(100/data)+"\n");break;}}
private void main()throws Throwable{int data=0;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String dataCopy;{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataCopy=data;}{String data=dataCopy;String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=StringEscapeUtils.escapeXml(tokens[0]);String password=StringEscapeUtils.escapeXml(tokens[1]);XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data=2;(new b()).mainSink(request,response);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int count;count=(new SecureRandom()).nextInt();HashMap<Integer,Integer> countHashMap=new HashMap<Integer,Integer>();countHashMap.put(0,count);countHashMap.put(1,count);countHashMap.put(2,count);(new b()).mainSink(countHashMap);}
private void main()throws Throwable{float dataCopy;{float data;{String stringNumber=System.getProperty("user.home");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}dataCopy=data;}{float data=dataCopy;if(Math.abs(data)> 0.000001){int result=(int)(100.0/data);IO.writeLine(result);}else{IO.writeLine("This would result in a divide by zero");}}}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=true;data=main_source(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data.replaceAll("(<script>)",""));}}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{byte data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{long data=0L;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String dataCopy;{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{long data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}int array[]={0,1,2,3,4};if(data >=0 && data < array.length){array[data]=42;}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{int data;mainPublicStatic=false;data=(new b()).mainSource();{IO.writeLine((byte)data);}}
private void main()throws Throwable{long data;data=2;Vector<Long> dataVector=new Vector<Long>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();dataGoodB2G=data;mainSink();}
private void main()throws Throwable{password="Password1234!";(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int count;count=2;countGoodG2B=count;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data=2;(new b()).mainSink(request,response);}
private void main()throws Throwable{short dataCopy;{short data;data=2;dataCopy=data;}{short data=dataCopy;{IO.writeLine((byte)data);}}}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;int result=(int)(data-1);IO.writeLine("result: "+result);}
private void main()throws Throwable{String data=null;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{while(true){try{}{IO.writeLine("Caught Exception");}break;}}
private void main()throws Throwable{long data;while(true){data=Long.MIN_VALUE;break;}while(true){if(data > Long.MIN_VALUE){data--;long result=(long)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}break;}}
private void main()throws Throwable{data=2.0f;(new b()).mainSink();}
private void main()throws Throwable{String data;data="foo";if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private String mainSource()throws Throwable{String data;data="foo";return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;int array[]=null;if(data >=0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;mainPublicStatic=false;data=(new b()).mainSource(request,response);ArrayList intArrayList=new ArrayList(data);}
private void main()throws Throwable{float data;SecureRandom secureRandom=new SecureRandom();data=secureRandom.nextFloat();ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{String data;data="Testing.test";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int dataCopy;{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}dataCopy=data;}{int data=dataCopy;if(data > Integer.MIN_VALUE){int result=(int)(--data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}}
private float mainSource()throws Throwable{float data;data=2.0f;return data;}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=false;data=main_source(request,response);Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{String dataCopy;{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{int count;while(true){count=2;break;}while(true){int i=0;for(i=0;i < count;i++){IO.writeLine("Hello");}break;}}
private void main()throws Throwable{float data;data=2.0f;int result=(int)(100.0/data);IO.writeLine(result);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("CWE690");mainPrivate=false;mainSink(data,request,response);}
private void main()throws Throwable{byte data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();for(int i=0;i < names.length;i++){sqlStatement.addBatch("update users set hitcount=hitcount+1 where name='"+names[i]+"'");}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statament",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int count;count=Integer.MAX_VALUE;mainPrivate=true;mainSink(count);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}dataGoodB2G=data;mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}mainSink(data,request,response);}
private void main()throws Throwable{byte data;data=Byte.MAX_VALUE;(new b()).mainSink(data);}
private void main()throws Throwable{short data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;{int result=(int)(data * 2);IO.writeLine("result: "+result);}}}
private void main()throws Throwable{byte dataCopy;{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);dataCopy=data;}{byte data=dataCopy;if(data > Byte.MIN_VALUE){data--;byte result=(byte)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{byte data=(new b()).mainSource();byte result=(byte)(data+1);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;(new b()).mainSink((Object)data);}
private void main()throws Throwable{byte data;data=2;byte[] dataArray=new byte[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{if(IO.staticReturnsTrueOrFalse()){IO.writeLine("Hello from good()");}else{IO.writeLine("Hello from good()");}}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}(new b()).mainSink(data);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int [] data;while(true){data=null;break;}while(true){if(data!=null){IO.writeLine(""+data.length);}else{IO.writeLine("data is null");}break;}}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;IO.writeLine("100%"+data+"="+(100 % data)+"\n");}}
private void main()throws Throwable{long data;data=2;long result=(long)(data-1);IO.writeLine("result: "+result);}
private void main()throws Throwable{short data;data=Short.MIN_VALUE;if(data > Short.MIN_VALUE){short result=(short)(--data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{data=100;(new b()).mainSink();}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private int mainSource()throws Throwable{int count;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return count;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="10";dataGoodG2B=data;mainSink(request,response);}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}HashMap<Integer,Integer> countHashMap=new HashMap<Integer,Integer>();countHashMap.put(0,count);countHashMap.put(1,count);countHashMap.put(2,count);(new b()).mainSink(countHashMap,request,response);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{short data;data=2;data--;short result=(short)(data);IO.writeLine("result: "+result);}
private void main()throws Throwable{data=100;(new b()).mainSink();}
private void main()throws Throwable{int data;data=2;IO.writeLine("bad: 100/"+data+"="+(100/data)+"\n");}
private void main()throws Throwable{byte data;data=2;Vector<Byte> dataVector=new Vector<Byte>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{float data;data=2.0f;mainSink(data);}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{byte data;data=Byte.MIN_VALUE;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String data;data=System.getenv("ADD");ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}if(data > Integer.MIN_VALUE){int result=(int)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{String data;main_private=false;data=main_source();String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainSink(data);}
private int mainSource()throws Throwable{int data;return data;}
private void main()throws Throwable{int dataCopy;{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}dataCopy=data;}{int data=dataCopy;{if(data <(Integer.MAX_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform multiplication.");}}}}
private String mainSource()throws Throwable{String data;data="foo";return data;}
private void main()throws Throwable{long dataCopy;{long data;data=2;dataCopy=data;}{long data=dataCopy;{long result=(long)(data * 2);IO.writeLine("result: "+result);}}}
private void main()throws Throwable{String data;main_private=false;data=main_source();String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{long data;data=2;LinkedList<Long> dataLinkedList=new LinkedList<Long>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data=mainSource();HashSet intHashSet=new HashSet(data);}
private void main()throws Throwable{long data;data=Long.MAX_VALUE;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{String data;data="Testing.test";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private short mainSource()throws Throwable{short data;data=Short.MIN_VALUE;return data;}
private void main()throws Throwable{int count;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink((Object)count);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{if(IO.staticReturnsTrueOrFalse()){try{throw new UnsupportedOperationException();}catch(UnsupportedOperationException exceptUnsupportedOperation){}}else{try{throw new UnsupportedOperationException();}catch(UnsupportedOperationException exceptUnsupportedOperation){}}}
private void main()throws Throwable{{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private int mainSource()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}return data;}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private byte mainSource()throws Throwable{byte data;data=2;return data;}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";if(data!=null){System.out.printf(data);}}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{int count=0;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(count);}
private void main()throws Throwable{float data;{String stringNumber=System.getProperty("user.home");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{byte data;data=Byte.MAX_VALUE;LinkedList<Byte> dataLinkedList=new LinkedList<Byte>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{float data;data=2.0f;Vector<Float> dataVector=new Vector<Float>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=true;data=main_source(request,response);Class<?> tempClass=Class.forName(data);Object tempClassObject=tempClass.newInstance();}
private void main()throws Throwable{float data;data=2.0f;mainSink(data);}
private void main()throws Throwable{long data;while(true){data=2;break;}while(true){long result=(long)(++data);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name='"+data+"'");Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{String data=(new b()).mainSource();if(data!=null){System.out.printf("%s%n",data);}}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{String data;data="foo";if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();for(int i=0;i < names.length;i++){sqlStatement.addBatch("update users set hitcount=hitcount+1 where name='"+names[i]+"'");}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statament",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{int data;data=2;int result=(int)(data+1);IO.writeLine("result: "+result);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}mainSink(data,request,response);}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Vector<Long> dataVector=new Vector<Long>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String password;password="Password1234!";(new b()).mainSink((Object)password);}
private void main()throws Throwable{int data;data=2;{IO.writeLine((short)data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("CWE690");dataGoodB2G=data;mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;data=request.getParameter("name");mainPublicStatic=false;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{float data;data=2.0f;float[] dataArray=new float[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;while(true){data=2;break;}{IO.writeLine((byte)data);}}
private void main()throws Throwable{int count;count=2;Vector<Integer> countVector=new Vector<Integer>(5);countVector.add(0,count);countVector.add(1,count);countVector.add(2,count);(new b()).mainSink(countVector);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{int data;data=Integer.MAX_VALUE;mainPrivate=false;mainSink(data);}
private String mainSource()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}return data;}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainSink(data,request,response);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");mainSink(data,request,response);}
private void main()throws Throwable{String data;data="5";(new b()).mainSink((Object)data);}
private void main()throws Throwable{data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{String data;mainPublicStatic=false;data=(new b()).mainSource();Class<?> tempClass=Class.forName(data);Object tempClassObject=tempClass.newInstance();}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]={0,1,2,3,4};if(data >=0 && data < array.length){array[data]=42;}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{int count;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,Integer> countHashMap=new HashMap<Integer,Integer>();countHashMap.put(0,count);countHashMap.put(1,count);countHashMap.put(2,count);(new b()).mainSink(countHashMap);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}mainPrivate=false;mainSink(data,request,response);}
private void main()throws Throwable{byte data;data=Byte.MAX_VALUE;dataGoodB2G=data;mainSink();}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();mainPrivate=false;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data=2;(new b()).mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="10";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private String mainSource()throws Throwable{String data;data="foo";return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");mainPrivate=true;mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data=request.getParameter("name");(new b()).mainSink(request,response);}
private void main()throws Throwable{int count;count=2;Container countContainer=new Container();countContainer.containerOne=count;(new b()).mainSink(countContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{int count;count=(new SecureRandom()).nextInt();mainSink(count);}
private void main()throws Throwable{String data;while(true){{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}break;}while(true){Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);int rowCount=sqlStatement.executeUpdate();IO.writeLine("Updated "+rowCount+" rows successfully.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}(new b()).mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){data=2;break;}while(true){data--;int result=(int)(data);IO.writeLine("result: "+result);break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}(new b()).mainSink(request,response);}
private void main()throws Throwable{int data;data=-1;mainSink(data);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data=(new b()).mainSource();if((data!=Integer.MIN_VALUE)&&(data!=Long.MIN_VALUE)&&(Math.abs(data)<=(long)Math.sqrt(Integer.MAX_VALUE))){int result=(int)(data * data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform squaring.");}}
private void main()throws Throwable{String data;main_private=true;data=main_source();Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int count;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}int[] countArray=new int[5];countArray[2]=count;(new b()).mainSink(countArray);}
private void main()throws Throwable{float data=(new b()).mainSource();if(Math.abs(data)> 0.000001){int result=(int)(100.0/data);IO.writeLine(result);}else{IO.writeLine("This would result in a divide by zero");}}
private void main()throws Throwable{int count;count=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(count);byte[] countSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(countSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;data++;int result=(int)(data);IO.writeLine("result: "+result);}}
private int mainSource()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}return data;}
private void main()throws Throwable{short data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource();String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}
private void main()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{short data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{while(true){{String myString=null;myString="Hello";IO.writeLine(myString.length());myString="my,how I've changed";IO.writeLine(myString.length());}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{int count=0;count=2;mainPublicStatic=true;(new b()).mainSink(count);}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}if(data > Integer.MIN_VALUE){int result=(int)(--data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}
private void main()throws Throwable{byte data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{float data;SecureRandom secureRandom=new SecureRandom();data=secureRandom.nextFloat();mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main()throws Throwable{StringBuilder data=null;data=CWE690_NULL_Deref_From_Return__Class_Helper.getStringBuilderGood();mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}(new b()).mainSink();}
private void main()throws Throwable{short data=(new b()).mainSource();{IO.writeLine((byte)data);}}
private void main()throws Throwable{int count;count=Integer.MAX_VALUE;Vector<Integer> countVector=new Vector<Integer>(5);countVector.add(0,count);countVector.add(1,count);countVector.add(2,count);(new b()).mainSink(countVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{float data=0.0f;mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{String password;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}passwordGoodB2G=password;mainSink();}
private void main()throws Throwable{float data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(data);}
private StringBuilder mainSource()throws Throwable{StringBuilder data;data=CWE690_NULL_Deref_From_Return__Class_Helper.getStringBuilderGood();return data;}
private void main()throws Throwable{float data;while(true){break;}while(true){if(Math.abs(data)> 0.000001){int result=(int)(100.0 % data);IO.writeLine(result);}else{IO.writeLine("This would result in a modulo by zero");}break;}}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{data="Testing.test";(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{String password=(new b()).mainSource();if(password!=null){{Cipher aesCipher=Cipher.getInstance("AES");SecretKeySpec secretKeySpec=new SecretKeySpec("ABCDEFGHABCDEFGH".getBytes("UTF-8"),"AES");aesCipher.init(Cipher.DECRYPT_MODE,secretKeySpec);password=new String(aesCipher.doFinal(password.getBytes("UTF-8")),"UTF-8");}Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=DriverManager.getConnection("data-url","root",password);preparedStatement=connection.prepareStatement("select * from test_table");resultSet=preparedStatement.executeQuery();}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int dataCopy;{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;data++;int result=(int)(data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}{if(data >(Integer.MIN_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform multiplication.");}}}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String dataCopy;{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{byte data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{float data;{String stringNumber=System.getProperty("user.home");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}if(Math.abs(data)> 0.000001){int result=(int)(100.0/data);IO.writeLine(result);}else{IO.writeLine("This would result in a divide by zero");}}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();int rowCount=sqlStatement.executeUpdate("insert into users(status)values('updated')where name='"+data+"'");IO.writeLine("Updated "+rowCount+" rows successfully.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private int mainSource()throws Throwable{int count;count=2;return count;}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{byte data;data=Byte.MIN_VALUE;dataGoodB2G=data;mainSink();}
private void main()throws Throwable{short data;data=2;mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}dataCopy=data;}{int data=dataCopy;if(data < Integer.MAX_VALUE){int result=(int)(data+1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform addition.");}}}
private void main()throws Throwable{int data;data=2;int result=(int)(data+1);IO.writeLine("result: "+result);}
private int mainSource()throws Throwable{int count;count=Integer.MAX_VALUE;return count;}
private void main()throws Throwable{int count;while(true){{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}break;}while(true){if(count > 0 && count <=20){File file=new File("goodSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=true;data=main_source(request,response);if(data!=null){*/URI uri;try{uri=new URI(data);}catch(URISyntaxException exceptURISyntax){response.getWriter().write("Invalid redirect URL");return;}response.sendRedirect(data);return;}}
private String mainSource()throws Throwable{String data;data="foo";return data;}
private void main()throws Throwable{int count;count=2;mainPrivate=true;mainSink(count);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{while(true){response.getWriter().write("You cannot shut down this application,only the admin can");break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{long data=0L;data=(new java.security.SecureRandom()).nextLong();mainPublicStatic=true;(new b()).mainSink(data);}
private int mainSource()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return data;}
private void main()throws Throwable{short data;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);(new b()).mainSink(data);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{short data=(new b()).mainSource();data--;short result=(short)(data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data="foo";(new b()).mainSink(request,response);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{float data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data=null;data="5";mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data=request.getParameter("CWE690");break;}while(true){if("CWE690".equals(data)){IO.writeLine("data is CWE690");}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink(request,response);}
private void main()throws Throwable{String password;password="Password1234!";(new b()).mainSink((Object)password);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int count;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}countGoodB2G=count;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{float data;data=2.0f;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{byte data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=false;data=main_source(request,response);Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=(new b()).mainSource(request,response);int array[]=null;if(data >=0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{String password=(new b()).mainSource();if(password!=null){KerberosPrincipal principal=new KerberosPrincipal("test");{Cipher aesCipher=Cipher.getInstance("AES");SecretKeySpec secretKeySpec=new SecretKeySpec("ABCDEFGHABCDEFGH".getBytes("UTF-8"),"AES");aesCipher.init(Cipher.DECRYPT_MODE,secretKeySpec);password=new String(aesCipher.doFinal(password.getBytes("UTF-8")),"UTF-8");}KerberosKey key=new KerberosKey(principal,password.toCharArray(),null);IO.writeLine(key.toString());}}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}break;}while(true){if((data!=Integer.MIN_VALUE)&&(data!=Long.MIN_VALUE)&&(Math.abs(data)<=(long)Math.sqrt(Integer.MAX_VALUE))){int result=(int)(data * data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform squaring.");}break;}}
private void main()throws Throwable{long data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;main_private=false;data=main_source();HashSet intHashSet=new HashSet(data);}
private void main()throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int countCopy;{int count;count=(new SecureRandom()).nextInt();countCopy=count;}{int count=countCopy;if(count > 0 && count <=20){File file=new File("goodSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}}}}
private short mainSource()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return data;}
private void main()throws Throwable{String data=(new b()).mainSource();if(data!=null){System.out.printf(data);}}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main()throws Throwable{int count;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(count);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();{if(data <(Integer.MAX_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform multiplication.");}}}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;int result=(int)(data+1);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String password;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink((Object)password);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){*/URI uri;try{uri=new URI(data);}catch(URISyntaxException exceptURISyntax){response.getWriter().write("Invalid redirect URL");return;}response.sendRedirect(data);return;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main()throws Throwable{{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{int data;while(true){{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}break;}while(true){if(data > Integer.MIN_VALUE){data--;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}break;}}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){{int result=(int)(data * 2);IO.writeLine("result: "+result);}break;}}
private void main()throws Throwable{String data;mainPublicStatic=false;data=(new b()).mainSource();if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;data++;int result=(int)(data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=0;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}mainPublicStatic=false;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;data="This is not null";dataGoodG2B=data;mainSink();}
private String mainSource()throws Throwable{String data;data=System.getProperty("CWE690");return data;}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);int rowCount=sqlStatement.executeUpdate();IO.writeLine("Updated "+rowCount+" rows successfully.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int data;main_private=false;data=main_source();{IO.writeLine((byte)data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataGoodB2G=data;mainSink();}
private short mainSource()throws Throwable{short data;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{int data=mainSource();{IO.writeLine((byte)data);}}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}int numberOfLoops;try{numberOfLoops=Integer.parseInt(data);}catch(NumberFormatException exceptNumberFormat){IO.writeLine("Invalid response. Numeric input expected. Assuming 1.");numberOfLoops=1;}if(numberOfLoops >=0 && numberOfLoops <=5){for(int i=0;i < numberOfLoops;i++){IO.writeLine("hello world");}}}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();int rowCount=sqlStatement.executeUpdate("insert into users(status)values('updated')where name='"+data+"'");IO.writeLine("Updated "+rowCount+" rows successfully.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int result=(int)(--data);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{byte data;data=2;Vector<Byte> dataVector=new Vector<Byte>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=(new b()).mainSource(request,response);int result=(int)(++data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]={0,1,2,3,4};if(data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private long mainSource()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return data;}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;IO.writeLine("100%"+data+"="+(100 % data)+"\n");}}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{Integer dataCopy;{Integer data;data=Integer.valueOf(5);dataCopy=data;}{Integer data=dataCopy;IO.writeLine(""+data.toString());}}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{int data=(new b()).mainSource();if(data > Integer.MIN_VALUE){int result=(int)(--data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data=0;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{short data;data=2;(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";if(data!=null){response.setHeader("Location","/author.jsp?lang="+data);}}
private void main()throws Throwable{short data;data=2;Vector<Short> dataVector=new Vector<Short>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private float mainSource()throws Throwable{float data;return data;}
private void main()throws Throwable{int data;data=100;dataGoodB2G=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource(request,response);Class<?> tempClass=Class.forName(data);Object tempClassObject=tempClass.newInstance();}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int array[]=null;if(data >=0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,Long> dataHashMap=new HashMap<Integer,Long>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data="foo";(new b()).mainSink(request,response);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data;mainPublicStatic=false;data=(new b()).mainSource();Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{int count;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,Integer> countHashMap=new HashMap<Integer,Integer>();countHashMap.put(0,count);countHashMap.put(1,count);countHashMap.put(2,count);(new b()).mainSink(countHashMap);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private int mainSource()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return data;}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int array[]={0,1,2,3,4};if(data >=0){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="foo";break;}if(data!=null){response.getWriter().println("<br>bad(): data="+data);}}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private String mainSource()throws Throwable{String data;data="foo";return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{if(IO.staticReturnsTrueOrFalse()){String input="Test Input";MessageDigest messageDigest=MessageDigest.getInstance("SHA-512");IO.writeLine(IO.toHex(hashValue));}else{String input="Test Input";MessageDigest messageDigest=MessageDigest.getInstance("SHA-512");IO.writeLine(IO.toHex(hashValue));}}
private void main()throws Throwable{int data;data=2;{IO.writeLine((short)data);}}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink(request,response);}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,Long> dataHashMap=new HashMap<Integer,Long>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;while(true){data=2;break;}HashSet intHashSet=new HashSet(data);}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]=null;if(data > 0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}
private void main()throws Throwable{String data;while(true){{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){if(data!=null){System.out.printf("%s%n",data);}break;}}
private void main()throws Throwable{int count;while(true){count=2;break;}while(true){File file=new File("badSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}break;}}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{short data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int result=(int)(data-1);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{String data=mainSource();Connection dbConnection=null;try{dbConnection=IO.getDBConnection();dbConnection.setCatalog(data);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{byte data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}byte[] dataArray=new byte[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int count;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}int[] countArray=new int[5];countArray[2]=count;(new b()).mainSink(countArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="CWE690";break;}while(true){if(data.equals("CWE690")){IO.writeLine("data is CWE690");}break;}}
private void main()throws Throwable{String dataCopy;{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataCopy=data;}{String data=dataCopy;if(data!=null){System.out.printf("%s%n",data);}}}
private void main()throws Throwable{String data=(new b()).mainSource();if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();for(int i=0;i < names.length;i++){sqlStatement.addBatch("update users set hitcount=hitcount+1 where name='"+names[i]+"'");}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statament",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{long data;data=Long.MIN_VALUE;mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int count;count=2;mainSink(count);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=true;data=main_source(request,response);if(data!=null){*/URI uri;try{uri=new URI(data);}catch(URISyntaxException exceptURISyntax){response.getWriter().write("Invalid redirect URL");return;}response.sendRedirect(data);return;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}break;}while(true){int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}break;}}
private void main()throws Throwable{{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading count from cookie",exceptNumberFormat);}}}countGoodB2G=count;mainSink(request,response);}
private void main()throws Throwable{int data;data=2;HashMap intHashMap=new HashMap(data);}
private short mainSource()throws Throwable{short data;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;data="CWE690";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{float data;data=2.0f;LinkedList<Float> dataLinkedList=new LinkedList<Float>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=System.getenv("ADD");mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;data="5";int numberOfLoops;try{numberOfLoops=Integer.parseInt(data);}catch(NumberFormatException exceptNumberFormat){IO.writeLine("Invalid response. Numeric input expected. Assuming 1.");numberOfLoops=1;}for(int i=0;i < numberOfLoops;i++){IO.writeLine("hello world");}}
private void main()throws Throwable{byte dataCopy;{byte data;data=2;dataCopy=data;}{byte data=dataCopy;byte result=(byte)(--data);IO.writeLine("result: "+result);}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{int count;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,Integer> countHashMap=new HashMap<Integer,Integer>();countHashMap.put(0,count);countHashMap.put(1,count);countHashMap.put(2,count);(new b()).mainSink(countHashMap);}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();LinkedList<Long> dataLinkedList=new LinkedList<Long>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int count=0;count=2;mainPublicStatic=true;(new b()).mainSink(count);}
private void main()throws Throwable{long data;data=Long.MAX_VALUE;long[] dataArray=new long[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;while(true){data=2;break;}HashSet intHashSet=new HashSet(data);}
private void main()throws Throwable{long data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;try{InputStreamReader readerInputStream=new InputStreamReader(System.in,"UTF-8");BufferedReader readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}if(data!=null){String stringToEncrypt="Super secret Squirrel";byte[] byteStringToEncrypt=stringToEncrypt.getBytes("UTF-8");SecretKeySpec secretKeySpec=new SecretKeySpec(data.getBytes("UTF-8"),"AES");Cipher aesCipher=Cipher.getInstance("AES");aesCipher.init(Cipher.ENCRYPT_MODE,secretKeySpec);byte[] byteCipherText=aesCipher.doFinal(byteStringToEncrypt);}}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{float data;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}HashMap<Integer,Float> dataHashMap=new HashMap<Integer,Float>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{byte data;data=Byte.MIN_VALUE;dataGoodB2G=data;mainSink();}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;FileInputStream streamFileInput=null;String propertiesFileName="./CWE690_NULL_Deref_From_Return__Helper.properties";try{streamFileInput=new FileInputStream(propertiesFileName);Properties properties=new Properties();properties.load(streamFileInput);data=properties.getProperty("CWE690");}catch(IOException exceptIO){IO.writeLine("Could not open properties file: "+propertiesFileName);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException e){IO.logger.log(Level.WARNING,"Error closing FileInputStream",e);}}(new b()).mainSink(data);}
private void main()throws Throwable{float data;while(true){{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){if(Math.abs(data)> 0.000001){int result=(int)(100.0 % data);IO.writeLine(result);}else{IO.writeLine("This would result in a modulo by zero");}break;}}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;while(true){{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}break;}while(true){if(data > Integer.MIN_VALUE){int result=(int)(--data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{String data=null;data=System.getenv("ADD");mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{Integer data=null;data=null;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{int count;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}int[] countArray=new int[5];countArray[2]=count;(new b()).mainSink(countArray);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;{int result=(int)(data * 2);IO.writeLine("result: "+result);}}}
private void main()throws Throwable{String data;data=System.getProperty("user.home");HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}}
private void main()throws Throwable{byte data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{short data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}(new b()).mainSink((Object)data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}dataGoodB2G=data;mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private int mainSource()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return data;}
private void main()throws Throwable{int count;count=2;(new b()).mainSink((Object)count);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main()throws Throwable{byte data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{long data;data=Long.MAX_VALUE;mainSink(data);}
private void main()throws Throwable{int data;while(true){{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}break;}while(true){int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}break;}}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=System.getenv("ADD");HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{long data;data=Long.MAX_VALUE;if((data!=Integer.MIN_VALUE)&&(data!=Long.MIN_VALUE)&&(Math.abs(data)<=(long)Math.sqrt(Long.MAX_VALUE))){long result=(long)(data * data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform squaring.");}}
private void main()throws Throwable{String data;while(true){data="foo";break;}while(true){String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=tokens[0];String password=tokens[1];XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{String data;main_private=true;data=main_source();Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);Vector<Byte> dataVector=new Vector<Byte>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{short data=(new b()).mainSource();{if(data <(Short.MAX_VALUE/2)){short result=(short)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform multiplication.");}}}
private void main()throws Throwable{String data=mainSource();String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}
private void main()throws Throwable{int [] data;data=null;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="foo";break;}while(true){if(data!=null){response.setHeader("Location","/author.jsp?lang="+data);}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";if(data!=null){response.addHeader("Location","/author.jsp?lang="+data);}}
private void main()throws Throwable{float data;data=2.0f;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();int array[]=null;if(data > 0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}
private void main()throws Throwable{int count;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}Vector<Integer> countVector=new Vector<Integer>(5);countVector.add(0,count);countVector.add(1,count);countVector.add(2,count);(new b()).mainSink(countVector);}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{byte data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{password="Password1234!";(new b()).mainSink();}
private void main()throws Throwable{byte data=0;data=Byte.MIN_VALUE;mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink(data);}
private void main()throws Throwable{String data;main_private=true;data=main_source();if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}if(data > Short.MIN_VALUE){short result=(short)(--data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=true;data=main_source(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data);}}
private void main()throws Throwable{String data=null;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainSink(data,request,response);}
private void main()throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource();Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="Testing.test";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{data=Long.MAX_VALUE;(new b()).mainSink();}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}{if(data <(Byte.MAX_VALUE/2)){byte result=(byte)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform multiplication.");}}}
private void main()throws Throwable{int count;{String stringNumber=System.getProperty("user.home");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}mainPrivate=true;mainSink(count);}
private void main()throws Throwable{StringBuilder data;data=new StringBuilder();mainPrivate=true;mainSink(data);}
private long mainSource()throws Throwable{long data;data=2;return data;}
private void main()throws Throwable{int data=0;data=100;mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data=0;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;data--;int result=(int)(data);IO.writeLine("result: "+result);}}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}}
private void main()throws Throwable{long data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int count;{String stringNumber=System.getProperty("user.home");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}if(count > 0 && count <=2000){Thread.sleep(count);}}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){System.out.printf(data);}}}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{short data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}break;}while(true){int array[]=null;if(data > 0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);break;}}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();mainSink(data);}
private void main()throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;while(true){data=System.getProperty("user.home");break;}while(true){Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}break;}}
private void main()throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data=2;(new b()).mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){Cookie cookieSink=new Cookie("lang",data);response.addCookie(cookieSink);}}}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}{if(data <(Integer.MAX_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform multiplication.");}}}
private void main()throws Throwable{int dataCopy;{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataCopy=data;}{int data=dataCopy;if(data < Integer.MAX_VALUE){int result=(int)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}}
private void main()throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int count;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}(new b()).mainSink((Object)count);}
private void main()throws Throwable{short data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data=mainSource();if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};if(data >=0){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}}
private void main()throws Throwable{int data=(new b()).mainSource();int result=(int)(data-1);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;mainPublicStatic=false;data=(new b()).mainSource();HashMap intHashMap=new HashMap(data);}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();if(data > Long.MIN_VALUE){data--;long result=(long)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int dataCopy;{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataCopy=data;}{int data=dataCopy;if(data!=0){IO.writeLine("100/"+data+"="+(100/data)+"\n");}else{IO.writeLine("This would result in a divide by zero");}}}
private void main()throws Throwable{String password;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}passwordGoodB2G=password;mainSink();}
private void main()throws Throwable{String data;data=System.getProperty("user.home");ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int count=(new b()).mainSource();if(count > 0 && count <=2000){Thread.sleep(count);}}
private void main()throws Throwable{int data;data=2;IO.writeLine("bad: 100/"+data+"="+(100/data)+"\n");}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data;data="foo";String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=tokens[0];String password=tokens[1];XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}mainPublicStatic=false;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{long data;while(true){data=(new java.security.SecureRandom()).nextLong();break;}while(true){{if(data <(Long.MAX_VALUE/2)){long result=(long)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform multiplication.");}}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data="foo";(new b()).mainSink(request,response);}
private void main()throws Throwable{int data;data=2;int array[]={0,1,2,3,4};IO.writeLine(array[data]);}
private void main()throws Throwable{int count;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(count);}
private void main()throws Throwable{int data=0;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){data=2;break;}while(true){int result=(int)(++data);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}if(data < Integer.MAX_VALUE){int result=(int)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{int data=0;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{byte data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{short data;data=Short.MIN_VALUE;(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String data;try{InputStreamReader readerInputStream=new InputStreamReader(System.in,"UTF-8");BufferedReader readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}(new b()).mainSink(data);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;while(true){data=(new SecureRandom()).nextInt();break;}while(true){if((data!=Integer.MIN_VALUE)&&(data!=Long.MIN_VALUE)&&(Math.abs(data)<=(long)Math.sqrt(Integer.MAX_VALUE))){int result=(int)(data * data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform squaring.");}break;}}
private void main()throws Throwable{byte data=(new b()).mainSource();{byte result=(byte)(data * 2);IO.writeLine("result: "+result);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private float mainSource()throws Throwable{float data;data=2.0f;return data;}
private void main()throws Throwable{int count;count=2;HashMap<Integer,Integer> countHashMap=new HashMap<Integer,Integer>();countHashMap.put(0,count);countHashMap.put(1,count);countHashMap.put(2,count);(new b()).mainSink(countHashMap);}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}return data;}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;try{InputStreamReader readerInputStream=new InputStreamReader(System.in,"UTF-8");BufferedReader readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{long data;data=2;long result=(long)(++data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data=(new b()).mainSource();{int result=(int)(data * 2);IO.writeLine("result: "+result);}}
private void main()throws Throwable{int data;while(true){{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){if(data < Integer.MAX_VALUE){data++;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}break;}}
private void main()throws Throwable{String data;data="Testing.test";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int array[]={0,1,2,3,4};IO.writeLine(array[data]);break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};if(data >=0){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.setHeader("Location","/author.jsp?lang="+data);}}
private void main()throws Throwable{byte data;data=2;data--;byte result=(byte)(data);IO.writeLine("result: "+result);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private int mainSource()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return data;}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{data=2.0f;(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource(request,response);String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}
private void main()throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPrivate=false;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{long data;data=Long.MIN_VALUE;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");dataGoodB2G=data;mainSink(request,response);}
private void main()throws Throwable{float data=(new b()).mainSource();if(Math.abs(data)> 0.000001){int result=(int)(100.0 % data);IO.writeLine(result);}else{IO.writeLine("This would result in a modulo by zero");}}
private void main()throws Throwable{int count;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(count);byte[] countSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(countSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();HashMap<Integer,Long> dataHashMap=new HashMap<Integer,Long>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();if(data > Integer.MIN_VALUE){int result=(int)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{String data=null;data=System.getenv("ADD");mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;while(true){data=2;break;}HashSet intHashSet=new HashSet(data);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;mainPublicStatic=true;data=(new b()).mainSource();HashMap intHashMap=new HashMap(data);}
private String mainSource()throws Throwable{String data;data="foo";return data;}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}if(data < Integer.MAX_VALUE){int result=(int)(data+1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform addition.");}}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{byte data=0;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);mainPublicStatic=false;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=0;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int dataCopy;{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink(request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();data--;int result=(int)(data);IO.writeLine("result: "+result);}
private void main()throws Throwable{byte data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};if(data >=0){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data="foo";(new b()).mainSink(request,response);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainSink(data);}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int countCopy;{int count;count=2;countCopy=count;}{int count=countCopy;Thread.sleep(count);}}
private void main()throws Throwable{short data;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int count;while(true){count=2;break;}while(true){File file=new File("badSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}break;}}
private void main()throws Throwable{String password;password="Password1234!";passwordGoodG2B=password;mainSink();}
private void main()throws Throwable{long dataCopy;{long data;data=(new java.security.SecureRandom()).nextLong();dataCopy=data;}{long data=dataCopy;{if(data >(Long.MIN_VALUE/2)){long result=(long)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform multiplication.");}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=(new b()).mainSource(request,response);int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}dataGoodB2G=data;mainSink(request,response);}
private void main()throws Throwable{int data;data=2;int array[]={0,1,2,3,4};IO.writeLine(array[data]);}
private void main()throws Throwable{int data;mainPublicStatic=true;data=(new b()).mainSource();HashMap intHashMap=new HashMap(data);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{short data;data=Short.MAX_VALUE;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;mainPublicStatic=true;data=(new b()).mainSource();HashMap intHashMap=new HashMap(data);}
private void main()throws Throwable{int dataCopy;{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}dataCopy=data;}{int data=dataCopy;int array[]=null;if(data > 0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}}
private void main()throws Throwable{int count;count=2;(new b()).mainSink((Object)count);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="5";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;PasswordAuthentication credentials=new PasswordAuthentication("user","BP@ssw0rd".toCharArray());data=credentials.getUserName()+":"+(new String(credentials.getPassword()));return data;}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{String data;data="foo";mainSink(data);}
private void main()throws Throwable{String data=(new b()).mainSource();int numberOfLoops;try{numberOfLoops=Integer.parseInt(data);}catch(NumberFormatException exceptNumberFormat){IO.writeLine("Invalid response. Numeric input expected. Assuming 1.");numberOfLoops=1;}for(int i=0;i < numberOfLoops;i++){IO.writeLine("hello world");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{int data=0;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;mainPublicStatic=false;data=(new b()).mainSource();{IO.writeLine((short)data);}}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data;while(true){{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}break;}while(true){if(data > Integer.MIN_VALUE){int result=(int)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}break;}}
private void main()throws Throwable{byte dataCopy;{byte data;data=2;dataCopy=data;}{byte data=dataCopy;byte result=(byte)(data+1);IO.writeLine("result: "+result);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main()throws Throwable{{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=System.getProperty("user.home");(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();for(int i=0;i < names.length;i++){sqlStatement.addBatch("update users set hitcount=hitcount+1 where name='"+names[i]+"'");}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statament",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}}
private void main()throws Throwable{float data;SecureRandom secureRandom=new SecureRandom();data=secureRandom.nextFloat();dataGoodB2G=data;mainSink();}
private void main()throws Throwable{byte data;data=2;Vector<Byte> dataVector=new Vector<Byte>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();if(data < Long.MAX_VALUE){data++;long result=(long)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{long data=0L;data=(new java.security.SecureRandom()).nextLong();mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data=0;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}if(data > Integer.MIN_VALUE){int result=(int)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}}
private void main()throws Throwable{long data;data=Long.MAX_VALUE;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;ArrayList intArrayList=new ArrayList(data);}}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink(data);}
private void main()throws Throwable{short data;data=2;Vector<Short> dataVector=new Vector<Short>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{byte data;data=Byte.MIN_VALUE;mainPrivate=false;mainSink(data);}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int countCopy;{int count;count=2;countCopy=count;}{int count=countCopy;int i=0;for(i=0;i < count;i++){IO.writeLine("Hello");}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainPrivate=true;mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");dataGoodB2G=data;mainSink(request,response);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String dataCopy;{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}dataCopy=data;}{String data=dataCopy;if(data!=null){System.out.printf("%s%n",data);}}}
private void main()throws Throwable{int count;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}int i=0;if(count > 0 && count <=20){for(i=0;i < count;i++){IO.writeLine("Hello");}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}dataGoodB2G=data;mainSink(request,response);}
private void main()throws Throwable{int data;data=Integer.MIN_VALUE;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data=null;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=Integer.MAX_VALUE;(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data=mainSource();Class<?> tempClass=Class.forName(data);Object tempClassObject=tempClass.newInstance();}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int data;data=Integer.MIN_VALUE;mainSink(data);}
private void main()throws Throwable{String password=null;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(password);}
private void main()throws Throwable{int data=0;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{float data;data=2.0f;HashMap<Integer,Float> dataHashMap=new HashMap<Integer,Float>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String password;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}Vector<String> passwordVector=new Vector<String>(5);passwordVector.add(0,password);passwordVector.add(1,password);passwordVector.add(2,password);(new b()).mainSink(passwordVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=mainSource(request,response);if(data!=null){*/URI uri;try{uri=new URI(data);}catch(URISyntaxException exceptURISyntax){response.getWriter().write("Invalid redirect URL");return;}response.sendRedirect(data);return;}}
private void main()throws Throwable{long data;data=2;HashMap<Integer,Long> dataHashMap=new HashMap<Integer,Long>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{byte data;data=2;byte result=(byte)(data-1);IO.writeLine("result: "+result);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainSink(data,request,response);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{int data;data=2;int array[]={0,1,2,3,4};IO.writeLine(array[data]);}
private void main()throws Throwable{byte data=(new b()).mainSource();{if(data <(Byte.MAX_VALUE/2)){byte result=(byte)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform multiplication.");}}}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{byte data;data=2;data++;byte result=(byte)(data);IO.writeLine("result: "+result);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{String passwordCopy;{String password;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}passwordCopy=password;}{String password=passwordCopy;if(password!=null){{Cipher aesCipher=Cipher.getInstance("AES");SecretKeySpec secretKeySpec=new SecretKeySpec("ABCDEFGHABCDEFGH".getBytes("UTF-8"),"AES");aesCipher.init(Cipher.DECRYPT_MODE,secretKeySpec);password=new String(aesCipher.doFinal(password.getBytes("UTF-8")),"UTF-8");}PasswordAuthentication credentials=new PasswordAuthentication("user",password.toCharArray());IO.writeLine(credentials.toString());}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}int[] countArray=new int[5];countArray[2]=count;(new b()).mainSink(countArray,request,response);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=true;data=main_source(request,response);if(data!=null){response.getWriter().println("<br>bad()-<img src=\""+data+"\">");}}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{short data=0;data=Short.MAX_VALUE;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String password;Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);password=properties.getProperty("password");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}HashMap<Integer,String> passwordHashMap=new HashMap<Integer,String>();passwordHashMap.put(0,password);passwordHashMap.put(1,password);passwordHashMap.put(2,password);(new b()).mainSink(passwordHashMap);}
private void main()throws Throwable{String data=null;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();dataGoodB2G=data;mainSink();}
private int mainSource()throws Throwable{int data;data=100;return data;}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);dataGoodB2G=data;mainSink();}
private void main()throws Throwable{String data;mainPublicStatic=false;data=(new b()).mainSource();String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{String data;while(true){{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("update users set hitcount=hitcount+1 where name=?");for(int i=0;i < names.length;i++){sqlStatement.setString(1,names[i]);sqlStatement.addBatch();}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data,request,response);}
private void main()throws Throwable{byte data;data=Byte.MIN_VALUE;byte[] dataArray=new byte[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{float dataCopy;{float data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataCopy=data;}{float data=dataCopy;if(Math.abs(data)> 0.000001){int result=(int)(100.0 % data);IO.writeLine(result);}else{IO.writeLine("This would result in a modulo by zero");}}}
private void main()throws Throwable{int data;data=2;data--;int result=(int)(data);IO.writeLine("result: "+result);}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int count;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}Container countContainer=new Container();countContainer.containerOne=count;(new b()).mainSink(countContainer);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{short data;data=2;short[] dataArray=new short[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";if(data!=null){response.addHeader("Location","/author.jsp?lang="+data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){data=2;break;}while(true){int result=(int)(--data);IO.writeLine("result: "+result);break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data=0;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{short data;while(true){data=2;break;}while(true){short result=(short)(++data);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();(new b()).mainSink((Object)data);}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return data;}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}int array[]=null;if(data > 0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}
private void main()throws Throwable{short data=0;data=Short.MAX_VALUE;mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;data=Integer.MAX_VALUE;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private int mainSource()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}mainPrivate=false;mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{String data;while(true){data="This is not null";break;}while(true){IO.writeLine(""+data.length());break;}}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{float data=(new b()).mainSource();int result=(int)(100.0/data);IO.writeLine(result);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{String data=null;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private String mainSource()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return data;}
private void main()throws Throwable{int countCopy;{int count;count=2;countCopy=count;}{int count=countCopy;Thread.sleep(count);}}
private void main()throws Throwable{int count;count=2;int[] countArray=new int[5];countArray[2]=count;(new b()).mainSink(countArray);}
private void main()throws Throwable{{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{String data;mainPublicStatic=false;data=(new b()).mainSource();Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{int count;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}int[] countArray=new int[5];countArray[2]=count;(new b()).mainSink(countArray);}
private void main()throws Throwable{int data=0;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}if(data!=0){IO.writeLine("100/"+data+"="+(100/data)+"\n");}else{IO.writeLine("This would result in a divide by zero");}}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{short data=(new b()).mainSource();if(data > Short.MIN_VALUE){short result=(short)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}}
private void main()throws Throwable{short data;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);Vector<Short> dataVector=new Vector<Short>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{while(true){response.getWriter().println(URLEncoder.encode("abc|1 $#@<><()","UTF-8"));break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;while(true){data=2;break;}ArrayList intArrayList=new ArrayList(data);}
private int mainSource()throws Throwable{int count;{String stringNumber=System.getProperty("user.home");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}return count;}
private void main()throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{int data;while(true){data=100;break;}while(true){int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}break;}}
private void main()throws Throwable{short data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private int mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}return data;}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){response.getWriter().println("<br>bad(): data="+data.replaceAll("(<script>)",""));}}}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}dataCopy=data;}{int data=dataCopy;if(data < Integer.MAX_VALUE){data++;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;data=CWE690_NULL_Deref_From_Return__Class_Helper.getStringBad();HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{float data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{byte data;while(true){data=2;break;}while(true){byte result=(byte)(++data);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink(data);}
private void main()throws Throwable{long data;data=2;long[] dataArray=new long[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{String password;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink(password);}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink(request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();{IO.writeLine((short)data);}}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){response.getWriter().println("<br>bad(): data="+data);}}}
private void main()throws Throwable{int data;while(true){{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){if(data!=0){IO.writeLine("100%"+data+"="+(100 % data)+"\n");}else{IO.writeLine("This would result in a modulo by zero");}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{byte data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{byte data=0;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{long data;data=2;mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=mainSource(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data);}}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{short data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=Integer.MIN_VALUE;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}(new b()).mainSink(request,response);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}if((data!=Integer.MIN_VALUE)&&(data!=Long.MIN_VALUE)&&(Math.abs(data)<=(long)Math.sqrt(Integer.MAX_VALUE))){int result=(int)(data * data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform squaring.");}}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String password;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}(new b()).mainSink((Object)password);}
private void main()throws Throwable{int dataCopy;{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}dataCopy=data;}{int data=dataCopy;if(data!=0){IO.writeLine("100/"+data+"="+(100/data)+"\n");}else{IO.writeLine("This would result in a divide by zero");}}}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){IO.writeLine("bad: 100/"+data+"="+(100/data)+"\n");break;}}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();(new b()).mainSink(data);}
private void main()throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;while(true){data="foo";break;}while(true){if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();for(int i=0;i < names.length;i++){sqlStatement.addBatch("update users set hitcount=hitcount+1 where name='"+names[i]+"'");}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statament",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}break;}}
private void main()throws Throwable{data=Short.MAX_VALUE;(new b()).mainSink();}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;main_private=false;data=main_source();if(data!=null){KerberosPrincipal principal=new KerberosPrincipal("test");KerberosKey key=new KerberosKey(principal,data.toCharArray(),null);IO.writeLine(key.toString());}}
private void main()throws Throwable{int data=(new b()).mainSource();{if(data <(Integer.MAX_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform multiplication.");}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="CWE690";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";if(data!=null){Cookie cookieSink=new Cookie("lang",data);response.addCookie(cookieSink);}}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};array[data]=42;}}
private short mainSource()throws Throwable{short data;data=2;return data;}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);mainPrivate=false;mainSink(data);}
private void main()throws Throwable{data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainSink(data,request,response);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){data++;int result=(int)(data);IO.writeLine("result: "+result);break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="foo";break;}while(true){String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=tokens[0];String password=tokens[1];XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}break;}}
private void main()throws Throwable{byte data;while(true){data=2;break;}while(true){data++;byte result=(byte)(data);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{int data=(new b()).mainSource();data++;int result=(int)(data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data=(new b()).mainSource();int result=(int)(data+1);IO.writeLine("result: "+result);}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{float data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=0;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}short[] dataArray=new short[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data=0;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);int rowCount=sqlStatement.executeUpdate();IO.writeLine("Updated "+rowCount+" rows successfully.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=false;data=main_source(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data.replaceAll("(<script>)",""));}}
private void main()throws Throwable{int data=(new b()).mainSource();if(data!=0){IO.writeLine("100%"+data+"="+(100 % data)+"\n");}else{IO.writeLine("This would result in a modulo by zero");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}dataGoodB2G=data;mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}mainPrivate=false;mainSink(data,request,response);}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);mainPrivate=false;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);int rowCount=sqlStatement.executeUpdate();IO.writeLine("Updated "+rowCount+" rows successfully.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{float data;data=2.0f;HashMap<Integer,Float> dataHashMap=new HashMap<Integer,Float>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Vector<Short> dataVector=new Vector<Short>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;data="Hello World";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;data="Testing.test";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;data=System.getProperty("CWE690");mainPrivate=false;mainSink(data);}
private void main()throws Throwable{String password;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPrivate=true;mainSink(password);}
private int mainSource()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}return data;}
private void main()throws Throwable{String data;while(true){data=System.getenv("ADD");break;}while(true){Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}break;}}
private void main()throws Throwable{int data=(new b()).mainSource();if(data!=0){IO.writeLine("100/"+data+"="+(100/data)+"\n");}else{IO.writeLine("This would result in a divide by zero");}}
private void main()throws Throwable{short data;data=Short.MAX_VALUE;if((data!=Integer.MIN_VALUE)&&(data!=Long.MIN_VALUE)&&(Math.abs(data)<=(long)Math.sqrt(Short.MAX_VALUE))){short result=(short)(data * data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform squaring.");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{int dataCopy;{int data;data=(new SecureRandom()).nextInt();dataCopy=data;}{int data=dataCopy;if(data!=0){IO.writeLine("100%"+data+"="+(100 % data)+"\n");}else{IO.writeLine("This would result in a modulo by zero");}}}

private void main()throws Throwable{short data;while(true){data=2;break;}{IO.writeLine((byte)data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;dataGoodG2B=data;mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){response.addHeader("Location","/author.jsp?lang="+data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int count;count=2;Container countContainer=new Container();countContainer.containerOne=count;(new b()).mainSink(countContainer);}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String password;password="Password1234!";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(password);byte[] passwordSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(passwordSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{short data=(new b()).mainSource();short result=(short)(data * data);IO.writeLine("result: "+result);}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}mainSink(data);}
private void main()throws Throwable{int data=(new b()).mainSource();HashMap intHashMap=new HashMap(data);}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{long data;data=Long.MIN_VALUE;(new b()).mainSink((Object)data);}
private void main()throws Throwable{float data;data=2.0f;Vector<Float> dataVector=new Vector<Float>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String password;while(true){password="Password1234!";break;}while(true){if(password!=null){KerberosPrincipal principal=new KerberosPrincipal("test");KerberosKey key=new KerberosKey(principal,password.toCharArray(),null);IO.writeLine(key.toString());}break;}}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{float data=0.0f;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{while(true){int count=0;do{if(count==20000){IO.writeLine("Sorry,your license has expired. Please contact support.");}count++;}while(count < Integer.MAX_VALUE);break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{long data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}if(data!=0){IO.writeLine("100%"+data+"="+(100 % data)+"\n");}else{IO.writeLine("This would result in a modulo by zero");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=(new b()).mainSource(request,response);if(data > Integer.MIN_VALUE){int result=(int)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data=System.getenv("ADD");break;}while(true){if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.addHeader("Location","/author.jsp?lang="+data);}break;}}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};if(data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="Testing.test";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int count=(new b()).mainSource();Thread.sleep(count);}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);HashMap<Integer,Byte> dataHashMap=new HashMap<Integer,Byte>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int count;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPrivate=true;mainSink(count);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{String data=null;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");mainSink(data,request,response);}
private void main()throws Throwable{String data;while(true){data="foo";break;}while(true){Connection dbConnection=null;Statement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();resultSet=sqlStatement.executeQuery("select * from users where name='"+data+"'");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}break;}}
private void main()throws Throwable{short data;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);{if(data <(Short.MAX_VALUE/2)){short result=(short)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform multiplication.");}}}
private void main()throws Throwable{short data;data=Short.MIN_VALUE;mainPrivate=false;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";if(data!=null){*/URI uri;try{uri=new URI(data);}catch(URISyntaxException exceptURISyntax){response.getWriter().write("Invalid redirect URL");return;}response.sendRedirect(data);return;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}break;}while(true){if(data!=null){Cookie cookieSink=new Cookie("lang",URLEncoder.encode(data,"UTF-8"));response.addCookie(cookieSink);}break;}}
private void main()throws Throwable{byte data;data=Byte.MIN_VALUE;LinkedList<Byte> dataLinkedList=new LinkedList<Byte>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataGoodB2G=data;mainSink(request,response);}
private String mainSource()throws Throwable{String password;password="Password1234!";return password;}
private void main()throws Throwable{int data;data=Integer.MIN_VALUE;dataGoodB2G=data;mainSink();}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{short dataCopy;{short data;data=Short.MAX_VALUE;dataCopy=data;}{short data=dataCopy;if(data < Short.MAX_VALUE){short result=(short)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}}
private void main()throws Throwable{float data;data=2.0f;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{String data;data=System.getProperty("user.home");ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;while(true){data="foo";break;}while(true){if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();for(int i=0;i < names.length;i++){sqlStatement.addBatch("update users set hitcount=hitcount+1 where name='"+names[i]+"'");}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statament",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink(request,response);}
private void main()throws Throwable{float data;while(true){{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}break;}while(true){if(Math.abs(data)> 0.000001){int result=(int)(100.0/data);IO.writeLine(result);}else{IO.writeLine("This would result in a divide by zero");}break;}}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{StringBuilder data=null;data=CWE690_NULL_Deref_From_Return__Class_Helper.getStringBuilderBad();mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{count=2;(new b()).mainSink();}
private int mainSource()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return data;}
private void main()throws Throwable{String data;main_private=false;data=main_source();Class<?> tempClass=Class.forName(data);Object tempClassObject=tempClass.newInstance();}
private void main()throws Throwable{byte data;data=2;byte result=(byte)(data+1);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{float data;{String stringNumber=System.getProperty("user.home");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data=0;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int count;while(true){count=2;break;}while(true){File file=new File("badSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}break;}}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;Statement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();resultSet=sqlStatement.executeQuery("select * from users where name='"+data+"'");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{String data;data=System.getenv("ADD");if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("update users set hitcount=hitcount+1 where name=?");for(int i=0;i < names.length;i++){sqlStatement.setString(1,names[i]);sqlStatement.addBatch();}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{int data;while(true){{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){if(data > Integer.MIN_VALUE){int result=(int)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}break;}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{short data;mainPublicStatic=true;data=(new b()).mainSource();{IO.writeLine((byte)data);}}
private short mainSource()throws Throwable{short data;data=Short.MIN_VALUE;return data;}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{int count;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink((Object)count);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private String mainSource()throws Throwable{String data;data="foo";return data;}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("CWE690");return data;}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,Byte> dataHashMap=new HashMap<Integer,Byte>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){IO.writeLine("bad: 100/"+data+"="+(100/data)+"\n");break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataCopy=data;}{String data=dataCopy;if(data!=null){Cookie cookieSink=new Cookie("lang",URLEncoder.encode(data,"UTF-8"));response.addCookie(cookieSink);}}}
private void main()throws Throwable{int count;count=2;countGoodG2B=count;mainSink();}
private void main()throws Throwable{int data;data=2;int array[]={0,1,2,3,4};IO.writeLine(array[data]);}
private void main()throws Throwable{short data;main_private=false;data=main_source();{IO.writeLine((byte)data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{int data;data=Integer.MAX_VALUE;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}mainSink(data,request,response);}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String password;Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);password=properties.getProperty("password");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(password);byte[] passwordSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(passwordSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}(new b()).mainSink(data);}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;data="CWE690";(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;while(true){data="foo";break;}while(true){Connection dbConnection=null;Statement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();resultSet=sqlStatement.executeQuery("select * from users where name='"+data+"'");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}break;}}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=false;data=main_source(request,response);if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}(new b()).mainSink(request,response);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}if(data > Integer.MIN_VALUE){int result=(int)(--data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}
private void main()throws Throwable{String data;while(true){data="foo";break;}if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}dataGoodB2G=data;mainSink(request,response);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);dataGoodB2G=data;mainSink();}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private long mainSource()throws Throwable{long data;data=2;return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{short data;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);short[] dataArray=new short[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;while(true){data="foo";break;}while(true){Connection dbConnection=null;Statement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();resultSet=sqlStatement.executeQuery("select * from users where name='"+data+"'");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}break;}}
private void main()throws Throwable{int data;data=2;int array[]=null;if(data >=0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Vector<Byte> dataVector=new Vector<Byte>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{float data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data=null;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int count;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPrivate=false;mainSink(count);}
private void main()throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);(new b()).mainSink();}
private void main()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;while(true){data="foo";break;}while(true){Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name='"+data+"'");Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=mainSource(request,response);if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{int count;count=2;Container countContainer=new Container();countContainer.containerOne=count;(new b()).mainSink(countContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=mainSource(request,response);if(data!=null){response.getWriter().println("<br>bad()-<img src=\""+data+"\">");}}
private void main()throws Throwable{String dataCopy;{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}dataCopy=data;}{String data=dataCopy;String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=StringEscapeUtils.escapeXml(tokens[0]);String password=StringEscapeUtils.escapeXml(tokens[1]);XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,Byte> dataHashMap=new HashMap<Integer,Byte>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data=(new b()).mainSource();String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=tokens[0];String password=tokens[1];XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}
private void main()throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private int mainSource()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}return data;}
private int mainSource()throws Throwable{int count;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}return count;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}mainPrivate=false;mainSink(data,request,response);}
private void main()throws Throwable{String data;data="foo";String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}mainSink(data,request,response);}
private void main()throws Throwable{String data=mainSource();Connection dbConnection=null;try{dbConnection=IO.getDBConnection();dbConnection.setCatalog(data);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="10";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int result=(int)(data+1);IO.writeLine("result: "+result);}}
private void main()throws Throwable{long data;data=Long.MAX_VALUE;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;int result=(int)(data * data);IO.writeLine("result: "+result);}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;while(true){{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}break;}while(true){int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}break;}}
private void main()throws Throwable{int count;count=2;Vector<Integer> countVector=new Vector<Integer>(5);countVector.add(0,count);countVector.add(1,count);countVector.add(2,count);(new b()).mainSink(countVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;while(true){data="Testing.test";break;}Class<?> tempClass=Class.forName(data);Object tempClassObject=tempClass.newInstance();}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=false;data=main_source(request,response);Connection dbConnection=null;try{dbConnection=IO.getDBConnection();dbConnection.setCatalog(data);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String passwordCopy;{String password;password="Password1234!";passwordCopy=password;}{String password=passwordCopy;if(password!=null){KerberosPrincipal principal=new KerberosPrincipal("test");KerberosKey key=new KerberosKey(principal,password.toCharArray(),null);IO.writeLine(key.toString());}}}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{String data;while(true){data="foo";break;}if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{String data=null;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int count;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}int[] countArray=new int[5];countArray[2]=count;(new b()).mainSink(countArray);}
private void main()throws Throwable{short data;data=Short.MIN_VALUE;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{float data;data=2.0f;Vector<Float> dataVector=new Vector<Float>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{short data;data=Short.MIN_VALUE;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;data="5";(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{byte data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String data;data="foo";mainSink(data);}
private void main()throws Throwable{int count;count=2;(new b()).mainSink(count);}
private void main()throws Throwable{int data;while(true){data=(new SecureRandom()).nextInt();break;}while(true){int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}break;}}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;data="foo";Connection dbConnection=null;try{dbConnection=IO.getDBConnection();dbConnection.setCatalog(data);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{byte data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");mainPrivate=false;mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{data=System.getenv("ADD");(new b()).mainSink();}
private void main()throws Throwable{short dataCopy;{short data;data=2;dataCopy=data;}{short data=dataCopy;data--;short result=(short)(data);IO.writeLine("result: "+result);}}
private void main()throws Throwable{int data;while(true){data=2;break;}{IO.writeLine((byte)data);}}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{float data=0.0f;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int count;{String stringNumber=System.getProperty("user.home");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}countGoodB2G=count;mainSink();}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int dataCopy;{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataCopy=data;}{int data=dataCopy;if(data > Integer.MIN_VALUE){data--;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}}
private void main()throws Throwable{FileInputStream streamFileInput=null;String propertiesFileName="./CWE690_NULL_Deref_From_Return__Helper.properties";try{streamFileInput=new FileInputStream(propertiesFileName);Properties properties=new Properties();properties.load(streamFileInput);data=properties.getProperty("CWE690");}catch(IOException exceptIO){IO.writeLine("Could not open properties file: "+propertiesFileName);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException e){IO.logger.log(Level.WARNING,"Error closing FileInputStream",e);}}(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,Short> dataHashMap=new HashMap<Integer,Short>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count=(new b()).mainSource(request,response);if(count > 0 && count <=20){File file=new File("goodSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}}}
private void main()throws Throwable{String data=mainSource();Connection dbConnection=null;try{dbConnection=IO.getDBConnection();dbConnection.setCatalog(data);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;count=2;(new b()).mainSink(count,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(request,response);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{float data;data=2.0f;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};if(data >=0){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}mainPrivate=true;mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{float data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}if(Math.abs(data)> 0.000001){int result=(int)(100.0/data);IO.writeLine(result);}else{IO.writeLine("This would result in a divide by zero");}}
private void main()throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource();String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;PasswordAuthentication credentials=new PasswordAuthentication("user","GP@ssw0rd".toCharArray());{String salt="ThisIsMySalt";MessageDigest messageDigest=MessageDigest.getInstance("SHA-512");messageDigest.reset();String credentialsToHash=credentials.getUserName()+":"+(new String(credentials.getPassword()));byte[] hashedCredsAsBytes=messageDigest.digest((salt+credentialsToHash).getBytes("UTF-8"));data=IO.toHex(hashedCredsAsBytes);}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{int data;main_private=true;data=main_source();{IO.writeLine((byte)data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("CWE690");ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data=0;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{byte data;while(true){data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){{if(data >(Byte.MIN_VALUE/2)){byte result=(byte)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform multiplication.");}}break;}}
private void main()throws Throwable{String data;while(true){data="foo";break;}while(true){if(data!=null){System.out.format(data);}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{String passwordCopy;{String password;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}passwordCopy=password;}{String password=passwordCopy;if(password!=null){{Cipher aesCipher=Cipher.getInstance("AES");SecretKeySpec secretKeySpec=new SecretKeySpec("ABCDEFGHABCDEFGH".getBytes("UTF-8"),"AES");aesCipher.init(Cipher.DECRYPT_MODE,secretKeySpec);password=new String(aesCipher.doFinal(password.getBytes("UTF-8")),"UTF-8");}PasswordAuthentication credentials=new PasswordAuthentication("user",password.toCharArray());IO.writeLine(credentials.toString());}}}
private void main()throws Throwable{data=Long.MIN_VALUE;(new b()).mainSink();}
private void main()throws Throwable{int count=(new b()).mainSource();if(count > 0 && count <=20){File file=new File("goodSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{long data=0L;data=Long.MAX_VALUE;mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count=0;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}mainPublicStatic=false;(new b()).mainSink(count,request,response);}
private void main()throws Throwable{String data;data=CWE690_NULL_Deref_From_Return__Class_Helper.getStringGood();(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{long data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};IO.writeLine(array[data]);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}dataCopy=data;}{int data=dataCopy;if(data < Integer.MAX_VALUE){int result=(int)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource(request,response);Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;PasswordAuthentication credentials=new PasswordAuthentication("user","BP@ssw0rd".toCharArray());data=credentials.getUserName()+":"+(new String(credentials.getPassword()));(new b()).mainSink((Object)data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){data=2;break;}HashSet intHashSet=new HashSet(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading count from cookie",exceptNumberFormat);}}}HashMap<Integer,Integer> countHashMap=new HashMap<Integer,Integer>();countHashMap.put(0,count);countHashMap.put(1,count);countHashMap.put(2,count);(new b()).mainSink(countHashMap,request,response);}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{byte data;data=2;Vector<Byte> dataVector=new Vector<Byte>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;int result=(int)(data * data);IO.writeLine("result: "+result);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}if((data!=Integer.MIN_VALUE)&&(data!=Long.MIN_VALUE)&&(Math.abs(data)<=(long)Math.sqrt(Integer.MAX_VALUE))){int result=(int)(data * data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform squaring.");}}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{String dataCopy;{String data;data="5";dataCopy=data;}{String data=dataCopy;int numberOfLoops;try{numberOfLoops=Integer.parseInt(data);}catch(NumberFormatException exceptNumberFormat){IO.writeLine("Invalid response. Numeric input expected. Assuming 1.");numberOfLoops=1;}for(int i=0;i < numberOfLoops;i++){IO.writeLine("hello world");}}}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=Integer.MAX_VALUE;(new b()).mainSink(data);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}int numberOfLoops;try{numberOfLoops=Integer.parseInt(data);}catch(NumberFormatException exceptNumberFormat){IO.writeLine("Invalid response. Numeric input expected. Assuming 1.");numberOfLoops=1;}if(numberOfLoops >=0 && numberOfLoops <=5){for(int i=0;i < numberOfLoops;i++){IO.writeLine("hello world");}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;HashSet intHashSet=new HashSet(data);}}
private void main()throws Throwable{int countCopy;{int count;count=2;countCopy=count;}{int count=countCopy;int i=0;for(i=0;i < count;i++){IO.writeLine("Hello");}}}
private void main()throws Throwable{String data;data=System.getenv("ADD");LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){Cookie cookieSink=new Cookie("lang",URLEncoder.encode(data,"UTF-8"));response.addCookie(cookieSink);}}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int result=(int)(--data);IO.writeLine("result: "+result);}}
private void main()throws Throwable{String data;data="CWE690";(new b()).mainSink(data);}
private void main()throws Throwable{if(IO.staticReturnsTrueOrFalse()){int zeroOrOne=(new SecureRandom()).nextInt(2);boolean isZero=false;{IO.writeLine("zeroOrOne is 0");}IO.writeLine("isZero is: "+isZero);}else{int zeroOrOne=(new SecureRandom()).nextInt(2);boolean isZero=false;{IO.writeLine("zeroOrOne is 0");}IO.writeLine("isZero is: "+isZero);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainSink(data,request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();if(data < Integer.MAX_VALUE){int result=(int)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{byte data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private int mainSource()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}return data;}
private void main()throws Throwable{float data=(new b()).mainSource();int result=(int)(100.0 % data);IO.writeLine(result);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}if(data > Integer.MIN_VALUE){data--;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{short data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();Boolean result=sqlStatement.execute("insert into users(status)values('updated')where name='"+data+"'");if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{long data;data=2;Vector<Long> dataVector=new Vector<Long>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{short data;data=2;HashMap<Integer,Short> dataHashMap=new HashMap<Integer,Short>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{short data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data=0;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{long data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int count=0;count=2;mainPublicStatic=true;(new b()).mainSink(count);}
private void main()throws Throwable{int data;mainPublicStatic=false;data=(new b()).mainSource();ArrayList intArrayList=new ArrayList(data);}
private void main()throws Throwable{{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}(new b()).mainSink(request,response);}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{long data;data=Long.MIN_VALUE;long[] dataArray=new long[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data=(new b()).mainSource();{int result=(int)(data * 2);IO.writeLine("result: "+result);}}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{short data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource(request,response);String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{short data;data=2;HashMap<Integer,Short> dataHashMap=new HashMap<Integer,Short>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int count;count=2;mainPrivate=true;mainSink(count);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{float data;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=0;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{short data=0;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;data="5";mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;data="foo";mainSink(data);}
private void main()throws Throwable{int count;count=2;countGoodG2B=count;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main()throws Throwable{int data;mainPublicStatic=true;data=(new b()).mainSource();ArrayList intArrayList=new ArrayList(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data=mainSource();{IO.writeLine((byte)data);}}
private void main()throws Throwable{short data;data=2;{IO.writeLine((byte)data);}}
private void main()throws Throwable{int data=(new b()).mainSource();int result=(int)(--data);IO.writeLine("result: "+result);}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{float data;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{short data;data=2;HashMap<Integer,Short> dataHashMap=new HashMap<Integer,Short>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{float data;data=2.0f;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{short data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{short data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainSink(data,request,response);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count=(new b()).mainSource(request,response);int i=0;for(i=0;i < count;i++){IO.writeLine("Hello");}}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}mainPrivate=false;mainSink(data,request,response);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{short data;data=2;LinkedList<Short> dataLinkedList=new LinkedList<Short>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int count;count=2;int[] countArray=new int[5];countArray[2]=count;(new b()).mainSink(countArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;count=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(count);byte[] countSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(countSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");return data;}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int result=(int)(data+1);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{float data;data=2.0f;float[] dataArray=new float[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{short dataCopy;{short data;data=2;dataCopy=data;}{short data=dataCopy;{short result=(short)(data * 2);IO.writeLine("result: "+result);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;while(true){data="foo";break;}while(true){String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=tokens[0];String password=tokens[1];XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}break;}}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){IO.writeLine("bad: 100/"+data+"="+(100/data)+"\n");break;}}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){data++;int result=(int)(data);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink(data);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private int mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{long data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{byte data;data=2;Vector<Byte> dataVector=new Vector<Byte>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data=(new b()).mainSource();Connection dbConnection=null;PreparedStatement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("select * from users where name=?");sqlStatement.setString(1,data);resultSet=sqlStatement.executeQuery();}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{byte data;data=Byte.MAX_VALUE;LinkedList<Byte> dataLinkedList=new LinkedList<Byte>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{float data;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data;data=100;dataGoodB2G=data;mainSink();}
private void main()throws Throwable{short data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{short data;while(true){data=2;break;}while(true){data--;short result=(short)(data);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{short data;data=Short.MAX_VALUE;mainPrivate=false;mainSink(data);}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int count=0;count=2;mainPublicStatic=true;(new b()).mainSink(count);}
private void main()throws Throwable{float data;data=2.0f;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;data=Integer.MIN_VALUE;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{short dataCopy;{short data;data=2;dataCopy=data;}{short data=dataCopy;{IO.writeLine((byte)data);}}}
private void main()throws Throwable{String data;data="5";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;while(true){{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}break;}while(true){int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="foo";break;}while(true){Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();int rowCount=sqlStatement.executeUpdate("insert into users(status)values('updated')where name='"+data+"'");IO.writeLine("Updated "+rowCount+" rows successfully.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int data=(new b()).mainSource();if(data < Integer.MAX_VALUE){int result=(int)(data+1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform addition.");}}
private void main()throws Throwable{byte data;data=2;mainSink(data);}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{String data=mainSource();if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{int countCopy;{int count;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}countCopy=count;}{int count=countCopy;int i=0;if(count > 0 && count <=20){for(i=0;i < count;i++){IO.writeLine("Hello");}}}}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data=(new b()).mainSource();int result=(int)(data * data);IO.writeLine("result: "+result);}
private void main()throws Throwable{float data;data=2.0f;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int count;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(count);byte[] countSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(countSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("update users set hitcount=hitcount+1 where name=?");for(int i=0;i < names.length;i++){sqlStatement.setString(1,names[i]);sqlStatement.addBatch();}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{byte data;data=2;byte[] dataArray=new byte[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data=mainSource();Connection dbConnection=null;try{dbConnection=IO.getDBConnection();dbConnection.setCatalog(data);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private String mainSource()throws Throwable{String password;password="Password1234!";return password;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data=2;(new b()).mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}break;}while(true){int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}break;}}
private void main()throws Throwable{String data;data=System.getProperty("CWE690");dataGoodB2G=data;mainSink();}
private void main()throws Throwable{float data;{String stringNumber=System.getProperty("user.home");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="foo";break;}while(true){if(data!=null){response.addHeader("Location","/author.jsp?lang="+data);}break;}}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{short dataCopy;{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataCopy=data;}{short data=dataCopy;{if(data >(Short.MIN_VALUE/2)){short result=(short)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform multiplication.");}}}}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);Connection dbConnection=null;Statement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();resultSet=sqlStatement.executeQuery("select * from users where name='"+data+"'");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{byte data;data=2;mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="CWE690";mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{int data;data=100;mainSink(data);}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{int count;count=2;(new b()).mainSink((Object)count);}
private void main()throws Throwable{String data;while(true){data="foo";break;}Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{String data=(new b()).mainSource();String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=StringEscapeUtils.escapeXml(tokens[0]);String password=StringEscapeUtils.escapeXml(tokens[1]);XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}
private void main()throws Throwable{String data;main_private=false;data=main_source();if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";if(data!=null){response.addHeader("Location","/author.jsp?lang="+data);}}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data);}}
private void main()throws Throwable{int data;data=Integer.MAX_VALUE;(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data=2;(new b()).mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=(new b()).mainSource(request,response);if(data < Integer.MAX_VALUE){int result=(int)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}
private void main()throws Throwable{String data;PasswordAuthentication credentials=new PasswordAuthentication("user","AP@ssw0rd".toCharArray());data=new String(credentials.getPassword());dataGoodB2G=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";if(data!=null){response.getWriter().println("<br>bad(): data="+data);}}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){Cookie cookieSink=new Cookie("lang",URLEncoder.encode(data,"UTF-8"));response.addCookie(cookieSink);}}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{short data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{float data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}float[] dataArray=new float[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String password;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}String[] passwordArray=new String[5];passwordArray[2]=password;(new b()).mainSink(passwordArray);}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){System.out.printf(data);}}}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=mainSource(request,response);HashSet intHashSet=new HashSet(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;while(true){{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}break;}while(true){if(data < Integer.MAX_VALUE){data++;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}break;}}
private void main()throws Throwable{short data=(new b()).mainSource();{IO.writeLine((byte)data);}}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;data=System.getenv("ADD");Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data.replaceAll("(<script>)",""));}}
private void main()throws Throwable{float data;data=2.0f;int result=(int)(100.0/data);IO.writeLine(result);}
private void main()throws Throwable{count=(new SecureRandom()).nextInt();(new b()).mainSink();}
private void main()throws Throwable{String data=(new b()).mainSource();if(data!=null){System.out.printf("%s%n",data);}}
private void main()throws Throwable{float data=0.0f;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{int dataCopy;{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataCopy=data;}{int data=dataCopy;{if(data <(Integer.MAX_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform multiplication.");}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{short data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;data="foo";mainSink(data);}
private void main()throws Throwable{long data;while(true){data=2;break;}while(true){long result=(long)(data+1);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource();Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}if(data!=0){IO.writeLine("100%"+data+"="+(100 % data)+"\n");}else{IO.writeLine("This would result in a modulo by zero");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=System.getProperty("user.home");(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=true;data=main_source(request,response);if(data!=null){response.getWriter().println("<br>bad()-<img src=\""+data+"\">");}}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{short data;data=2;LinkedList<Short> dataLinkedList=new LinkedList<Short>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private int mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{String data;data=null;Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;IO.writeLine("100%"+data+"="+(100 % data)+"\n");}
private void main()throws Throwable{int data;while(true){{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){if(data > Integer.MIN_VALUE){data--;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}break;}}
private void main()throws Throwable{String data;data="foo";mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{byte data=(new b()).mainSource();byte result=(byte)(data * data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){{int result=(int)(data * 2);IO.writeLine("result: "+result);}break;}}
private void main()throws Throwable{String data;while(true){data="foo";break;}Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{String data;while(true){data="foo";break;}String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{int count;count=2;int[] countArray=new int[5];countArray[2]=count;(new b()).mainSink(countArray);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{long data=0L;data=Long.MIN_VALUE;mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink(data);}
private void main()throws Throwable{int count;count=(new SecureRandom()).nextInt();Vector<Integer> countVector=new Vector<Integer>(5);countVector.add(0,count);countVector.add(1,count);countVector.add(2,count);(new b()).mainSink(countVector);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}int array[]=null;if(data > 0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]=null;if(data > 0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};array[data]=42;}}
private void main()throws Throwable{int data;main_private=false;data=main_source();HashMap intHashMap=new HashMap(data);}
private void main()throws Throwable{int data;data=Integer.MAX_VALUE;mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int result=(int)(data * data);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int result=(int)(data-1);IO.writeLine("result: "+result);break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main()throws Throwable{data=(new SecureRandom()).nextInt();(new b()).mainSink();}
private void main()throws Throwable{int data=(new b()).mainSource();if(data!=0){IO.writeLine("100%"+data+"="+(100 % data)+"\n");}else{IO.writeLine("This would result in a modulo by zero");}}
private void main()throws Throwable{int count;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}countGoodB2G=count;mainSink();}
private void main()throws Throwable{{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{byte data;data=2;LinkedList<Byte> dataLinkedList=new LinkedList<Byte>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{String data;while(true){data="foo";break;}while(true){Connection dbConnection=null;Statement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();resultSet=sqlStatement.executeQuery("select * from users where name='"+data+"'");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}break;}}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}if(data < Long.MAX_VALUE){long result=(long)(data+1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform addition.");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink(request,response);}
private void main()throws Throwable{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}(new b()).mainSink();}
private void main()throws Throwable{byte data;data=2;Vector<Byte> dataVector=new Vector<Byte>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=System.getenv("ADD");mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.setHeader("Location","/author.jsp?lang="+data);}break;}}
private void main()throws Throwable{int data=0;data=100;mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};array[data]=42;}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int data;while(true){data=2;break;}HashMap intHashMap=new HashMap(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=false;data=(new b()).mainSource(request,response);Connection dbConnection=null;try{dbConnection=IO.getDBConnection();dbConnection.setCatalog(data);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{int data;data=100;mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data=(new b()).mainSource();ArrayList intArrayList=new ArrayList(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=0;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}mainPublicStatic=false;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{byte data;data=2;LinkedList<Byte> dataLinkedList=new LinkedList<Byte>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;data="foo";mainSink(data);}
private void main()throws Throwable{short data=(new b()).mainSource();{IO.writeLine((byte)data);}}
private void main()throws Throwable{int data;while(true){{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){{if(data >(Integer.MIN_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform multiplication.");}}break;}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(data,request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();{IO.writeLine((short)data);}}
private void main()throws Throwable{int data=(new b()).mainSource();IO.writeLine("100%"+data+"="+(100 % data)+"\n");}
private void main()throws Throwable{String password;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(password);}
private void main()throws Throwable{int count;while(true){count=2;break;}while(true){int i=0;for(i=0;i < count;i++){IO.writeLine("Hello");}break;}}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int array[]=null;if(data >=0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{int data;data=Integer.MAX_VALUE;mainSink(data);}
private void main()throws Throwable{float data;Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}if(Math.abs(data)> 0.000001){int result=(int)(100.0/data);IO.writeLine(result);}else{IO.writeLine("This would result in a divide by zero");}}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data;data="Testing.test";Class<?> tempClass=Class.forName(data);Object tempClassObject=tempClass.newInstance();}
private void main()throws Throwable{long data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{byte data;data=Byte.MIN_VALUE;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{int data=0;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private long mainSource()throws Throwable{long data;data=2;return data;}
private void main()throws Throwable{int count;count=2;mainPrivate=true;mainSink(count);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{long data;data=2;Vector<Long> dataVector=new Vector<Long>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;main_private=true;data=main_source();if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}dataCopy=data;}{String data=dataCopy;String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=StringEscapeUtils.escapeXml(tokens[0]);String password=StringEscapeUtils.escapeXml(tokens[1]);XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}}
private void main()throws Throwable{int count;count=2;mainSink(count);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]={0,1,2,3,4};if(data >=0){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Vector<Long> dataVector=new Vector<Long>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{byte data;data=2;byte result=(byte)(data * data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;data=2;int array[]={0,1,2,3,4};IO.writeLine(array[data]);}
private void main()throws Throwable{int count;count=Integer.MAX_VALUE;LinkedList<Integer> countLinkedList=new LinkedList<Integer>();countLinkedList.add(0,count);countLinkedList.add(1,count);countLinkedList.add(2,count);(new b()).mainSink(countLinkedList);}
private void main()throws Throwable{StringBuilder data;data=CWE690_NULL_Deref_From_Return__Class_Helper.getStringBuilderGood();mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();if(data!=0){IO.writeLine("100/"+data+"="+(100/data)+"\n");}else{IO.writeLine("This would result in a divide by zero");}}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";if(data!=null){response.setHeader("Location","/author.jsp?lang="+data);}}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{StringBuilder data;data=CWE690_NULL_Deref_From_Return__Class_Helper.getStringBuilderBad();(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="CWE690";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int count;{String stringNumber=System.getProperty("user.home");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}(new b()).mainSink((Object)count);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="Testing.test";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data=null;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private int mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{int data;data=Integer.MIN_VALUE;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String password;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}passwordGoodB2G=password;mainSink();}
private void main()throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data="foo";(new b()).mainSink(request,response);}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{short data;data=Short.MAX_VALUE;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private float mainSource()throws Throwable{float data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}return data;}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink(request,response);}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{int count;count=2;Thread.sleep(count);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{float data;SecureRandom secureRandom=new SecureRandom();data=secureRandom.nextFloat();LinkedList<Float> dataLinkedList=new LinkedList<Float>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=mainSource(request,response);Connection dbConnection=null;try{dbConnection=IO.getDBConnection();dbConnection.setCatalog(data);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;data="foo";Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{byte data;data=Byte.MAX_VALUE;LinkedList<Byte> dataLinkedList=new LinkedList<Byte>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){data=2;break;}ArrayList intArrayList=new ArrayList(data);}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;data=2;HashMap intHashMap=new HashMap(data);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{if(IO.staticReturnsTrueOrFalse()){response.sendRedirect("/test");}else{response.sendRedirect("/test");}}
private void main()throws Throwable{String password;while(true){{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}break;}while(true){if(password!=null){{Cipher aesCipher=Cipher.getInstance("AES");SecretKeySpec secretKeySpec=new SecretKeySpec("ABCDEFGHABCDEFGH".getBytes("UTF-8"),"AES");aesCipher.init(Cipher.DECRYPT_MODE,secretKeySpec);password=new String(aesCipher.doFinal(password.getBytes("UTF-8")),"UTF-8");}PasswordAuthentication credentials=new PasswordAuthentication("user",password.toCharArray());IO.writeLine(credentials.toString());}break;}}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;HashSet intHashSet=new HashSet(data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{String data;while(true){{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}break;}}
private void main()throws Throwable{int data=(new b()).mainSource();IO.writeLine("100%"+data+"="+(100 % data)+"\n");}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading count from cookie",exceptNumberFormat);}}}Vector<Integer> countVector=new Vector<Integer>(5);countVector.add(0,count);countVector.add(1,count);countVector.add(2,count);(new b()).mainSink(countVector,request,response);}
private void main()throws Throwable{int data=0;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private int mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{String data=(new b()).mainSource();int numberOfLoops;try{numberOfLoops=Integer.parseInt(data);}catch(NumberFormatException exceptNumberFormat){IO.writeLine("Invalid response. Numeric input expected. Assuming 1.");numberOfLoops=1;}if(numberOfLoops >=0 && numberOfLoops <=5){for(int i=0;i < numberOfLoops;i++){IO.writeLine("hello world");}}}
private void main()throws Throwable{short data;while(true){data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){if(data < Short.MAX_VALUE){data++;short result=(short)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data="foo";(new b()).mainSink(request,response);}
private void main()throws Throwable{StringBuilder data;data=new StringBuilder("Good");IO.writeLine(data.toString());}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{while(true){Logger logger=Logger.getLogger("cwe_testcases_logger");if(request.getParameter("username")==null){return;}String username=request.getParameter("username");if(username.matches("[a-zA-Z0-9]*")){logger.log(Level.FINEST,"Username: "+username);}else{response.getWriter().println("Invalid characters");}break;}}
private void main()throws Throwable{String password;while(true){{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}break;}while(true){if(password!=null){KerberosPrincipal principal=new KerberosPrincipal("test");{Cipher aesCipher=Cipher.getInstance("AES");SecretKeySpec secretKeySpec=new SecretKeySpec("ABCDEFGHABCDEFGH".getBytes("UTF-8"),"AES");aesCipher.init(Cipher.DECRYPT_MODE,secretKeySpec);password=new String(aesCipher.doFinal(password.getBytes("UTF-8")),"UTF-8");}KerberosKey key=new KerberosKey(principal,password.toCharArray(),null);IO.writeLine(key.toString());}break;}}
private int mainSource()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;while(true){{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}break;}while(true){int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;count=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(count);byte[] countSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(countSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{count=2;(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=System.getenv("ADD");mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}short[] dataArray=new short[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;while(true){data=2;break;}HashSet intHashSet=new HashSet(data);}
private String mainSource()throws Throwable{String data;data=System.getenv("ADD");return data;}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);HashMap<Integer,Byte> dataHashMap=new HashMap<Integer,Byte>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;while(true){{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}break;}while(true){int numberOfLoops;try{numberOfLoops=Integer.parseInt(data);}catch(NumberFormatException exceptNumberFormat){IO.writeLine("Invalid response. Numeric input expected. Assuming 1.");numberOfLoops=1;}if(numberOfLoops >=0 && numberOfLoops <=5){for(int i=0;i < numberOfLoops;i++){IO.writeLine("hello world");}}break;}}
private void main()throws Throwable{float data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}float[] dataArray=new float[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource(request,response);if(data!=null){*/URI uri;try{uri=new URI(data);}catch(URISyntaxException exceptURISyntax){response.getWriter().write("Invalid redirect URL");return;}response.sendRedirect(data);return;}}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data=(new b()).mainSource();Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();int rowCount=sqlStatement.executeUpdate("insert into users(status)values('updated')where name='"+data+"'");IO.writeLine("Updated "+rowCount+" rows successfully.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{String data;data=System.getProperty("user.home");Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{long data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="foo";break;}if(data!=null){*/URI uri;try{uri=new URI(data);}catch(URISyntaxException exceptURISyntax){response.getWriter().write("Invalid redirect URL");return;}response.sendRedirect(data);return;}}
private void main()throws Throwable{short data;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);dataGoodB2G=data;mainSink();}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{short dataCopy;{short data;data=2;dataCopy=data;}{short data=dataCopy;short result=(short)(data+1);IO.writeLine("result: "+result);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=System.getenv("ADD");LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{float data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}if(Math.abs(data)> 0.000001){int result=(int)(100.0 % data);IO.writeLine(result);}else{IO.writeLine("This would result in a modulo by zero");}}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}
private int mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{int dataCopy;{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};if(data >=0 && data < array.length){array[data]=42;}else{IO.writeLine("Array index out of bounds");}}}
private void main()throws Throwable{int data=0;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int data;mainPublicStatic=true;data=(new b()).mainSource();HashMap intHashMap=new HashMap(data);}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int count;count=2;File file=new File("badSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}}
private void main()throws Throwable{int data=0;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;{int result=(int)(data * 2);IO.writeLine("result: "+result);}}
private void main()throws Throwable{long data=(new b()).mainSource();long result=(long)(++data);IO.writeLine("result: "+result);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{long data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;data="5";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);Connection dbConnection=null;Statement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();resultSet=sqlStatement.executeQuery("select * from users where name='"+data+"'");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int count=(new b()).mainSource();File file=new File("badSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String dataCopy;{String data;data=System.getenv("ADD");dataCopy=data;}{String data=dataCopy;if(data!=null){System.out.format("%s%n",data);}}}
private void main()throws Throwable{short data=(new b()).mainSource();data++;short result=(short)(data);IO.writeLine("result: "+result);}
private void main()throws Throwable{String data;while(true){{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}break;}while(true){int numberOfLoops;try{numberOfLoops=Integer.parseInt(data);}catch(NumberFormatException exceptNumberFormat){IO.writeLine("Invalid response. Numeric input expected. Assuming 1.");numberOfLoops=1;}if(numberOfLoops >=0 && numberOfLoops <=5){for(int i=0;i < numberOfLoops;i++){IO.writeLine("hello world");}}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){System.out.format(data);}}}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private long mainSource()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();return data;}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int count;count=Integer.MAX_VALUE;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(count);byte[] countSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(countSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);LinkedList<Byte> dataLinkedList=new LinkedList<Byte>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{short data;while(true){data=2;break;}while(true){data++;short result=(short)(data);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{String data;PasswordAuthentication credentials=new PasswordAuthentication("user","AP@ssw0rd".toCharArray());data=new String(credentials.getPassword());mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{String data;data="foo";mainSink(data);}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();long[] dataArray=new long[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int result=(int)(--data);IO.writeLine("result: "+result);}}
private short mainSource()throws Throwable{short data;data=2;return data;}
private void main()throws Throwable{int count;while(true){count=2;break;}while(true){File file=new File("badSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}break;}}
private void main()throws Throwable{float data;data=2.0f;mainSink(data);}
private void main()throws Throwable{short data;data=2;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){*/URI uri;try{uri=new URI(data);}catch(URISyntaxException exceptURISyntax){response.getWriter().write("Invalid redirect URL");return;}response.sendRedirect(data);return;}}
private void main()throws Throwable{String data=null;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{while(true){if(request.getContentType()==null || !request.getContentType().contains("multipart/form-data")){return;}FileOutputStream streamFileOutput=null;InputStream streamInput=null;try{streamFileOutput=new FileOutputStream("output_good.dat");streamInput=request.getInputStream();final int MAXSIZE=10485760;int bytesReadCount=0;for(;;){if(bytesReadCount >=MAXSIZE){response.getWriter().write("File exceeds MAXSIZE!");break;}byte[] inputBytes=new byte[1024];int bytesRead=streamInput.read(inputBytes);if(bytesRead==-1){break;}bytesReadCount+=bytesRead;streamFileOutput.write(inputBytes);}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error!",exceptIO);}finally{try{if(streamInput!=null){streamInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStream",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}}response.getWriter().write("Uploaded file!");break;}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();dataGoodB2G=data;mainSink();}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();if(data < Integer.MAX_VALUE){int result=(int)(data+1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform addition.");}}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{float data;data=2.0f;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{String data;while(true){{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}break;}while(true){Connection dbConnection=null;PreparedStatement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("select * from users where name=?");sqlStatement.setString(1,data);resultSet=sqlStatement.executeQuery();}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}break;}}
private void main()throws Throwable{String data;data="Hello World";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{int data=(new b()).mainSource();if(data!=0){IO.writeLine("100/"+data+"="+(100/data)+"\n");}else{IO.writeLine("This would result in a divide by zero");}}
private void main()throws Throwable{String data;data=System.getenv("ADD");mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{int count;count=2;Container countContainer=new Container();countContainer.containerOne=count;(new b()).mainSink(countContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int count;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}LinkedList<Integer> countLinkedList=new LinkedList<Integer>();countLinkedList.add(0,count);countLinkedList.add(1,count);countLinkedList.add(2,count);(new b()).mainSink(countLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data=(new b()).mainSource();IO.writeLine("100%"+data+"="+(100 % data)+"\n");}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data=0;data=Integer.MAX_VALUE;mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data=(new b()).mainSource();if(data < Integer.MAX_VALUE){int result=(int)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{short data=0;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainSink(data);}
private void main()throws Throwable{int data=(new b()).mainSource();data--;int result=(int)(data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="foo";break;}while(true){if(data!=null){response.setHeader("Location","/author.jsp?lang="+data);}break;}}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=true;data=main_source(request,response);if(data!=null){*/URI uri;try{uri=new URI(data);}catch(URISyntaxException exceptURISyntax){response.getWriter().write("Invalid redirect URL");return;}response.sendRedirect(data);return;}}
private void main()throws Throwable{short data;data=Short.MIN_VALUE;HashMap<Integer,Short> dataHashMap=new HashMap<Integer,Short>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;data="foo";Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name='"+data+"'");Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}(new b()).mainSink(request,response);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{while(true){response.getWriter().write("You cannot shut down this application,only the admin can");break;}}
private void main()throws Throwable{int data=(new b()).mainSource();{int result=(int)(data * 2);IO.writeLine("result: "+result);}}
private void main()throws Throwable{int data;mainPublicStatic=true;data=(new b()).mainSource();HashSet intHashSet=new HashSet(data);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data=0;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource();if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=true;data=main_source(request,response);if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();(new b()).mainSink(data);}
private void main()throws Throwable{String password;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(password);}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{int data=0;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){response.setHeader("Location","/author.jsp?lang="+data);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{StringBuilder data;data=new StringBuilder();(new b()).mainSink((Object)data);}
private void main()throws Throwable{short data;data=2;{short result=(short)(data * 2);IO.writeLine("result: "+result);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}if(data!=0){IO.writeLine("100/"+data+"="+(100/data)+"\n");}else{IO.writeLine("This would result in a divide by zero");}}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{int data=0;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=mainSource(request,response);Connection dBConnection=IO.getDBConnection();PreparedStatement preparedStatement=null;ResultSet resultSet=null;int id=0;try{id=Integer.parseInt(data);}catch(NumberFormatException nfx){}try{preparedStatement=dBConnection.prepareStatement("select * from invoices where uid=?");preparedStatement.setInt(1,id);resultSet=preparedStatement.executeQuery();IO.writeString("bad()-result requested: "+data+"\n");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error executing query",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Could not close ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Could not close PreparedStatement",exceptSql);}try{if(dBConnection!=null){dBConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Could not close Connection",exceptSql);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainPrivate=true;mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}if((data!=Integer.MIN_VALUE)&&(data!=Long.MIN_VALUE)&&(Math.abs(data)<=(long)Math.sqrt(Integer.MAX_VALUE))){int result=(int)(data * data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform squaring.");}}
private void main()throws Throwable{int data;main_private=false;data=main_source();HashMap intHashMap=new HashMap(data);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}(new b()).mainSink(data);}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";return data;}
private void main()throws Throwable{int countCopy;{int count;count=2;countCopy=count;}{int count=countCopy;Thread.sleep(count);}}
private void main()throws Throwable{short data;data=2;mainPrivate=true;mainSink(data);}
private String mainSource()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}return data;}
private void main()throws Throwable{int data=0;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data=System.getProperty("user.home");mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}mainPrivate=true;mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{float data;Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="5";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{long data;data=2;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{byte data;data=Byte.MAX_VALUE;if(data < Byte.MAX_VALUE){byte result=(byte)(data+1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform addition.");}}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink(data);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{long data;data=Long.MAX_VALUE;LinkedList<Long> dataLinkedList=new LinkedList<Long>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="CWE690";break;}while(true){String stringTrimmed=data.trim();IO.writeLine(stringTrimmed);break;}}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";return data;}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{String password;password="Password1234!";Container passwordContainer=new Container();passwordContainer.containerOne=password;(new b()).mainSink(passwordContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}}
private void main()throws Throwable{{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainSink(data,request,response);}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int count;count=2;Vector<Integer> countVector=new Vector<Integer>(5);countVector.add(0,count);countVector.add(1,count);countVector.add(2,count);(new b()).mainSink(countVector);}
private void main()throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{short data;data=2;Vector<Short> dataVector=new Vector<Short>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{long data;data=Long.MAX_VALUE;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{float data;{String stringNumber=System.getProperty("user.home");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}Vector<Float> dataVector=new Vector<Float>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{float data;{String stringNumber=System.getProperty("user.home");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}if(data!=0){IO.writeLine("100/"+data+"="+(100/data)+"\n");}else{IO.writeLine("This would result in a divide by zero");}}
private void main()throws Throwable{short data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{short data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String data;data="foo";Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{String data;data="foo";mainSink(data);}
private void main()throws Throwable{String data=(new b()).mainSource();Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();Boolean result=sqlStatement.execute("insert into users(status)values('updated')where name='"+data+"'");if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{float data;while(true){SecureRandom secureRandom=new SecureRandom();data=secureRandom.nextFloat();break;}while(true){if(Math.abs(data)> 0.000001){int result=(int)(100.0 % data);IO.writeLine(result);}else{IO.writeLine("This would result in a modulo by zero");}break;}}
private void main()throws Throwable{int [] data;data=null;HashMap<Integer,int []> dataHashMap=new HashMap<Integer,int []>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{String password;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainSink(password);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;data--;int result=(int)(data);IO.writeLine("result: "+result);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String data;data=System.getenv("ADD");mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}dataGoodB2G=data;mainSink(request,response);}
private void main()throws Throwable{String data;while(true){data="foo";break;}String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}
private void main()throws Throwable{int dataCopy;{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}dataCopy=data;}{int data=dataCopy;if(data!=0){IO.writeLine("100/"+data+"="+(100/data)+"\n");}else{IO.writeLine("This would result in a divide by zero");}}}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{int [] data;data=new int[5];LinkedList<int []> dataLinkedList=new LinkedList<int []>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;FileInputStream streamFileInput=null;String propertiesFileName="./CWE690_NULL_Deref_From_Return__Helper.properties";try{streamFileInput=new FileInputStream(propertiesFileName);Properties properties=new Properties();properties.load(streamFileInput);data=properties.getProperty("CWE690");}catch(IOException exceptIO){IO.writeLine("Could not open properties file: "+propertiesFileName);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException e){IO.logger.log(Level.WARNING,"Error closing FileInputStream",e);}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;while(true){{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}break;}while(true){int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}break;}}
private void main()throws Throwable{short data;mainPublicStatic=false;data=(new b()).mainSource();{IO.writeLine((byte)data);}}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String password;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}Vector<String> passwordVector=new Vector<String>(5);passwordVector.add(0,password);passwordVector.add(1,password);passwordVector.add(2,password);(new b()).mainSink(passwordVector);}
private void main()throws Throwable{int data;mainPublicStatic=false;data=(new b()).mainSource();HashMap intHashMap=new HashMap(data);}
private int mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}return data;}
private void main()throws Throwable{int data=0;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{long data;data=Long.MAX_VALUE;Vector<Long> dataVector=new Vector<Long>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int count;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink(count);}
private void main()throws Throwable{int data=0;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data=0;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=true;data=main_source(request,response);if(data!=null){response.getWriter().println("<br>bad()-<img src=\""+data+"\">");}}
private void main()throws Throwable{String data;data="Testing.test";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}mainPrivate=false;mainSink(data,request,response);}
private void main()throws Throwable{byte data;while(true){data=Byte.MAX_VALUE;break;}while(true){if(data < Byte.MAX_VALUE){byte result=(byte)(data+1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform addition.");}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{String data;data=System.getProperty("user.home");Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{float data;{String stringNumber=System.getProperty("user.home");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{short data;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);Vector<Short> dataVector=new Vector<Short>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;count=2;int[] countArray=new int[5];countArray[2]=count;(new b()).mainSink(countArray,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();HashMap<Integer,Long> dataHashMap=new HashMap<Integer,Long>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{short dataCopy;{short data;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);dataCopy=data;}{short data=dataCopy;if(data < Short.MAX_VALUE){short result=(short)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}}
private void main()throws Throwable{int count;count=2;mainPrivate=true;mainSink(count);}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{if(IO.staticReturnsTrueOrFalse()){int i=0;while(i++< 10){IO.writeLine("Inside the while statement");}IO.writeLine("Hello from good()");}else{int i=0;while(i++< 10){IO.writeLine("Inside the while statement");}IO.writeLine("Hello from good()");}}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int array[]={0,1,2,3,4};array[data]=42;break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){response.getWriter().println("<br>bad()-<img src=\""+data+"\">");}}}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private int mainSource()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=(new b()).mainSource(request,response);HashMap intHashMap=new HashMap(data);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;{IO.writeLine((byte)data);}}}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;data=100;int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{short data=0;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{count=2;(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{String data=(new b()).mainSource();String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=StringEscapeUtils.escapeXml(tokens[0]);String password=StringEscapeUtils.escapeXml(tokens[1]);XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}
private void main()throws Throwable{byte data;data=Byte.MAX_VALUE;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="foo";break;}if(data!=null){response.getWriter().println("<br>bad(): data="+data);}}
private void main()throws Throwable{short data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{int count;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}mainPrivate=true;mainSink(count);}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{short data;data=2;Vector<Short> dataVector=new Vector<Short>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{short dataCopy;{short data;data=2;dataCopy=data;}{short data=dataCopy;{IO.writeLine((byte)data);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}(new b()).mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(request,response);}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{String data;while(true){{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}break;}while(true){Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);int rowCount=sqlStatement.executeUpdate();IO.writeLine("Updated "+rowCount+" rows successfully.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}break;}}
private void main()throws Throwable{byte data;data=Byte.MAX_VALUE;Vector<Byte> dataVector=new Vector<Byte>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;data="foo";mainSink(data);}
private void main()throws Throwable{int dataCopy;{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main()throws Throwable{int count;count=2;Vector<Integer> countVector=new Vector<Integer>(5);countVector.add(0,count);countVector.add(1,count);countVector.add(2,count);(new b()).mainSink(countVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=true;data=main_source(request,response);if(data!=null){response.getWriter().println("<br>bad()-<img src=\""+data+"\">");}}
private void main()throws Throwable{String data=(new b()).mainSource();if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();for(int i=0;i < names.length;i++){sqlStatement.addBatch("update users set hitcount=hitcount+1 where name='"+names[i]+"'");}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statament",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{long data=(new b()).mainSource();long result=(long)(data+1);IO.writeLine("result: "+result);}
private void main()throws Throwable{int count;count=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(count);byte[] countSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(countSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;HashSet intHashSet=new HashSet(data);}
private void main()throws Throwable{String data=(new b()).mainSource();if(data!=null){System.out.printf(data);}}
private int mainSource()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{short data;data=2;dataGoodG2B=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="foo";break;}while(true){if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();for(int i=0;i < names.length;i++){sqlStatement.addBatch("update users set hitcount=hitcount+1 where name='"+names[i]+"'");}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statament",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}break;}}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=(new b()).mainSource(request,response);if(data < Integer.MAX_VALUE){int result=(int)(data+1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform addition.");}}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main()throws Throwable{{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink();}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;data="5";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int data;data=2;int array[]=null;if(data >=0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;data=Integer.MAX_VALUE;if(data < Integer.MAX_VALUE){int result=(int)(data+1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform addition.");}}
private String mainSource()throws Throwable{String data;data="foo";return data;}
private void main()throws Throwable{float data;Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}HashMap<Integer,Float> dataHashMap=new HashMap<Integer,Float>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);Vector<Byte> dataVector=new Vector<Byte>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){data--;int result=(int)(data);IO.writeLine("result: "+result);break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{String password;password="Password1234!";String[] passwordArray=new String[5];passwordArray[2]=password;(new b()).mainSink(passwordArray);}
private void main()throws Throwable{String data;data="CWE690";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{float data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data=null;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{int data=0;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String password;password="Password1234!";mainSink(password);}
private void main()throws Throwable{int count;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}if(count > 0 && count <=2000){Thread.sleep(count);}}
private void main()throws Throwable{data=(new SecureRandom()).nextInt();(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{String password;password="Password1234!";String[] passwordArray=new String[5];passwordArray[2]=password;(new b()).mainSink(passwordArray);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}{if(data >(Integer.MIN_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform multiplication.");}}}
private void main()throws Throwable{short data;while(true){data=2;break;}while(true){short result=(short)(data+1);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{String data;data="Testing.test";mainSink(data);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data=0;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("name");Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{String data;data="5";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int [] data;data=null;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;IO.writeLine("bad: 100/"+data+"="+(100/data)+"\n");}}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("update users set hitcount=hitcount+1 where name=?");for(int i=0;i < names.length;i++){sqlStatement.setString(1,names[i]);sqlStatement.addBatch();}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{String data;FileInputStream streamFileInput=null;String propertiesFileName="./CWE690_NULL_Deref_From_Return__Helper.properties";try{streamFileInput=new FileInputStream(propertiesFileName);Properties properties=new Properties();properties.load(streamFileInput);data=properties.getProperty("CWE690");}catch(IOException exceptIO){IO.writeLine("Could not open properties file: "+propertiesFileName);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException e){IO.logger.log(Level.WARNING,"Error closing FileInputStream",e);}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private int mainSource()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return data;}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}long[] dataArray=new long[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){response.getWriter().println("<br>bad()-<img src=\""+data+"\">");}}
private void main()throws Throwable{int data=0;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int result=(int)(data-1);IO.writeLine("result: "+result);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};if(data >=0){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}}
private void main()throws Throwable{long data=0L;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data=2;(new b()).mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}mainPrivate=false;mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;count=2;countGoodG2B=count;mainSink(request,response);}
private byte mainSource()throws Throwable{byte data;data=Byte.MIN_VALUE;return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{int data;data=2;int result=(int)(data-1);IO.writeLine("result: "+result);}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name='"+data+"'");Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{int count;count=2;countGoodG2B=count;mainSink();}
private void main()throws Throwable{short data;while(true){data=Short.MAX_VALUE;break;}while(true){if((data!=Integer.MIN_VALUE)&&(data!=Long.MIN_VALUE)&&(Math.abs(data)<=(long)Math.sqrt(Short.MAX_VALUE))){short result=(short)(data * data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform squaring.");}break;}}
private void main()throws Throwable{int data;mainPublicStatic=true;data=(new b()).mainSource();{IO.writeLine((byte)data);}}
private void main()throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}if(data > Integer.MIN_VALUE){data--;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]={0,1,2,3,4};array[data]=42;}
private void main()throws Throwable{int count;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(count);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{long data;data=2;Vector<Long> dataVector=new Vector<Long>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main()throws Throwable{while(true){int intRandom=(new SecureRandom()).nextInt(3);String stringValue;switch(intRandom){case 1: stringValue="one";break;case 2: stringValue="two";default: stringValue="Default";break;}IO.writeLine(stringValue);break;}}
private void main()throws Throwable{byte data;data=2;LinkedList<Byte> dataLinkedList=new LinkedList<Byte>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private String mainSource()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}return data;}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;try{dbConnection=IO.getDBConnection();dbConnection.setCatalog(data);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();int result=(int)(--data);IO.writeLine("result: "+result);}
private void main()throws Throwable{String data;data=System.getProperty("CWE690");(new b()).mainSink(data);}
private void main()throws Throwable{byte data;data=Byte.MIN_VALUE;mainSink(data);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int array[]={0,1,2,3,4};array[data]=42;break;}}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink(data,request,response);}
private byte mainSource()throws Throwable{byte data;data=2;return data;}
private void main()throws Throwable{int data=0;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{String data;data=System.getenv("ADD");(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){*/URI uri;try{uri=new URI(data);}catch(URISyntaxException exceptURISyntax){response.getWriter().write("Invalid redirect URL");return;}response.sendRedirect(data);return;}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{float data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}if(Math.abs(data)> 0.000001){int result=(int)(100.0/data);IO.writeLine(result);}else{IO.writeLine("This would result in a divide by zero");}}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data=(new b()).mainSource();String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}
private void main()throws Throwable{short dataCopy;{short data;data=2;dataCopy=data;}{short data=dataCopy;{short result=(short)(data * 2);IO.writeLine("result: "+result);}}}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();mainSink(data);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;while(true){{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}break;}while(true){if((data!=Integer.MIN_VALUE)&&(data!=Long.MIN_VALUE)&&(Math.abs(data)<=(long)Math.sqrt(Integer.MAX_VALUE))){int result=(int)(data * data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform squaring.");}break;}}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{data=Short.MIN_VALUE;(new b()).mainSink();}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data=2;(new b()).mainSink(request,response);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{data=Short.MAX_VALUE;(new b()).mainSink();}
private void main()throws Throwable{int data;mainPublicStatic=true;data=(new b()).mainSource();HashSet intHashSet=new HashSet(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}int i=0;if(count > 0 && count <=20){for(i=0;i < count;i++){IO.writeLine("Hello");}}}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{float data=0.0f;SecureRandom secureRandom=new SecureRandom();data=secureRandom.nextFloat();mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;FileInputStream streamFileInput=null;String propertiesFileName="./CWE690_NULL_Deref_From_Return__Helper.properties";try{streamFileInput=new FileInputStream(propertiesFileName);Properties properties=new Properties();properties.load(streamFileInput);data=properties.getProperty("CWE690");}catch(IOException exceptIO){IO.writeLine("Could not open properties file: "+propertiesFileName);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException e){IO.logger.log(Level.WARNING,"Error closing FileInputStream",e);}}Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data=(new b()).mainSource();if(data!=null){System.out.format(data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="Testing.test";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{byte data;data=2;LinkedList<Byte> dataLinkedList=new LinkedList<Byte>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{int data;mainPublicStatic=true;data=(new b()).mainSource();HashSet intHashSet=new HashSet(data);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{long data;data=2;mainSink(data);}
private void main()throws Throwable{byte data;data=2;byte result=(byte)(data+1);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{byte data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;IO.writeLine("100%"+data+"="+(100 % data)+"\n");}}
private void main()throws Throwable{int data;while(true){{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){int array[]={0,1,2,3,4};if(data >=0 && data < array.length){array[data]=42;}else{IO.writeLine("Array index out of bounds");}break;}}
private void main()throws Throwable{byte data;data=Byte.MIN_VALUE;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int count;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}Container countContainer=new Container();countContainer.containerOne=count;(new b()).mainSink(countContainer);}
private float mainSource()throws Throwable{float data;data=2.0f;return data;}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{String data;while(true){data=System.getProperty("user.home");break;}while(true){Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}break;}}
private void main()throws Throwable{long data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=System.getProperty("user.home");(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private String mainSource()throws Throwable{String data;data="foo";return data;}
private void main()throws Throwable{int data;data=2;{int result=(int)(data * 2);IO.writeLine("result: "+result);}}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{int data;main_private=true;data=main_source();HashSet intHashSet=new HashSet(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{String data=mainSource();Connection dbConnection=null;try{dbConnection=IO.getDBConnection();dbConnection.setCatalog(data);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{String data;data=System.getProperty("user.home");ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;data=System.getProperty("user.home");mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;dataGoodG2B=data;mainSink(request,response);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{count=2;(new b()).mainSink(request,response);}
private void main()throws Throwable{byte data=(new b()).mainSource();if(data > Byte.MIN_VALUE){data--;byte result=(byte)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private int mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();Vector<Long> dataVector=new Vector<Long>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{short data;data=Short.MIN_VALUE;mainSink(data);}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{String dataCopy;{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}dataCopy=data;}{String data=dataCopy;String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=StringEscapeUtils.escapeXml(tokens[0]);String password=StringEscapeUtils.escapeXml(tokens[1]);XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}}
private void main()throws Throwable{int data=0;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{short data=0;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){data=2;break;}while(true){{int result=(int)(data * 2);IO.writeLine("result: "+result);}break;}}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{short data;data=2;LinkedList<Short> dataLinkedList=new LinkedList<Short>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};array[data]=42;}}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{String data=null;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=-1;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";return data;}
private void main()throws Throwable{int dataCopy;{int data;data=(new SecureRandom()).nextInt();dataCopy=data;}{int data=dataCopy;{if(data <(Integer.MAX_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform multiplication.");}}}}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){data=2;break;}HashMap intHashMap=new HashMap(data);}
private void main()throws Throwable{int count;count=2;Container countContainer=new Container();countContainer.containerOne=count;(new b()).mainSink(countContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{String data=null;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";if(data!=null){response.addHeader("Location","/author.jsp?lang="+data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;Statement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();resultSet=sqlStatement.executeQuery("select * from users where name='"+data+"'");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data=(new b()).mainSource();if(data!=null){System.out.format("%s%n",data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainPrivate=true;mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=System.getenv("ADD");if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.addHeader("Location","/author.jsp?lang="+data);}}
private void main()throws Throwable{int count;count=2;LinkedList<Integer> countLinkedList=new LinkedList<Integer>();countLinkedList.add(0,count);countLinkedList.add(1,count);countLinkedList.add(2,count);(new b()).mainSink(countLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private int mainSource()throws Throwable{int count;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}return count;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}dataCopy=data;}{int data=dataCopy;if(data!=0){IO.writeLine("100/"+data+"="+(100/data)+"\n");}else{IO.writeLine("This would result in a divide by zero");}}}
private void main()throws Throwable{short data;data=Short.MIN_VALUE;Vector<Short> dataVector=new Vector<Short>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data="foo";(new b()).mainSink(request,response);}
private void main()throws Throwable{int count;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Container countContainer=new Container();countContainer.containerOne=count;(new b()).mainSink(countContainer);}
private byte mainSource()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return data;}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{int data=0;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){IO.writeLine("100%"+data+"="+(100 % data)+"\n");break;}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}(new b()).mainSink(request,response);}
private void main()throws Throwable{String data;data="foo";mainSink(data);}
private void main()throws Throwable{byte data;data=2;{byte result=(byte)(data * 2);IO.writeLine("result: "+result);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{int data=mainSource();{IO.writeLine((short)data);}}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int count;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink(count);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int result=(int)(data * data);IO.writeLine("result: "+result);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPrivate=true;mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{long data;while(true){data=2;break;}while(true){data--;long result=(long)(data);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{int data;data=2;{int result=(int)(data * 2);IO.writeLine("result: "+result);}}
private void main()throws Throwable{String password;password="Password1234!";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(password);byte[] passwordSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(passwordSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;dataGoodG2B=data;mainSink(request,response);}
private void main()throws Throwable{int dataCopy;{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataCopy=data;}{int data=dataCopy;if(data!=0){IO.writeLine("100%"+data+"="+(100 % data)+"\n");}else{IO.writeLine("This would result in a modulo by zero");}}}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{byte data;data=2;{byte result=(byte)(data * 2);IO.writeLine("result: "+result);}}
private void main()throws Throwable{int count;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(count);}
private void main()throws Throwable{data=Long.MAX_VALUE;(new b()).mainSink();}
private void main()throws Throwable{int data;data=Integer.MIN_VALUE;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink(request,response);}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data=0;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{short data;while(true){data=2;break;}while(true){{short result=(short)(data * 2);IO.writeLine("result: "+result);}break;}}
private void main()throws Throwable{count=2;(new b()).mainSink();}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();(new b()).mainSink(data);}
private int mainSource()throws Throwable{int count;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}return count;}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink(data);}
private void main()throws Throwable{String dataCopy;{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}dataCopy=data;}{int data=dataCopy;{if(data <(Integer.MAX_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform multiplication.");}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{String data;data=System.getenv("ADD");String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{byte data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{String data;while(true){data=CWE690_NULL_Deref_From_Return__Class_Helper.getStringBad();break;}while(true){if(data!=null){String stringTrimmed=data.trim();IO.writeLine(stringTrimmed);}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){data=2;break;}while(true){int result=(int)(data-1);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource();String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}return data;}
private void main()throws Throwable{int countCopy;{int count;count=2;countCopy=count;}{int count=countCopy;File file=new File("badSink.txt");FileOutputStream streamFileOutput=new FileOutputStream(file);OutputStreamWriter writerOutputStream=new OutputStreamWriter(streamFileOutput,"UTF-8");BufferedWriter writerBuffered=new BufferedWriter(writerOutputStream);int i;for(i=0;i < count;i++){try{writerBuffered.write("Hello");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream writing",exceptIO);}}try{if(writerBuffered!=null){writerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedWriter",exceptIO);}try{if(writerOutputStream!=null){writerOutputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing OutputStreamWriter",exceptIO);}try{if(streamFileOutput!=null){streamFileOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{if(IO.staticReturnsTrueOrFalse()){int count=0;do{if(count==20000){IO.writeLine("Sorry,your license has expired. Please contact support.");}count++;}while(count < Integer.MAX_VALUE);}else{int count=0;do{if(count==20000){IO.writeLine("Sorry,your license has expired. Please contact support.");}count++;}while(count < Integer.MAX_VALUE);}}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}int array[]={0,1,2,3,4};if(data >=0 && data < array.length){array[data]=42;}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{long data;data=Long.MAX_VALUE;HashMap<Integer,Long> dataHashMap=new HashMap<Integer,Long>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();for(int i=0;i < names.length;i++){sqlStatement.addBatch("update users set hitcount=hitcount+1 where name='"+names[i]+"'");}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statament",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}}
private void main()throws Throwable{int count;count=2;countGoodG2B=count;mainSink();}
private void main()throws Throwable{float data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data=0;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{if(IO.staticReturnsTrueOrFalse()){try{}{IO.writeLine("Caught Exception");}}else{try{}{IO.writeLine("Caught Exception");}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.addHeader("Location","/author.jsp?lang="+data);}}
private void main()throws Throwable{int data;data=100;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data=(new b()).mainSource();String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=StringEscapeUtils.escapeXml(tokens[0]);String password=StringEscapeUtils.escapeXml(tokens[1]);XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}
private void main()throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource();Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{int data;data=100;dataGoodB2G=data;mainSink();}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink((Object)data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data=2;(new b()).mainSink(request,response);}
private int mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int count;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink(count);}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data=mainSource();Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private int mainSource()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}return data;}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=false;data=main_source(request,response);Class<?> tempClass=Class.forName(data);Object tempClassObject=tempClass.newInstance();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){Cookie cookieSink=new Cookie("lang",data);response.addCookie(cookieSink);}}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;mainPublicStatic=false;data=(new b()).mainSource();String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){Cookie cookieSink=new Cookie("lang",data);response.addCookie(cookieSink);}}}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{byte dataCopy;{byte data;data=Byte.MIN_VALUE;dataCopy=data;}{byte data=dataCopy;if(data > Byte.MIN_VALUE){byte result=(byte)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}}}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;{int result=(int)(data * 2);IO.writeLine("result: "+result);}}}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";return data;}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{byte data;data=2;mainSink(data);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private short mainSource()throws Throwable{short data;data=2;return data;}
private void main()throws Throwable{int count;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}countGoodB2G=count;mainSink();}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=(new b()).mainSource(request,response);Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();int rowCount=sqlStatement.executeUpdate("insert into users(status)values('updated')where name='"+data+"'");IO.writeLine("Updated "+rowCount+" rows successfully.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainSink(data,request,response);}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);Vector<Byte> dataVector=new Vector<Byte>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data=0;data=100;mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";mainSink(data);}
private void main()throws Throwable{int data=mainSource();{IO.writeLine((short)data);}}
private void main()throws Throwable{float data;data=2.0f;HashMap<Integer,Float> dataHashMap=new HashMap<Integer,Float>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private float mainSource()throws Throwable{float data;data=2.0f;return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}dataCopy=data;}{int data=dataCopy;if(data > Integer.MIN_VALUE){data--;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}}
private void main()throws Throwable{short data;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private int mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;{String stringNumber=request.getParameter("name");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading count from parameter 'name'",exceptNumberFormat);}}return count;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPrivate=false;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}mainPrivate=true;mainSink(count,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;main_private=true;data=main_source(request,response);HashMap intHashMap=new HashMap(data);}
private short mainSource()throws Throwable{short data;data=2;return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;main_private=false;data=main_source(request,response);HashSet intHashSet=new HashSet(data);}
private void main()throws Throwable{short data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{float data;data=2.0f;LinkedList<Float> dataLinkedList=new LinkedList<Float>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();for(int i=0;i < names.length;i++){sqlStatement.addBatch("update users set hitcount=hitcount+1 where name='"+names[i]+"'");}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statament",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{StringBuilder data;data=new StringBuilder();(new b()).mainSink(data);}
private void main()throws Throwable{int data=0;data=(new SecureRandom()).nextInt();mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{StringBuilder data;data=CWE690_NULL_Deref_From_Return__Class_Helper.getStringBuilderBad();ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{float data;data=2.0f;float[] dataArray=new float[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{short data;while(true){data=2;break;}while(true){short result=(short)(--data);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{String data;data="5";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{String data=(new b()).mainSource();String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=StringEscapeUtils.escapeXml(tokens[0]);String password=StringEscapeUtils.escapeXml(tokens[1]);XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}
private void main()throws Throwable{int dataCopy;{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{long data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;while(true){data="foo";break;}if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{short data;while(true){data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){if((data!=Integer.MIN_VALUE)&&(data!=Long.MIN_VALUE)&&(Math.abs(data)<=(long)Math.sqrt(Short.MAX_VALUE))){short result=(short)(data * data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform squaring.");}break;}}
private void main()throws Throwable{byte data;data=2;Vector<Byte> dataVector=new Vector<Byte>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String password;password="Password1234!";Vector<String> passwordVector=new Vector<String>(5);passwordVector.add(0,password);passwordVector.add(1,password);passwordVector.add(2,password);(new b()).mainSink(passwordVector);}
private void main()throws Throwable{int count;{String stringNumber=System.getProperty("user.home");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}(new b()).mainSink((Object)count);}
private void main()throws Throwable{int dataCopy;{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataCopy=data;}{int data=dataCopy;if(data!=0){IO.writeLine("100%"+data+"="+(100 % data)+"\n");}else{IO.writeLine("This would result in a modulo by zero");}}}
private void main()throws Throwable{{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink(request,response);}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{String data;data="foo";if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();for(int i=0;i < names.length;i++){sqlStatement.addBatch("update users set hitcount=hitcount+1 where name='"+names[i]+"'");}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statament",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{int data;main_private=false;data=main_source();{IO.writeLine((byte)data);}}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int count;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}int i=0;if(count > 0 && count <=20){for(i=0;i < count;i++){IO.writeLine("Hello");}}}
private void main()throws Throwable{float data;data=2.0f;float[] dataArray=new float[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){data=2;break;}while(true){data++;int result=(int)(data);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{String password;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(password);}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{String data;data="foo";mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int result=(int)(data+1);IO.writeLine("result: "+result);}}
private void main()throws Throwable{int data;mainPublicStatic=true;data=(new b()).mainSource();ArrayList intArrayList=new ArrayList(data);}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{int data;while(true){{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}break;}while(true){{if(data >(Integer.MIN_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform multiplication.");}}break;}}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{int data=0;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{byte data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{data=(new SecureRandom()).nextInt();(new b()).mainSink();}
private void main()throws Throwable{int data;while(true){{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}break;}while(true){if(data > Integer.MIN_VALUE){int result=(int)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}break;}}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{byte data;while(true){data=2;break;}while(true){byte result=(byte)(data * data);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{long data;data=2;Vector<Long> dataVector=new Vector<Long>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;while(true){data=2;break;}while(true){int array[]=null;if(data >=0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);break;}}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink(request,response);}
private void main()throws Throwable{String data=null;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}(new b()).mainSink();}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}mainSink(data,request,response);}
private void main()throws Throwable{String password=(new b()).mainSource();Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=DriverManager.getConnection("data-url","root",password);preparedStatement=connection.prepareStatement("select * from test_table");resultSet=preparedStatement.executeQuery();}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{int data;main_private=true;data=main_source();HashMap intHashMap=new HashMap(data);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data="CWE690";dataCopy=data;}{String data=dataCopy;String stringTrimmed=data.trim();IO.writeLine(stringTrimmed);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=2;{IO.writeLine((byte)data);}}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();mainSink(data);}
private void main()throws Throwable{short data=(new b()).mainSource();if(data < Short.MAX_VALUE){short result=(short)(data+1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform addition.");}}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=false;data=(new b()).mainSource(request,response);if(data!=null){response.getWriter().println("<br>bad(): data="+data.replaceAll("(<script>)",""));}}
private void main()throws Throwable{int count;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}int[] countArray=new int[5];countArray[2]=count;(new b()).mainSink(countArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}mainSink(data,request,response);}
private void main()throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;HashMap intHashMap=new HashMap(data);}
private void main()throws Throwable{float data=0.0f;mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int count;count=2;(new b()).mainSink(count);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}}
private String mainSource()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return data;}
private void main()throws Throwable{String password;password="Password1234!";(new b()).mainSink((Object)password);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}dataCopy=data;}{String data=dataCopy;if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.addHeader("Location","/author.jsp?lang="+data);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataCopy=data;}{String data=dataCopy;if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.addHeader("Location","/author.jsp?lang="+data);}}}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{float data=0.0f;{String stringNumber=System.getenv("ADD");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{int data=0;data=Integer.MIN_VALUE;mainPublicStatic=true;(new b()).mainSink(data);}
private String mainSource()throws Throwable{String data;data="foo";return data;}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{String dataCopy;{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataCopy=data;}{String data=dataCopy;String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=StringEscapeUtils.escapeXml(tokens[0]);String password=StringEscapeUtils.escapeXml(tokens[1]);XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}}
private void main()throws Throwable{float data=(new b()).mainSource();int result=(int)(100.0/data);IO.writeLine(result);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int countCopy;{int count;count=2;countCopy=count;}{int count=countCopy;Thread.sleep(count);}}
private void main()throws Throwable{long data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int count;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}if(count > 0 && count <=2000){Thread.sleep(count);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;IO.writeLine("bad: 100/"+data+"="+(100/data)+"\n");}
private void main()throws Throwable{{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}(new b()).mainSink();}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{short data;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);short[] dataArray=new short[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=false;data=main_source(request,response);if(data!=null){*/URI uri;try{uri=new URI(data);}catch(URISyntaxException exceptURISyntax){response.getWriter().write("Invalid redirect URL");return;}response.sendRedirect(data);return;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}dataCopy=data;}{int data=dataCopy;if((data!=Integer.MIN_VALUE)&&(data!=Long.MIN_VALUE)&&(Math.abs(data)<=(long)Math.sqrt(Integer.MAX_VALUE))){int result=(int)(data * data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform squaring.");}}}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){System.out.printf(data);}}}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}byte[] dataArray=new byte[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{short data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int count;count=Integer.MAX_VALUE;countGoodB2G=count;mainSink();}
private void main()throws Throwable{String data;data=System.getProperty("user.home");HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("update users set hitcount=hitcount+1 where name=?");for(int i=0;i < names.length;i++){sqlStatement.setString(1,names[i]);sqlStatement.addBatch();}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{int data=0;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}dataGoodB2G=data;mainSink(request,response);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int count;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPrivate=true;mainSink(count);}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{String data=(new b()).mainSource();Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);Boolean result=sqlStatement.execute();if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource();String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int count;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(count);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{long data;data=2;LinkedList<Long> dataLinkedList=new LinkedList<Long>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{String data;data="foo";if(data!=null){String names[]=data.split("-");int successCount=0;Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();for(int i=0;i < names.length;i++){sqlStatement.addBatch("update users set hitcount=hitcount+1 where name='"+names[i]+"'");}int resultsArray[]=sqlStatement.executeBatch();for(int i=0;i < names.length;i++){if(resultsArray[i] > 0){successCount++;}}IO.writeLine("Succeeded in "+successCount+" out of "+names.length+" queries.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statament",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{float dataCopy;{float data;data=2.0f;dataCopy=data;}{float data=dataCopy;int result=(int)(100.0 % data);IO.writeLine(result);}}
private void main()throws Throwable{int dataCopy;{int data;data=Integer.MIN_VALUE;dataCopy=data;}{int data=dataCopy;{if(data >(Integer.MIN_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform multiplication.");}}}}
private void main()throws Throwable{int data=0;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;data=System.getenv("ADD");Connection dbConnection=null;PreparedStatement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("select * from users where name=?");sqlStatement.setString(1,data);resultSet=sqlStatement.executeQuery();}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{float data;data=2.0f;dataGoodG2B=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int count=0;{String stringNumber=System.getProperty("user.home");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}mainPublicStatic=false;(new b()).mainSink(count);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{short data;data=2;mainSink(data);}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{short data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;while(true){{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}break;}while(true){if(data!=0){IO.writeLine("100%"+data+"="+(100 % data)+"\n");}else{IO.writeLine("This would result in a modulo by zero");}break;}}
private void main()throws Throwable{float data;data=2.0f;HashMap<Integer,Float> dataHashMap=new HashMap<Integer,Float>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private String mainSource()throws Throwable{String data;data="CWE690";return data;}
private void main()throws Throwable{while(true){IO.writeLine("Not in path");break;}}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();Boolean result=sqlStatement.execute("insert into users(status)values('updated')where name='"+data+"'");if(result){IO.writeLine("Name,"+data+",updated successfully");}else{IO.writeLine("Unable to update records for user: "+data);}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{String data;main_private=false;data=main_source();Connection dbConnection=null;try{dbConnection=IO.getDBConnection();dbConnection.setCatalog(data);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{float data;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}float[] dataArray=new float[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private int mainSource()throws Throwable{int count;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}return count;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int count;{String stringNumber=request.getParameter("name");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading count from parameter 'name'",exceptNumberFormat);}}mainPrivate=false;mainSink(count,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;dataGoodG2B=data;mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{float data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{byte data;data=2;mainSink(data);}
private void main()throws Throwable{String password;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Vector<String> passwordVector=new Vector<String>(5);passwordVector.add(0,password);passwordVector.add(1,password);passwordVector.add(2,password);(new b()).mainSink(passwordVector);}
private void main()throws Throwable{String password;password="Password1234!";Vector<String> passwordVector=new Vector<String>(5);passwordVector.add(0,password);passwordVector.add(1,password);passwordVector.add(2,password);(new b()).mainSink(passwordVector);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int count;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(count);byte[] countSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(countSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data=(new b()).mainSource();Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{int [] data=null;data=null;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;while(true){{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}break;}while(true){if(data!=0){IO.writeLine("100/"+data+"="+(100/data)+"\n");}else{IO.writeLine("This would result in a divide by zero");}break;}}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=mainSource(request,response);if(data!=null){*/URI uri;try{uri=new URI(data);}catch(URISyntaxException exceptURISyntax){response.getWriter().write("Invalid redirect URL");return;}response.sendRedirect(data);return;}}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink(data);}
private int mainSource()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}return data;}
private void main()throws Throwable{short data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="foo";break;}while(true){if(data!=null){response.addHeader("Location","/author.jsp?lang="+data);}break;}}
private void main()throws Throwable{String data;data=System.getenv("ADD");LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{byte data;data=2;HashMap<Integer,Byte> dataHashMap=new HashMap<Integer,Byte>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}LinkedList<Long> dataLinkedList=new LinkedList<Long>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{long data=(new b()).mainSource();long result=(long)(data * data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int result=(int)(data+1);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{int count;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainSink(count);}
private int mainSource()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}return data;}
private void main()throws Throwable{String data;while(true){{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){Connection dbConnection=null;PreparedStatement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("insert into users(status)values('updated')where name=?");sqlStatement.setString(1,data);int rowCount=sqlStatement.executeUpdate();IO.writeLine("Updated "+rowCount+" rows successfully.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}break;}}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;data="foo";mainSink(data);}
private void main()throws Throwable{int data=0;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{int count;count=2;mainSink(count);}
private void main()throws Throwable{short data;data=2;Vector<Short> dataVector=new Vector<Short>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{short data;data=Short.MAX_VALUE;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{byte data;data=Byte.MAX_VALUE;dataGoodB2G=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{int count;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}mainPrivate=true;mainSink(count);}
private void main()throws Throwable{String data;try{InputStreamReader readerInputStream=new InputStreamReader(System.in,"UTF-8");BufferedReader readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{byte dataCopy;{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataCopy=data;}{byte data=dataCopy;if(data > Byte.MIN_VALUE){byte result=(byte)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}}}
private void main()throws Throwable{int data;while(true){{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}break;}while(true){if(data > Integer.MIN_VALUE){int result=(int)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}break;}}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{StringBuilder data;data=null;Vector<StringBuilder> dataVector=new Vector<StringBuilder>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;while(true){data="foo";break;}while(true){if(data!=null){System.out.printf(data);}break;}}
private String mainSource()throws Throwable{String data;data="foo";return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;Statement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();resultSet=sqlStatement.executeQuery("select * from users where name='"+data+"'");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main()throws Throwable{float data;data=2.0f;int result=(int)(100.0 % data);IO.writeLine(result);}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);Vector<Byte> dataVector=new Vector<Byte>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{short data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{long dataCopy;{long data;data=(new java.security.SecureRandom()).nextLong();dataCopy=data;}{long data=dataCopy;if(data > Long.MIN_VALUE){long result=(long)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}}}
private String mainSource()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return data;}
private void main()throws Throwable{int [] data;data=new int[5];mainPrivate=true;mainSink(data);}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data=(new b()).mainSource();int result=(int)(--data);IO.writeLine("result: "+result);}
private String mainSource()throws Throwable{String data;data="5";return data;}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;data="foo";String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{String data;while(true){try{InputStreamReader readerInputStream=new InputStreamReader(System.in,"UTF-8");BufferedReader readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}break;}if(data!=null){PasswordAuthentication credentials=new PasswordAuthentication("user",data.toCharArray());IO.writeLine(credentials.toString());}}
private void main()throws Throwable{float data;mainPrivate=false;mainSink(data);}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=tokens[0];String password=tokens[1];XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;if(data!=null){response.getWriter().println("<br>bad()-<img src=\""+data+"\">");}}}
private short mainSource()throws Throwable{short data;data=2;return data;}
private void main()throws Throwable{int data;data=100;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private int mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{String password=(new b()).mainSource();{Cipher aesCipher=Cipher.getInstance("AES");SecretKeySpec secretKeySpec=new SecretKeySpec("ABCDEFGHABCDEFGH".getBytes("UTF-8"),"AES");aesCipher.init(Cipher.DECRYPT_MODE,secretKeySpec);String decryptedPassword=new String(aesCipher.doFinal(password.getBytes("UTF-8")),"UTF-8");password=decryptedPassword;}Connection dBConnection=null;try{dBConnection=DriverManager.getConnection("192.168.105.23","sa",password);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(dBConnection!=null){dBConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{int count;count=2;int[] countArray=new int[5];countArray[2]=count;(new b()).mainSink(countArray);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{byte data;data=Byte.MAX_VALUE;Vector<Byte> dataVector=new Vector<Byte>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{String data;main_private=false;data=main_source();String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data=System.getenv("ADD");break;}while(true){if(data!=null){Cookie cookieSink=new Cookie("lang",URLEncoder.encode(data,"UTF-8"));response.addCookie(cookieSink);}break;}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{float data=0.0f;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;mainPublicStatic=true;data=(new b()).mainSource();{IO.writeLine((short)data);}}
private void main()throws Throwable{String data;data=System.getenv("ADD");mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;main_private=true;data=main_source();ArrayList intArrayList=new ArrayList(data);}
private void main()throws Throwable{String dataCopy;{String data;data="foo";dataCopy=data;}{String data=dataCopy;String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=tokens[0];String password=tokens[1];XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}}
private void main()throws Throwable{short data;data=2;LinkedList<Short> dataLinkedList=new LinkedList<Short>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int count;{String stringNumber=System.getProperty("user.home");try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}HashMap<Integer,Integer> countHashMap=new HashMap<Integer,Integer>();countHashMap.put(0,count);countHashMap.put(1,count);countHashMap.put(2,count);(new b()).mainSink(countHashMap);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{byte data;data=2;HashMap<Integer,Byte> dataHashMap=new HashMap<Integer,Byte>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="Testing.test";Class<?> tempClass=Class.forName(data);Object tempClassObject=tempClass.newInstance();}
private int mainSource()throws Throwable{int count;count=2;return count;}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int count;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}int i=0;if(count > 0 && count <=20){for(i=0;i < count;i++){IO.writeLine("Hello");}}}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private void main()throws Throwable{short dataCopy;{short data;data=2;dataCopy=data;}{short data=dataCopy;short result=(short)(data * data);IO.writeLine("result: "+result);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}dataCopy=data;}{int data=dataCopy;if(data < Integer.MAX_VALUE){int result=(int)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data=2;(new b()).mainSink(request,response);}
private void main()throws Throwable{int count;count=2;(new b()).mainSink((Object)count);}
private void main()throws Throwable{int data=0;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}(new b()).mainSink(data,request,response);}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();Vector<Long> dataVector=new Vector<Long>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{long data=0L;data=Long.MIN_VALUE;mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int count;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPrivate=true;mainSink(count);}
private int mainSource()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}return data;}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=(new b()).mainSource(request,response);{int result=(int)(data * 2);IO.writeLine("result: "+result);}}
private void main()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}if(data!=null){System.out.format("%s%n",data);}}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data=0;data=-1;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{byte data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink(request,response);}
private void main()throws Throwable{long data;while(true){data=2;break;}while(true){long result=(long)(data-1);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{int data;mainPublicStatic=true;data=(new b()).mainSource();ArrayList intArrayList=new ArrayList(data);}
private void main()throws Throwable{int data=0;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data;data=Integer.MIN_VALUE;mainSink(data);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{long data;data=Long.MIN_VALUE;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String data;main_private=true;data=main_source();Class<?> tempClass=Class.forName(data);Object tempClassObject=tempClass.newInstance();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPrivate=false;mainSink(data,request,response);}
private void main()throws Throwable{short dataCopy;{short data;data=Short.MIN_VALUE;dataCopy=data;}{short data=dataCopy;if(data > Short.MIN_VALUE){data--;short result=(short)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}}
private void main()throws Throwable{int data=0;data=100;mainPublicStatic=true;(new b()).mainSink(data);}
private byte mainSource()throws Throwable{byte data;data=2;return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{int data;mainPublicStatic=false;data=(new b()).mainSource();ArrayList intArrayList=new ArrayList(data);}
private void main()throws Throwable{long data;data=2;mainSink(data);}
private void main()throws Throwable{float data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink(data);}
private void main()throws Throwable{int count;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}if(count > 0 && count <=2000){Thread.sleep(count);}}
private void main()throws Throwable{String password;password="Password1234!";mainPrivate=true;mainSink(password);}
private void main()throws Throwable{int data;mainPublicStatic=true;data=(new b()).mainSource();HashSet intHashSet=new HashSet(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=0;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String data=(new b()).mainSource();int numberOfLoops;try{numberOfLoops=Integer.parseInt(data);}catch(NumberFormatException exceptNumberFormat){IO.writeLine("Invalid response. Numeric input expected. Assuming 1.");numberOfLoops=1;}for(int i=0;i < numberOfLoops;i++){IO.writeLine("hello world");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;(new b()).mainSink(data,request,response);}
private float mainSource()throws Throwable{float data;Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=(new b()).mainSource(request,response);int array[]={0,1,2,3,4};if(data >=0 && data < array.length){array[data]=42;}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{String data;main_private=true;data=main_source();Connection dbConnection=null;try{dbConnection=IO.getDBConnection();dbConnection.setCatalog(data);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int count;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainSink(count);}
private int mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{long data;data=2;LinkedList<Long> dataLinkedList=new LinkedList<Long>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();int result=(int)(data * data);IO.writeLine("result: "+result);}
private int mainSource()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}return data;}
private void main()throws Throwable{short data;data=2;(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data=0;data=(new SecureRandom()).nextInt();mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{StringBuilder data;data=new StringBuilder();Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();{if(data <(Integer.MAX_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform multiplication.");}}}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{String data;main_private=true;data=main_source();String osCommand;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){osCommand="c:\\WINDOWS\\SYSTEM32\\cmd.exe/c dir ";}else{osCommand="/bin/ls ";}Process process=Runtime.getRuntime().exec(osCommand+data);process.waitFor();}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{String data=(new b()).mainSource();String xmlFile=null;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){xmlFile="\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml";}else{xmlFile="./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml";}if(data!=null){String [] tokens=data.split("||");if(tokens.length < 2){return;}String username=StringEscapeUtils.escapeXml(tokens[0]);String password=StringEscapeUtils.escapeXml(tokens[1]);XPath xPath=XPathFactory.newInstance().newXPath();InputSource inputXml=new InputSource(xmlFile);String query="//users/user[name/text()='"+username+"' and pass/text()='"+password+"']"+"/secret/text()";String secret=(String)xPath.evaluate(query,inputXml,XPathConstants.STRING);}}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{String password;password="Password1234!";Container passwordContainer=new Container();passwordContainer.containerOne=password;(new b()).mainSink(passwordContainer);}
private void main()throws Throwable{String data;try{InputStreamReader readerInputStream=new InputStreamReader(System.in,"UTF-8");BufferedReader readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}dataGoodG2B=data;mainSink();}
private void main()throws Throwable{byte data;data=2;mainSink(data);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data=0;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{long data;data=2;(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{short data=(new b()).mainSource();{IO.writeLine((byte)data);}}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data=0;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{int dataCopy;{int data;data=Integer.MIN_VALUE;dataCopy=data;}{int data=dataCopy;if(data > Integer.MIN_VALUE){data--;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to decrement.");}}}
private void main()throws Throwable{long data;data=2;LinkedList<Long> dataLinkedList=new LinkedList<Long>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data;while(true){data=2;break;}while(true){int result=(int)(data-1);IO.writeLine("result: "+result);break;}}
private void main()throws Throwable{String data;while(true){data="Testing.test";break;}Class<?> tempClass=Class.forName(data);Object tempClassObject=tempClass.newInstance();}
private float mainSource()throws Throwable{float data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}break;}while(true){if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.addHeader("Location","/author.jsp?lang="+data);}break;}}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{short data;data=2;short[] dataArray=new short[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data=0;data=(new SecureRandom()).nextInt();mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}(new b()).mainSink(data);}
private void main()throws Throwable{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{byte data=0;data=Byte.MAX_VALUE;mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data;data=100;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{byte data=(new b()).mainSource();byte result=(byte)(data+1);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};if(data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}}
private void main()throws Throwable{String data;data=System.getenv("ADD");HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainSink(data,request,response);}
private int mainSource()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}return data;}
private void main()throws Throwable{int data;data=2;dataGoodG2B=data;mainSink();}
private void main()throws Throwable{byte data=0;data=Byte.MAX_VALUE;mainPublicStatic=true;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data=(new b()).mainSource();if(data!=null){System.out.format("%s%n",data);}}
private void main()throws Throwable{String data;data=System.getProperty("CWE690");Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{byte data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String password;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}Container passwordContainer=new Container();passwordContainer.containerOne=password;(new b()).mainSink(passwordContainer);}
private void main()throws Throwable{float data=0.0f;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="Testing.test";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=0;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{int data;data=2;data--;int result=(int)(data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}mainPublicStatic=false;(new b()).mainSink(data,request,response);}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";return data;}
private void main()throws Throwable{String data;data="CWE690";(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="Testing.test";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{short data=mainSource();{IO.writeLine((byte)data);}}
private void main()throws Throwable{String dataCopy;{String data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}dataCopy=data;}{String data=dataCopy;Connection dbConnection=null;PreparedStatement sqlStatement=null;ResultSet resultSet=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.prepareStatement("select * from users where name=?");sqlStatement.setString(1,data);resultSet=sqlStatement.executeQuery();}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("CWE690");String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data=0;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;while(true){data="foo";break;}while(true){Connection dbConnection=null;Statement sqlStatement=null;try{dbConnection=IO.getDBConnection();sqlStatement=dbConnection.createStatement();int rowCount=sqlStatement.executeUpdate("insert into users(status)values('updated')where name='"+data+"'");IO.writeLine("Updated "+rowCount+" rows successfully.");}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error getting database connection",exceptSql);}finally{try{if(sqlStatement!=null){sqlStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Statement",exceptSql);}try{if(dbConnection!=null){dbConnection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}break;}}
private void main()throws Throwable{float data=(new b()).mainSource();int result=(int)(100.0/data);IO.writeLine(result);}
private void main()throws Throwable{while(true){String input="Test Input";MessageDigest messageDigest=MessageDigest.getInstance("SHA-512");IO.writeLine(IO.toHex(hashValue));break;}}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{short data;data=2;LinkedList<Short> dataLinkedList=new LinkedList<Short>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{byte data;data=(byte)((new java.security.SecureRandom()).nextInt(1+Byte.MAX_VALUE-Byte.MIN_VALUE)+Byte.MIN_VALUE);Vector<Byte> dataVector=new Vector<Byte>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int dataCopy;{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};if(data >=0 && data < array.length){array[data]=42;}else{IO.writeLine("Array index out of bounds");}}}
private void main()throws Throwable{int data=0;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPublicStatic=false;(new b()).mainSink(data);}
private void main()throws Throwable{byte data=0;data=Byte.MAX_VALUE;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{while(true){BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String string1=readerBuffered.readLine();String string2=readerBuffered.readLine();if(string1!=null && string2!=null){{IO.writeLine("good(): Strings are equal");}else{IO.writeLine("good(): Strings are not equal");}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error!",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}break;}}
private int mainSource()throws Throwable{int data;data=2;return data;}
private String mainSource()throws Throwable{String data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}return data;}
private void main()throws Throwable{String data;data="foo";mainSink(data);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=System.getenv("ADD");String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;{int result=(int)(data * 2);IO.writeLine("result: "+result);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String dataCopy;{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataCopy=data;}{String data=dataCopy;if(data!=null){Cookie cookieSink=new Cookie("lang",URLEncoder.encode(data,"UTF-8"));response.addCookie(cookieSink);}}}
private void main()throws Throwable{int data;{String stringNumber=System.getProperty("user.home");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int data=(new b()).mainSource();if(data > Integer.MIN_VALUE){int result=(int)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}}
private void main()throws Throwable{String password;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPrivate=true;mainSink(password);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=true;data=main_source(request,response);if(data!=null){response.getWriter().println("<br>bad()-<img src=\""+data+"\">");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="foo";break;}if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{int data;data=2;int result=(int)(data+1);IO.writeLine("result: "+result);}
private void main()throws Throwable{short data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int data;main_private=true;data=main_source();{IO.writeLine((short)data);}}
private void main()throws Throwable{String data;PasswordAuthentication credentials=new PasswordAuthentication("user","AP@ssw0rd".toCharArray());data=new String(credentials.getPassword());(new b()).mainSink((Object)data);}
private void main()throws Throwable{int count;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}(new b()).mainSink(count);}
private void main()throws Throwable{String dataCopy;{String data;PasswordAuthentication credentials=new PasswordAuthentication("user","AP@ssw0rd".toCharArray());data=new String(credentials.getPassword());dataCopy=data;}{String data=dataCopy;SSLSocketFactory sslsSocketFactory=null;SSLSocket sslSocket=null;PrintWriter writer=null;try{sslsSocketFactory=(SSLSocketFactory)SSLSocketFactory.getDefault();sslSocket=(SSLSocket)sslsSocketFactory.createSocket("remote_host",1337);writer=new PrintWriter(sslSocket.getOutputStream(),true);writer.println(data);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error writing to the socket",exceptIO);}finally{if(writer!=null){writer.close();}try{if(sslSocket!=null){sslSocket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing SSLSocket",exceptIO);}}}}
private void main()throws Throwable{int dataCopy;{int data;data=-1;dataCopy=data;}{int data=dataCopy;int array[]={0,1,2,3,4};if(data >=0 && data < array.length){array[data]=42;}else{IO.writeLine("Array index out of bounds");}}}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private int mainSource()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}return data;}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{long data;data=Long.MIN_VALUE;mainPrivate=false;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=0;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{byte data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data=(new b()).mainSource();if(data.equals("CWE690")){IO.writeLine("data is CWE690");}}
private void main()throws Throwable{long data;data=Long.MIN_VALUE;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=request.getParameter("CWE690");dataGoodB2G=data;mainSink(request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;while(true){{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}break;}while(true){int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}break;}}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private short mainSource()throws Throwable{short data;data=2;return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";return data;}
private void main()throws Throwable{long data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Long.parseLong(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,Long> dataHashMap=new HashMap<Integer,Long>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="CWE690";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}mainSink(data,request,response);}
private void main()throws Throwable{short dataCopy;{short data;data=2;dataCopy=data;}{short data=dataCopy;data--;short result=(short)(data);IO.writeLine("result: "+result);}}
private void main()throws Throwable{int data=0;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource(request,response);Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data=(new b()).mainSource();if(data > Integer.MIN_VALUE){int result=(int)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private String mainSource(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data;data="foo";mainSink(data);}
private void main()throws Throwable{long data=0L;data=(new java.security.SecureRandom()).nextLong();mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int data=0;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{data=Byte.MIN_VALUE;(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;while(true){data="foo";break;}if(data!=null){response.getWriter().println("<br>bad(): data="+data);}}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink(data);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;{int result=(int)(data * 2);IO.writeLine("result: "+result);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from cookie",exceptNumberFormat);}}}dataGoodB2G=data;mainSink(request,response);}
private void main()throws Throwable{int count;count=Integer.MAX_VALUE;mainPrivate=true;mainSink(count);}
private void main()throws Throwable{int data=(new b()).mainSource();int array[]=null;if(data > 0){array=new int[data];}else{IO.writeLine("Array size is negative");}array[0]=5;IO.writeLine(array[0]);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data=null;data="5";mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int count;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(count);byte[] countSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(countSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{String data;data="foo";Vector<String> dataVector=new Vector<String>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{byte data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Byte.parseByte(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int countCopy;{int count;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){String stringNumber=cookieSources[0].getValue();try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading count from cookie",exceptNumberFormat);}}}countCopy=count;}{int count=countCopy;int i=0;if(count > 0 && count <=20){for(i=0;i < count;i++){IO.writeLine("Hello");}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray,request,response);}
private void main()throws Throwable{int data=(new b()).mainSource();data--;int result=(int)(data);IO.writeLine("result: "+result);}
private void main()throws Throwable{byte data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data=null;data=request.getParameter("name");mainPublicStatic=true;(new b()).mainSink(data,request,response);}
private void main()throws Throwable{data=new StringBuilder();(new b()).mainSink();}
private long mainSource()throws Throwable{long data;data=2;return data;}
private void main()throws Throwable{String passwordCopy;{String password;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}passwordCopy=password;}{String password=passwordCopy;if(password!=null){{Cipher aesCipher=Cipher.getInstance("AES");SecretKeySpec secretKeySpec=new SecretKeySpec("ABCDEFGHABCDEFGH".getBytes("UTF-8"),"AES");aesCipher.init(Cipher.DECRYPT_MODE,secretKeySpec);password=new String(aesCipher.doFinal(password.getBytes("UTF-8")),"UTF-8");}Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=DriverManager.getConnection("data-url","root",password);preparedStatement=connection.prepareStatement("select * from test_table");resultSet=preparedStatement.executeQuery();}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}}
private void main()throws Throwable{float data=(new b()).mainSource();int result=(int)(100.0/data);IO.writeLine(result);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{String stringNumber=request.getParameter("name");try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading data from parameter 'name'",exceptNumberFormat);}}(new b()).mainSink(data,request,response);}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int dataCopy;{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}dataCopy=data;}{int data=dataCopy;if(data < Integer.MAX_VALUE){data++;int result=(int)(data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}}
private void main()throws Throwable{while(true){final String CIPHER_INPUT="ABCDEFG123456";KeyGenerator keyGenerator=KeyGenerator.getInstance("AES");keyGenerator.init(256);SecretKey secretKey=keyGenerator.generateKey();byte[] byteKey=secretKey.getEncoded();SecretKeySpec secretKeySpec=new SecretKeySpec(byteKey,"AES");Cipher aesCipher=Cipher.getInstance("AES");aesCipher.init(Cipher.ENCRYPT_MODE,secretKeySpec);byte[] encrypted=aesCipher.doFinal(CIPHER_INPUT.getBytes("UTF-8"));IO.writeLine(IO.toHex(encrypted));break;}}
private void main()throws Throwable{int data=0;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{long data;data=Long.MAX_VALUE;dataGoodB2G=data;mainSink();}
private int mainSource()throws Throwable{int data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}return data;}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainSink(data,request,response);}
private void main()throws Throwable{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{while(true){IO.writeLine("This a test of the emergency broadcast system");break;}}
private void main()throws Throwable{short data=(new b()).mainSource();if(data < Short.MAX_VALUE){short result=(short)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{String data=null;data="foo";mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data,request,response);}
private void main()throws Throwable{String data;data="foo";mainSink(data);}
private void main()throws Throwable{String data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;mainPublicStatic=true;data=(new b()).mainSource();String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink((Object)data);}
private short mainSource()throws Throwable{short data;data=2;return data;}
private void main()throws Throwable{long data=0L;data=2;mainPublicStatic=true;(new b()).mainSink(data);}
private void main()throws Throwable{String password;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);password=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}if(password!=null){{Cipher aesCipher=Cipher.getInstance("AES");SecretKeySpec secretKeySpec=new SecretKeySpec("ABCDEFGHABCDEFGH".getBytes("UTF-8"),"AES");aesCipher.init(Cipher.DECRYPT_MODE,secretKeySpec);password=new String(aesCipher.doFinal(password.getBytes("UTF-8")),"UTF-8");}Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=DriverManager.getConnection("data-url","root",password);preparedStatement=connection.prepareStatement("select * from test_table");resultSet=preparedStatement.executeQuery();}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with database connection",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList,request,response);}
private void main()throws Throwable{int data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{byte data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}(new b()).mainSink(request,response);}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data=(new b()).mainSource();if(data!=0){IO.writeLine("100%"+data+"="+(100 % data)+"\n");}else{IO.writeLine("This would result in a modulo by zero");}}
private void main()throws Throwable{byte data;data=2;mainPrivate=true;mainSink(data);}
private void main()throws Throwable{long data;data=(new java.security.SecureRandom()).nextLong();(new b()).mainSink(data);}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{String data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{int count;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink((Object)count);}
private void main()throws Throwable{long data=(new b()).mainSource();long result=(long)(data * data);IO.writeLine("result: "+result);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{float data=(new b()).mainSource();if(Math.abs(data)> 0.000001){int result=(int)(100.0/data);IO.writeLine(result);}else{IO.writeLine("This would result in a divide by zero");}}
private void main()throws Throwable{StringBuilder data;data=CWE690_NULL_Deref_From_Return__Class_Helper.getStringBuilderBad();if(data!=null){String stringTrimmed=data.toString().trim();IO.writeLine(stringTrimmed);}}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;{int result=(int)(data * 2);IO.writeLine("result: "+result);}}}
private void main()throws Throwable{String data;data=System.getProperty("CWE690");if(data!=null){String stringTrimmed=data.trim();IO.writeLine(stringTrimmed);}}
private void main()throws Throwable{int dataCopy;{int data;{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();String stringNumber=resultSet.getString(1);{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}dataCopy=data;}{int data=dataCopy;if(data < Integer.MAX_VALUE){int result=(int)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}}
private void main()throws Throwable{String data;data="foo";LinkedList<String> dataLinkedList=new LinkedList<String>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{}}}dataGoodB2G=data;mainSink(request,response);}
private void main()throws Throwable{String data;mainPublicStatic=false;data=(new b()).mainSource();if(data!=null){File file=new File(data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main()throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{float data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}if(Math.abs(data)> 0.000001){int result=(int)(100.0 % data);IO.writeLine(result);}else{IO.writeLine("This would result in a modulo by zero");}}
private void main()throws Throwable{byte dataCopy;{byte data;data=2;dataCopy=data;}{byte data=dataCopy;byte result=(byte)(++data);IO.writeLine("result: "+result);}}
private void main()throws Throwable{String dataCopy;{String data;data="Testing.test";dataCopy=data;}{String data=dataCopy;Class<?> tempClass=Class.forName(data);Object tempClassObject=tempClass.newInstance();}}
private void main()throws Throwable{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;data=(new SecureRandom()).nextInt();ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{short data;data=(short)((new java.security.SecureRandom()).nextInt(1+Short.MAX_VALUE-Short.MIN_VALUE)+Short.MIN_VALUE);if((data!=Integer.MIN_VALUE)&&(data!=Long.MIN_VALUE)&&(Math.abs(data)<=(long)Math.sqrt(Short.MAX_VALUE))){short result=(short)(data * data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to perform squaring.");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;{StringTokenizer tokenizer=new StringTokenizer(request.getQueryString(),"&");while(tokenizer.hasMoreTokens()){{try{}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception reading id from query string",exceptNumberFormat);}}}}(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{String data;data=System.getProperty("user.home");(new b()).mainSink((Object)data);}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;main_private=true;data=main_source(request,response);String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int data=(new b()).mainSource();int result=(int)(++data);IO.writeLine("result: "+result);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";(new b()).mainSink((Object)data,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";HashMap<Integer,String> dataHashMap=new HashMap<Integer,String>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap,request,response);}
private void main()throws Throwable{float data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){try{data=Float.parseFloat(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{String data;data="foo";String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{short data;data=-1;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null){data=Short.parseShort(stringNumber.trim());}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Error with number parsing",exceptNumberFormat);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}finally{try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataGoodB2G=data;mainSink();}
private void main()throws Throwable{long data;data=2;(new b()).mainSink(data);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int count;count=2;(new b()).mainSink((Object)count);}
private void main()throws Throwable{int [] data;data=null;LinkedList<int []> dataLinkedList=new LinkedList<int []>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}mainPrivate=false;mainSink(data);}
private void main()throws Throwable{String data;data="foo";dataGoodG2B=data;mainSink();}
private void main()throws Throwable{int count=0;count=Integer.MAX_VALUE;mainPublicStatic=true;(new b()).mainSink(count);}
private void main()throws Throwable{int data;mainPublicStatic=false;data=(new b()).mainSource();{IO.writeLine((byte)data);}}
private void main()throws Throwable{int count;count=2;int i=0;for(i=0;i < count;i++){IO.writeLine("Hello");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";mainSink(data,request,response);}
private void main()throws Throwable{int dataCopy;{int data;data=2;dataCopy=data;}{int data=dataCopy;data++;int result=(int)(data);IO.writeLine("result: "+result);}}
private void main()throws Throwable{float data=(new b()).mainSource();if(Math.abs(data)> 0.000001){int result=(int)(100.0/data);IO.writeLine(result);}else{IO.writeLine("This would result in a divide by zero");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=(new b()).mainSource(request,response);int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{String data;data="foo";mainPrivate=true;mainSink(data);}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainSink(data);}
private void main()throws Throwable{int count=0;count=2;mainPublicStatic=true;(new b()).mainSink(count);}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Vector<Integer> dataVector=new Vector<Integer>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector,request,response);}
private void main()throws Throwable{int count;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}int[] countArray=new int[5];countArray[2]=count;(new b()).mainSink(countArray);}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;while(true){data="foo";break;}Hashtable<String,String> environmentHashTable=new Hashtable<String,String>();environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");environmentHashTable.put(Context.PROVIDER_URL,"ldap://localhost:389");DirContext directoryContext=null;try{directoryContext=new InitialDirContext(environmentHashTable);String search="(cn="+data+")";NamingEnumeration<SearchResult> answer=directoryContext.search("",search,null);while(answer.hasMore()){SearchResult searchResult=answer.next();Attributes attributes=searchResult.getAttributes();NamingEnumeration<?> allAttributes=attributes.getAll();while(allAttributes.hasMore()){Attribute attribute=(Attribute)allAttributes.next();NamingEnumeration<?> allValues=attribute.getAll();while(allValues.hasMore()){IO.writeLine(" Value: "+allValues.next().toString());}}}}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"The LDAP service was not found or login failed.",exceptNaming);}finally{if(directoryContext!=null){try{directoryContext.close();}catch(NamingException exceptNaming){IO.logger.log(Level.WARNING,"Error closing DirContext",exceptNaming);}}}}
private void main()throws Throwable{String data;data=System.getProperty("user.home");String[] dataArray=new String[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{String data;data="foo";(new b()).mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main()throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int data;{String stringNumber=System.getenv("ADD");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer);}
private void main()throws Throwable{int count;count=2;LinkedList<Integer> countLinkedList=new LinkedList<Integer>();countLinkedList.add(0,count);countLinkedList.add(1,count);countLinkedList.add(2,count);(new b()).mainSink(countLinkedList);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;mainSink(data);}
private void main()throws Throwable{int data;while(true){{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}break;}while(true){{if(data >(Integer.MIN_VALUE/2)){int result=(int)(data * 2);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform multiplication.");}}break;}}
private void main()throws Throwable{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}int[] dataArray=new int[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data=2;(new b()).mainSink(request,response);}
private void main()throws Throwable{int data;{URLConnection urlConnection=(new URL("http://www.example.org/")).openConnection();BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{readerInputStream=new InputStreamReader(urlConnection.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{byte data;data=2;byte[] dataArray=new byte[5];dataArray[2]=data;(new b()).mainSink(dataArray);}
private void main()throws Throwable{if(IO.staticReturnsTrueOrFalse()){final String CIPHER_INPUT="ABCDEFG123456";KeyGenerator keyGenerator=KeyGenerator.getInstance("AES");keyGenerator.init(256);SecretKey secretKey=keyGenerator.generateKey();byte[] byteKey=secretKey.getEncoded();SecretKeySpec secretKeySpec=new SecretKeySpec(byteKey,"AES");Cipher aesCipher=Cipher.getInstance("AES");aesCipher.init(Cipher.ENCRYPT_MODE,secretKeySpec);byte[] encrypted=aesCipher.doFinal(CIPHER_INPUT.getBytes("UTF-8"));IO.writeLine(IO.toHex(encrypted));}else{final String CIPHER_INPUT="ABCDEFG123456";KeyGenerator keyGenerator=KeyGenerator.getInstance("AES");keyGenerator.init(256);SecretKey secretKey=keyGenerator.generateKey();byte[] byteKey=secretKey.getEncoded();SecretKeySpec secretKeySpec=new SecretKeySpec(byteKey,"AES");Cipher aesCipher=Cipher.getInstance("AES");aesCipher.init(Cipher.ENCRYPT_MODE,secretKeySpec);byte[] encrypted=aesCipher.doFinal(CIPHER_INPUT.getBytes("UTF-8"));IO.writeLine(IO.toHex(encrypted));}}
private void main()throws Throwable{data=2;(new b()).mainSink();}
private void main()throws Throwable{String data;{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);data=readerBuffered.readLine();}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main()throws Throwable{{ServerSocket listener=null;Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{listener=new ServerSocket(39543);socket=listener.accept();readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}try{if(listener!=null){listener.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ServerSocket",exceptIO);}}}(new b()).mainSink();}
private void main()throws Throwable{int count;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{count=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing count from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}HashMap<Integer,Integer> countHashMap=new HashMap<Integer,Integer>();countHashMap.put(0,count);countHashMap.put(1,count);countHashMap.put(2,count);(new b()).mainSink(countHashMap);}
private void main()throws Throwable{int data;data=2;HashMap<Integer,Integer> dataHashMap=new HashMap<Integer,Integer>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{int data;data=2;data--;int result=(int)(data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int dataCopy;{int data;{File file=new File("C:\\data.txt");FileInputStream streamFileInput=null;InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{streamFileInput=new FileInputStream(file);readerInputStream=new InputStreamReader(streamFileInput,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}dataCopy=data;}{int data=dataCopy;if(data < Integer.MAX_VALUE){int result=(int)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}}
private void main()throws Throwable{String password;password="Password1234!";mainPrivate=true;mainSink(password);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;Container dataContainer=new Container();dataContainer.containerOne=data;(new b()).mainSink(dataContainer,request,response);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;{Cookie cookieSources[]=request.getCookies();if(cookieSources!=null){data=cookieSources[0].getValue();}}if(data!=null){data=URLEncoder.encode(data,"UTF-8");response.addHeader("Location","/author.jsp?lang="+data);}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;mainPublicStatic=false;data=(new b()).mainSource(request,response);String root;if(System.getProperty("os.name").toLowerCase().indexOf("win")>=0){root="C:\\uploads\\";}else{root="/home/user/uploads/";}if(data!=null){File file=new File(root+data);FileInputStream streamFileInputSink=null;InputStreamReader readerInputStreamSink=null;BufferedReader readerBufferdSink=null;if(file.exists()&& file.isFile()){try{streamFileInputSink=new FileInputStream(file);readerInputStreamSink=new InputStreamReader(streamFileInputSink,"UTF-8");readerBufferdSink=new BufferedReader(readerInputStreamSink);IO.writeLine(readerBufferdSink.readLine());}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBufferdSink!=null){readerBufferdSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStreamSink!=null){readerInputStreamSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(streamFileInputSink!=null){streamFileInputSink.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}}}
private int mainSource()throws Throwable{int data;data=2;return data;}
private int mainSource()throws Throwable{int data;data=2;return data;}
private void main()throws Throwable{short data;data=Short.MAX_VALUE;(new b()).mainSink(data);}
private void main()throws Throwable{data="foo";(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data=(new b()).mainSource(request,response);int result=(int)(--data);IO.writeLine("result: "+result);}
private void main()throws Throwable{int data;{Socket socket=null;BufferedReader readerBuffered=null;InputStreamReader readerInputStream=null;try{socket=new Socket("host.example.org",39544);readerInputStream=new InputStreamReader(socket.getInputStream(),"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}try{if(socket!=null){socket.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing Socket",exceptIO);}}}int array[]={0,1,2,3,4};if(data >=0 && data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main()throws Throwable{byte data;data=2;HashMap<Integer,Byte> dataHashMap=new HashMap<Integer,Byte>();dataHashMap.put(0,data);dataHashMap.put(1,data);dataHashMap.put(2,data);(new b()).mainSink(dataHashMap);}
private void main()throws Throwable{long data=(new b()).mainSource();if(data < Long.MAX_VALUE){long result=(long)(++data);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too large to increment.");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;mainSink(data,request,response);}
private void main()throws Throwable{{Connection connection=null;PreparedStatement preparedStatement=null;ResultSet resultSet=null;try{connection=IO.getDBConnection();preparedStatement=connection.prepareStatement("select name from users where id=0");resultSet=preparedStatement.executeQuery();data=resultSet.getString(1);}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error with SQL statement",exceptSql);}finally{try{if(resultSet!=null){resultSet.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing ResultSet",exceptSql);}try{if(preparedStatement!=null){preparedStatement.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing PreparedStatement",exceptSql);}try{if(connection!=null){connection.close();}}catch(SQLException exceptSql){IO.logger.log(Level.WARNING,"Error closing Connection",exceptSql);}}}(new b()).mainSink();}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{int data;data=2;dataGoodG2B=data;mainSink(request,response);}
private void main()throws Throwable{int data;data=2;ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{int data;data=2;LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{int dataCopy;{int data;{InputStreamReader readerInputStream=null;BufferedReader readerBuffered=null;try{readerInputStream=new InputStreamReader(System.in,"UTF-8");readerBuffered=new BufferedReader(readerInputStream);String stringNumber=readerBuffered.readLine();if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(readerBuffered!=null){readerBuffered.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing BufferedReader",exceptIO);}try{if(readerInputStream!=null){readerInputStream.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing InputStreamReader",exceptIO);}}}dataCopy=data;}{int data=dataCopy;if(data > Integer.MIN_VALUE){int result=(int)(data-1);IO.writeLine("result: "+result);}else{IO.writeLine("data value is too small to perform subtraction.");}}}
private void main()throws Throwable{short dataCopy;{short data;data=2;dataCopy=data;}{short data=dataCopy;data++;short result=(short)(data);IO.writeLine("result: "+result);}}
private void main()throws Throwable{int data;data=2;(new b()).mainSink((Object)data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data="foo";ByteArrayOutputStream streamByteArrayOutput=null;ObjectOutput outputObject=null;try{streamByteArrayOutput=new ByteArrayOutputStream();outputObject=new ObjectOutputStream(streamByteArrayOutput);outputObject.writeObject(data);byte[] dataSerialized=streamByteArrayOutput.toByteArray();(new b()).mainSink(dataSerialized,request,response);}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"IOException in serialization",exceptIO);}finally{try{if(outputObject!=null){outputObject.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ObjectOutputStream",exceptIO);}try{if(streamByteArrayOutput!=null){streamByteArrayOutput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing ByteArrayOutputStream",exceptIO);}}}
private void main()throws Throwable{data=2.0f;(new b()).mainSink();}
private void main()throws Throwable{int data;data=2;int array[]={0,1,2,3,4};if(data < array.length){IO.writeLine(array[data]);}else{IO.writeLine("Array index out of bounds");}}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{data="foo";(new b()).mainSink(request,response);}
private void main()throws Throwable{int data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);String stringNumber=properties.getProperty("data");if(stringNumber!=null)//avoid NPD incidental warnings{try{data=Integer.parseInt(stringNumber.trim());}catch(NumberFormatException exceptNumberFormat){IO.logger.log(Level.WARNING,"Number format exception parsing data from string",exceptNumberFormat);}}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}LinkedList<Integer> dataLinkedList=new LinkedList<Integer>();dataLinkedList.add(0,data);dataLinkedList.add(1,data);dataLinkedList.add(2,data);(new b()).mainSink(dataLinkedList);}
private void main()throws Throwable{String data;{Properties properties=new Properties();FileInputStream streamFileInput=null;try{streamFileInput=new FileInputStream("../common/config.properties");properties.load(streamFileInput);data=properties.getProperty("data");}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error with stream reading",exceptIO);}finally{try{if(streamFileInput!=null){streamFileInput.close();}}catch(IOException exceptIO){IO.logger.log(Level.WARNING,"Error closing FileInputStream",exceptIO);}}}mainPrivate=true;mainSink(data);}
private void main(HttpServletRequest request,HttpServletResponse response)throws Throwable{String data;data=System.getProperty("user.home");(new b()).mainSink((Object)data,request,response);}
private void main()throws Throwable{float data;data=2.0f;Vector<Float> dataVector=new Vector<Float>(5);dataVector.add(0,data);dataVector.add(1,data);dataVector.add(2,data);(new b()).mainSink(dataVector);}
private void main()throws Throwable{long data;data=2;mainPrivate=true;mainSink(data);}
